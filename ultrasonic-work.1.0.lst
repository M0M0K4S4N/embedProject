CCS PCM C Compiler, Version 5.063, 32906               05-Apr-17 16:09

               Filename:   D:\#cpeembed\#project\ultrasonic-work.1.0.lst

               ROM used:   3369 words (41%)
                           Largest free fragment is 2048
               RAM used:   56 (15%) at main() level
                           136 (37%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  0A
0001:  MOVWF  0A
0002:  GOTO   20D
0003:  NOP
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  43
0009:  RETLW  61
000A:  RETLW  6C
000B:  RETLW  69
000C:  RETLW  62
000D:  RETLW  72
000E:  RETLW  61
000F:  RETLW  74
0010:  RETLW  65
0011:  RETLW  64
0012:  RETLW  21
0013:  RETLW  00
0014:  DATA D3,32
0015:  DATA EE,39
0016:  DATA 6F,39
0017:  DATA 3D,10
0018:  DATA 25,26
0019:  DATA F5,04
001A:  DATA C4,32
001B:  DATA 67,39
001C:  DATA E5,32
001D:  DATA 3D,10
001E:  DATA 25,17
001F:  DATA 32,33
0020:  DATA 09,22
0021:  DATA E9,39
0022:  DATA F4,1E
0023:  DATA A0,12
0024:  DATA 2E,19
0025:  DATA 66,10
0026:  DATA E3,36
0027:  DATA 20,10
0028:  DATA F4,30
0029:  DATA 6C,36
002A:  DATA BD,12
002B:  DATA 66,10
002C:  DATA E3,36
002D:  DATA 0D,05
002E:  DATA 00,00
002F:  DATA AD,16
0030:  DATA AD,16
0031:  DATA 00,00
0032:  DATA AD,16
0033:  DATA AD,16
0034:  DATA 00,01
*
0049:  BSF    03.5
004A:  MOVF   38,W
004B:  BTFSC  03.2
004C:  GOTO   0BA
004D:  MOVWF  40
004E:  MOVF   3C,W
004F:  BTFSC  03.2
0050:  GOTO   0BA
0051:  ADDWF  40,F
0052:  BTFSC  03.0
0053:  GOTO   05B
0054:  MOVLW  7F
0055:  SUBWF  40,F
0056:  BTFSS  03.0
0057:  GOTO   0BA
0058:  BTFSC  03.2
0059:  GOTO   0BA
005A:  GOTO   05F
005B:  MOVLW  81
005C:  ADDWF  40,F
005D:  BTFSC  03.0
005E:  GOTO   0BA
005F:  MOVF   40,W
0060:  MOVWF  77
0061:  CLRF   78
0062:  CLRF   79
0063:  CLRF   7A
0064:  MOVF   39,W
0065:  MOVWF  44
0066:  BSF    44.7
0067:  MOVF   3A,W
0068:  MOVWF  43
0069:  MOVF   3B,W
006A:  MOVWF  42
006B:  MOVLW  18
006C:  MOVWF  40
006D:  CLRF   41
006E:  BTFSS  42.0
006F:  GOTO   088
0070:  MOVF   3F,W
0071:  ADDWF  7A,F
0072:  BTFSS  03.0
0073:  GOTO   07A
0074:  INCF   79,F
0075:  BTFSS  03.2
0076:  GOTO   07A
0077:  INCF   78,F
0078:  BTFSC  03.2
0079:  BSF    41.7
007A:  MOVF   3E,W
007B:  ADDWF  79,F
007C:  BTFSS  03.0
007D:  GOTO   081
007E:  INCF   78,F
007F:  BTFSC  03.2
0080:  BSF    41.7
0081:  MOVF   3D,W
0082:  MOVWF  3A
0083:  BSF    3A.7
0084:  MOVF   3A,W
0085:  ADDWF  78,F
0086:  BTFSC  03.0
0087:  BSF    41.7
0088:  RLF    41,F
0089:  RRF    78,F
008A:  RRF    79,F
008B:  RRF    7A,F
008C:  RRF    44,F
008D:  RRF    43,F
008E:  RRF    42,F
008F:  BCF    03.0
0090:  DECFSZ 40,F
0091:  GOTO   06D
0092:  MOVLW  01
0093:  ADDWF  77,F
0094:  BTFSC  03.0
0095:  GOTO   0BA
0096:  BTFSC  78.7
0097:  GOTO   09F
0098:  RLF    44,F
0099:  RLF    7A,F
009A:  RLF    79,F
009B:  RLF    78,F
009C:  DECF   77,F
009D:  BTFSC  03.2
009E:  GOTO   0BA
009F:  BTFSS  44.7
00A0:  GOTO   0B0
00A1:  INCF   7A,F
00A2:  BTFSS  03.2
00A3:  GOTO   0B0
00A4:  INCF   79,F
00A5:  BTFSS  03.2
00A6:  GOTO   0B0
00A7:  INCF   78,F
00A8:  BTFSS  03.2
00A9:  GOTO   0B0
00AA:  RRF    78,F
00AB:  RRF    79,F
00AC:  RRF    7A,F
00AD:  INCF   77,F
00AE:  BTFSC  03.2
00AF:  GOTO   0BA
00B0:  MOVF   39,W
00B1:  MOVWF  41
00B2:  MOVF   3D,W
00B3:  XORWF  41,F
00B4:  BTFSS  41.7
00B5:  GOTO   0B8
00B6:  BSF    78.7
00B7:  GOTO   0BE
00B8:  BCF    78.7
00B9:  GOTO   0BE
00BA:  CLRF   77
00BB:  CLRF   78
00BC:  CLRF   79
00BD:  CLRF   7A
00BE:  BCF    03.5
00BF:  RETURN
00C0:  MOVF   59,W
00C1:  BTFSC  03.2
00C2:  GOTO   185
00C3:  MOVWF  65
00C4:  MOVF   5D,W
00C5:  BTFSC  03.2
00C6:  GOTO   185
00C7:  SUBWF  65,F
00C8:  BTFSS  03.0
00C9:  GOTO   0CF
00CA:  MOVLW  7F
00CB:  ADDWF  65,F
00CC:  BTFSC  03.0
00CD:  GOTO   185
00CE:  GOTO   0D5
00CF:  MOVLW  81
00D0:  SUBWF  65,F
00D1:  BTFSS  03.0
00D2:  GOTO   185
00D3:  BTFSC  03.2
00D4:  GOTO   185
00D5:  MOVF   65,W
00D6:  MOVWF  77
00D7:  CLRF   78
00D8:  CLRF   79
00D9:  CLRF   7A
00DA:  CLRF   64
00DB:  MOVF   5A,W
00DC:  MOVWF  63
00DD:  BSF    63.7
00DE:  MOVF   5B,W
00DF:  MOVWF  62
00E0:  MOVF   5C,W
00E1:  MOVWF  61
00E2:  MOVLW  19
00E3:  MOVWF  65
00E4:  MOVF   60,W
00E5:  SUBWF  61,F
00E6:  BTFSC  03.0
00E7:  GOTO   0F8
00E8:  MOVLW  01
00E9:  SUBWF  62,F
00EA:  BTFSC  03.0
00EB:  GOTO   0F8
00EC:  SUBWF  63,F
00ED:  BTFSC  03.0
00EE:  GOTO   0F8
00EF:  SUBWF  64,F
00F0:  BTFSC  03.0
00F1:  GOTO   0F8
00F2:  INCF   64,F
00F3:  INCF   63,F
00F4:  INCF   62,F
00F5:  MOVF   60,W
00F6:  ADDWF  61,F
00F7:  GOTO   12A
00F8:  MOVF   5F,W
00F9:  SUBWF  62,F
00FA:  BTFSC  03.0
00FB:  GOTO   113
00FC:  MOVLW  01
00FD:  SUBWF  63,F
00FE:  BTFSC  03.0
00FF:  GOTO   113
0100:  SUBWF  64,F
0101:  BTFSC  03.0
0102:  GOTO   113
0103:  INCF   64,F
0104:  INCF   63,F
0105:  MOVF   5F,W
0106:  ADDWF  62,F
0107:  MOVF   60,W
0108:  ADDWF  61,F
0109:  BTFSS  03.0
010A:  GOTO   12A
010B:  INCF   62,F
010C:  BTFSS  03.2
010D:  GOTO   12A
010E:  INCF   63,F
010F:  BTFSS  03.2
0110:  GOTO   12A
0111:  INCF   64,F
0112:  GOTO   12A
0113:  MOVF   5E,W
0114:  IORLW  80
0115:  SUBWF  63,F
0116:  BTFSC  03.0
0117:  GOTO   129
0118:  MOVLW  01
0119:  SUBWF  64,F
011A:  BTFSC  03.0
011B:  GOTO   129
011C:  INCF   64,F
011D:  MOVF   5E,W
011E:  IORLW  80
011F:  ADDWF  63,F
0120:  MOVF   5F,W
0121:  ADDWF  62,F
0122:  BTFSS  03.0
0123:  GOTO   107
0124:  INCF   63,F
0125:  BTFSS  03.2
0126:  GOTO   107
0127:  INCF   64,F
0128:  GOTO   107
0129:  BSF    7A.0
012A:  DECFSZ 65,F
012B:  GOTO   12D
012C:  GOTO   138
012D:  BCF    03.0
012E:  RLF    61,F
012F:  RLF    62,F
0130:  RLF    63,F
0131:  RLF    64,F
0132:  BCF    03.0
0133:  RLF    7A,F
0134:  RLF    79,F
0135:  RLF    78,F
0136:  RLF    66,F
0137:  GOTO   0E4
0138:  BTFSS  66.0
0139:  GOTO   140
013A:  BCF    03.0
013B:  RRF    78,F
013C:  RRF    79,F
013D:  RRF    7A,F
013E:  RRF    66,F
013F:  GOTO   143
0140:  DECF   77,F
0141:  BTFSC  03.2
0142:  GOTO   185
0143:  BTFSC  66.7
0144:  GOTO   16C
0145:  BCF    03.0
0146:  RLF    61,F
0147:  RLF    62,F
0148:  RLF    63,F
0149:  RLF    64,F
014A:  MOVF   60,W
014B:  SUBWF  61,F
014C:  BTFSC  03.0
014D:  GOTO   158
014E:  MOVLW  01
014F:  SUBWF  62,F
0150:  BTFSC  03.0
0151:  GOTO   158
0152:  SUBWF  63,F
0153:  BTFSC  03.0
0154:  GOTO   158
0155:  SUBWF  64,F
0156:  BTFSS  03.0
0157:  GOTO   17B
0158:  MOVF   5F,W
0159:  SUBWF  62,F
015A:  BTFSC  03.0
015B:  GOTO   163
015C:  MOVLW  01
015D:  SUBWF  63,F
015E:  BTFSC  03.0
015F:  GOTO   163
0160:  SUBWF  64,F
0161:  BTFSS  03.0
0162:  GOTO   17B
0163:  MOVF   5E,W
0164:  IORLW  80
0165:  SUBWF  63,F
0166:  BTFSC  03.0
0167:  GOTO   16C
0168:  MOVLW  01
0169:  SUBWF  64,F
016A:  BTFSS  03.0
016B:  GOTO   17B
016C:  INCF   7A,F
016D:  BTFSS  03.2
016E:  GOTO   17B
016F:  INCF   79,F
0170:  BTFSS  03.2
0171:  GOTO   17B
0172:  INCF   78,F
0173:  BTFSS  03.2
0174:  GOTO   17B
0175:  INCF   77,F
0176:  BTFSC  03.2
0177:  GOTO   185
0178:  RRF    78,F
0179:  RRF    79,F
017A:  RRF    7A,F
017B:  MOVF   5A,W
017C:  MOVWF  65
017D:  MOVF   5E,W
017E:  XORWF  65,F
017F:  BTFSS  65.7
0180:  GOTO   183
0181:  BSF    78.7
0182:  GOTO   189
0183:  BCF    78.7
0184:  GOTO   189
0185:  CLRF   77
0186:  CLRF   78
0187:  CLRF   79
0188:  CLRF   7A
0189:  RETURN
018A:  MOVLW  8E
018B:  MOVWF  77
018C:  BSF    03.5
018D:  MOVF   39,W
018E:  MOVWF  78
018F:  MOVF   38,W
0190:  MOVWF  79
0191:  CLRF   7A
0192:  MOVF   78,F
0193:  BTFSS  03.2
0194:  GOTO   19F
0195:  MOVF   79,W
0196:  MOVWF  78
0197:  CLRF   79
0198:  MOVLW  08
0199:  SUBWF  77,F
019A:  MOVF   78,F
019B:  BTFSS  03.2
019C:  GOTO   19F
019D:  CLRF   77
019E:  GOTO   1A7
019F:  BCF    03.0
01A0:  BTFSC  78.7
01A1:  GOTO   1A6
01A2:  RLF    79,F
01A3:  RLF    78,F
01A4:  DECF   77,F
01A5:  GOTO   19F
01A6:  BCF    78.7
01A7:  BCF    03.5
01A8:  RETURN
*
02AC:  BSF    03.5
02AD:  MOVF   35,W
02AE:  MOVWF  3C
02AF:  MOVF   39,W
02B0:  XORWF  3C,F
02B1:  BTFSS  3C.7
02B2:  GOTO   2B8
02B3:  BCF    03.2
02B4:  BCF    03.0
02B5:  BTFSC  35.7
02B6:  BSF    03.0
02B7:  GOTO   2EB
02B8:  MOVF   35,W
02B9:  MOVWF  3C
02BA:  MOVF   38,W
02BB:  MOVWF  3D
02BC:  MOVF   34,W
02BD:  SUBWF  3D,F
02BE:  BTFSC  03.2
02BF:  GOTO   2C6
02C0:  BTFSS  3C.7
02C1:  GOTO   2EB
02C2:  MOVF   03,W
02C3:  XORLW  01
02C4:  MOVWF  03
02C5:  GOTO   2EB
02C6:  MOVF   39,W
02C7:  MOVWF  3D
02C8:  MOVF   35,W
02C9:  SUBWF  3D,F
02CA:  BTFSC  03.2
02CB:  GOTO   2D2
02CC:  BTFSS  3C.7
02CD:  GOTO   2EB
02CE:  MOVF   03,W
02CF:  XORLW  01
02D0:  MOVWF  03
02D1:  GOTO   2EB
02D2:  MOVF   3A,W
02D3:  MOVWF  3D
02D4:  MOVF   36,W
02D5:  SUBWF  3D,F
02D6:  BTFSC  03.2
02D7:  GOTO   2DE
02D8:  BTFSS  3C.7
02D9:  GOTO   2EB
02DA:  MOVF   03,W
02DB:  XORLW  01
02DC:  MOVWF  03
02DD:  GOTO   2EB
02DE:  MOVF   3B,W
02DF:  MOVWF  3D
02E0:  MOVF   37,W
02E1:  SUBWF  3D,F
02E2:  BTFSC  03.2
02E3:  GOTO   2EA
02E4:  BTFSS  3C.7
02E5:  GOTO   2EB
02E6:  MOVF   03,W
02E7:  XORLW  01
02E8:  MOVWF  03
02E9:  GOTO   2EB
02EA:  BCF    03.0
02EB:  BCF    03.5
02EC:  RETURN
02ED:  MOVLW  80
02EE:  BTFSS  03.1
02EF:  GOTO   2F3
02F0:  BSF    03.5
02F1:  XORWF  3D,F
02F2:  BCF    03.5
02F3:  BSF    03.5
02F4:  CLRF   42
02F5:  CLRF   43
02F6:  MOVF   39,W
02F7:  MOVWF  41
02F8:  MOVF   3D,W
02F9:  XORWF  41,F
02FA:  MOVF   38,W
02FB:  BTFSC  03.2
02FC:  GOTO   3E1
02FD:  MOVWF  40
02FE:  MOVWF  77
02FF:  MOVF   3C,W
0300:  BTFSC  03.2
0301:  GOTO   3EA
0302:  SUBWF  40,F
0303:  BTFSC  03.2
0304:  GOTO   386
0305:  BTFSS  03.0
0306:  GOTO   344
0307:  MOVF   3D,W
0308:  MOVWF  46
0309:  BSF    46.7
030A:  MOVF   3E,W
030B:  MOVWF  45
030C:  MOVF   3F,W
030D:  MOVWF  44
030E:  CLRF   43
030F:  BCF    03.0
0310:  RRF    46,F
0311:  RRF    45,F
0312:  RRF    44,F
0313:  RRF    43,F
0314:  DECFSZ 40,F
0315:  GOTO   30E
0316:  BTFSS  41.7
0317:  GOTO   31B
0318:  BSF    42.0
0319:  GOTO   3FE
031A:  BCF    42.0
031B:  BCF    40.0
031C:  BSF    42.4
031D:  MOVLW  BB
031E:  MOVWF  04
031F:  BCF    03.7
0320:  GOTO   413
0321:  BCF    42.4
0322:  BTFSC  41.7
0323:  GOTO   32E
0324:  BTFSS  40.0
0325:  GOTO   339
0326:  RRF    46,F
0327:  RRF    45,F
0328:  RRF    44,F
0329:  RRF    43,F
032A:  INCF   77,F
032B:  BTFSC  03.2
032C:  GOTO   3F9
032D:  GOTO   339
032E:  BTFSC  46.7
032F:  GOTO   33C
0330:  BCF    03.0
0331:  RLF    43,F
0332:  RLF    44,F
0333:  RLF    45,F
0334:  RLF    46,F
0335:  DECF   77,F
0336:  BTFSC  03.2
0337:  GOTO   3F9
0338:  GOTO   32E
0339:  BSF    42.6
033A:  GOTO   3A6
033B:  BCF    42.6
033C:  MOVF   39,W
033D:  MOVWF  41
033E:  BTFSS  41.7
033F:  GOTO   342
0340:  BSF    46.7
0341:  GOTO   3F2
0342:  BCF    46.7
0343:  GOTO   3F2
0344:  MOVF   3C,W
0345:  MOVWF  40
0346:  MOVWF  77
0347:  MOVF   38,W
0348:  SUBWF  40,F
0349:  MOVF   39,W
034A:  MOVWF  46
034B:  BSF    46.7
034C:  MOVF   3A,W
034D:  MOVWF  45
034E:  MOVF   3B,W
034F:  MOVWF  44
0350:  CLRF   43
0351:  BCF    03.0
0352:  RRF    46,F
0353:  RRF    45,F
0354:  RRF    44,F
0355:  RRF    43,F
0356:  DECFSZ 40,F
0357:  GOTO   350
0358:  BTFSS  41.7
0359:  GOTO   35D
035A:  BSF    42.1
035B:  GOTO   3FE
035C:  BCF    42.1
035D:  BCF    40.0
035E:  BSF    42.5
035F:  MOVLW  BF
0360:  MOVWF  04
0361:  BCF    03.7
0362:  GOTO   413
0363:  BCF    42.5
0364:  BTFSC  41.7
0365:  GOTO   370
0366:  BTFSS  40.0
0367:  GOTO   37B
0368:  RRF    46,F
0369:  RRF    45,F
036A:  RRF    44,F
036B:  RRF    43,F
036C:  INCF   77,F
036D:  BTFSC  03.2
036E:  GOTO   3F9
036F:  GOTO   37B
0370:  BTFSC  46.7
0371:  GOTO   37E
0372:  BCF    03.0
0373:  RLF    43,F
0374:  RLF    44,F
0375:  RLF    45,F
0376:  RLF    46,F
0377:  DECF   77,F
0378:  BTFSC  03.2
0379:  GOTO   3F9
037A:  GOTO   370
037B:  BSF    42.7
037C:  GOTO   3A6
037D:  BCF    42.7
037E:  MOVF   3D,W
037F:  MOVWF  41
0380:  BTFSS  41.7
0381:  GOTO   384
0382:  BSF    46.7
0383:  GOTO   3F2
0384:  BCF    46.7
0385:  GOTO   3F2
0386:  MOVF   3D,W
0387:  MOVWF  46
0388:  BSF    46.7
0389:  MOVF   3E,W
038A:  MOVWF  45
038B:  MOVF   3F,W
038C:  MOVWF  44
038D:  BTFSS  41.7
038E:  GOTO   393
038F:  BCF    46.7
0390:  BSF    42.2
0391:  GOTO   3FE
0392:  BCF    42.2
0393:  CLRF   43
0394:  BCF    40.0
0395:  MOVLW  BB
0396:  MOVWF  04
0397:  BCF    03.7
0398:  GOTO   413
0399:  BTFSC  41.7
039A:  GOTO   3BC
039B:  MOVF   39,W
039C:  MOVWF  41
039D:  BTFSS  40.0
039E:  GOTO   3A6
039F:  RRF    46,F
03A0:  RRF    45,F
03A1:  RRF    44,F
03A2:  RRF    43,F
03A3:  INCF   77,F
03A4:  BTFSC  03.2
03A5:  GOTO   3F9
03A6:  BTFSS  43.7
03A7:  GOTO   3B7
03A8:  INCF   44,F
03A9:  BTFSS  03.2
03AA:  GOTO   3B7
03AB:  INCF   45,F
03AC:  BTFSS  03.2
03AD:  GOTO   3B7
03AE:  INCF   46,F
03AF:  BTFSS  03.2
03B0:  GOTO   3B7
03B1:  RRF    46,F
03B2:  RRF    45,F
03B3:  RRF    44,F
03B4:  INCF   77,F
03B5:  BTFSC  03.2
03B6:  GOTO   3F9
03B7:  BTFSC  42.6
03B8:  GOTO   33B
03B9:  BTFSC  42.7
03BA:  GOTO   37D
03BB:  GOTO   3DB
03BC:  MOVLW  80
03BD:  XORWF  46,F
03BE:  BTFSS  46.7
03BF:  GOTO   3C4
03C0:  GOTO   3FE
03C1:  MOVF   3D,W
03C2:  MOVWF  41
03C3:  GOTO   3D1
03C4:  MOVF   39,W
03C5:  MOVWF  41
03C6:  MOVF   46,F
03C7:  BTFSS  03.2
03C8:  GOTO   3D1
03C9:  MOVF   45,F
03CA:  BTFSS  03.2
03CB:  GOTO   3D1
03CC:  MOVF   44,F
03CD:  BTFSS  03.2
03CE:  GOTO   3D1
03CF:  CLRF   77
03D0:  GOTO   3F2
03D1:  BTFSC  46.7
03D2:  GOTO   3DB
03D3:  BCF    03.0
03D4:  RLF    43,F
03D5:  RLF    44,F
03D6:  RLF    45,F
03D7:  RLF    46,F
03D8:  DECFSZ 77,F
03D9:  GOTO   3D1
03DA:  GOTO   3F9
03DB:  BTFSS  41.7
03DC:  GOTO   3DF
03DD:  BSF    46.7
03DE:  GOTO   3F2
03DF:  BCF    46.7
03E0:  GOTO   3F2
03E1:  MOVF   3C,W
03E2:  MOVWF  77
03E3:  MOVF   3D,W
03E4:  MOVWF  46
03E5:  MOVF   3E,W
03E6:  MOVWF  45
03E7:  MOVF   3F,W
03E8:  MOVWF  44
03E9:  GOTO   3F2
03EA:  MOVF   38,W
03EB:  MOVWF  77
03EC:  MOVF   39,W
03ED:  MOVWF  46
03EE:  MOVF   3A,W
03EF:  MOVWF  45
03F0:  MOVF   3B,W
03F1:  MOVWF  44
03F2:  MOVF   46,W
03F3:  MOVWF  78
03F4:  MOVF   45,W
03F5:  MOVWF  79
03F6:  MOVF   44,W
03F7:  MOVWF  7A
03F8:  GOTO   431
03F9:  CLRF   77
03FA:  CLRF   78
03FB:  CLRF   79
03FC:  CLRF   7A
03FD:  GOTO   431
03FE:  CLRF   43
03FF:  COMF   44,F
0400:  COMF   45,F
0401:  COMF   46,F
0402:  COMF   43,F
0403:  INCF   43,F
0404:  BTFSS  03.2
0405:  GOTO   40C
0406:  INCF   44,F
0407:  BTFSS  03.2
0408:  GOTO   40C
0409:  INCF   45,F
040A:  BTFSC  03.2
040B:  INCF   46,F
040C:  BTFSC  42.0
040D:  GOTO   31A
040E:  BTFSC  42.1
040F:  GOTO   35C
0410:  BTFSC  42.2
0411:  GOTO   392
0412:  GOTO   3C1
0413:  MOVF   00,W
0414:  ADDWF  44,F
0415:  BTFSS  03.0
0416:  GOTO   41D
0417:  INCF   45,F
0418:  BTFSS  03.2
0419:  GOTO   41D
041A:  INCF   46,F
041B:  BTFSC  03.2
041C:  BSF    40.0
041D:  DECF   04,F
041E:  MOVF   00,W
041F:  ADDWF  45,F
0420:  BTFSS  03.0
0421:  GOTO   425
0422:  INCF   46,F
0423:  BTFSC  03.2
0424:  BSF    40.0
0425:  DECF   04,F
0426:  MOVF   00,W
0427:  BTFSS  00.7
0428:  XORLW  80
0429:  ADDWF  46,F
042A:  BTFSC  03.0
042B:  BSF    40.0
042C:  BTFSC  42.4
042D:  GOTO   321
042E:  BTFSC  42.5
042F:  GOTO   363
0430:  GOTO   399
0431:  BCF    03.5
0432:  RETURN
*
049C:  MOVLW  8E
049D:  MOVWF  77
049E:  MOVF   34,W
049F:  SUBWF  77,F
04A0:  MOVF   35,W
04A1:  MOVWF  79
04A2:  MOVF   36,W
04A3:  MOVWF  78
04A4:  BSF    79.7
04A5:  MOVF   77,F
04A6:  BTFSC  03.2
04A7:  GOTO   4B3
04A8:  BCF    03.0
04A9:  MOVF   79,F
04AA:  BTFSS  03.2
04AB:  GOTO   4AF
04AC:  MOVF   78,F
04AD:  BTFSC  03.2
04AE:  GOTO   4B3
04AF:  RRF    79,F
04B0:  RRF    78,F
04B1:  DECFSZ 77,F
04B2:  GOTO   4A8
04B3:  BTFSS  35.7
04B4:  GOTO   4BA
04B5:  COMF   78,F
04B6:  COMF   79,F
04B7:  INCF   78,F
04B8:  BTFSC  03.2
04B9:  INCF   79,F
*
06D9:  MOVF   0B,W
06DA:  MOVWF  4E
06DB:  BCF    0B.7
06DC:  BSF    03.5
06DD:  BSF    03.6
06DE:  BSF    0C.7
06DF:  BSF    0C.0
06E0:  NOP
06E1:  NOP
06E2:  BCF    03.5
06E3:  BCF    03.6
06E4:  BTFSC  4E.7
06E5:  BSF    0B.7
06E6:  BTFSC  03.0
06E7:  GOTO   711
06E8:  BSF    03.6
06E9:  MOVF   0C,W
06EA:  ANDLW  7F
06EB:  BCF    03.6
06EC:  MOVWF  4E
06ED:  BSF    03.6
06EE:  MOVF   0D,W
06EF:  BCF    03.6
06F0:  MOVWF  4F
06F1:  BSF    03.6
06F2:  MOVF   0F,W
06F3:  BCF    03.6
06F4:  MOVWF  50
06F5:  MOVF   4E,W
06F6:  BTFSS  0C.4
06F7:  GOTO   6F6
06F8:  MOVWF  19
06F9:  MOVF   4F,W
06FA:  BSF    03.6
06FB:  MOVWF  0D
06FC:  BCF    03.6
06FD:  MOVF   50,W
06FE:  BSF    03.6
06FF:  MOVWF  0F
0700:  BCF    03.6
0701:  MOVF   0B,W
0702:  MOVWF  51
0703:  BCF    0B.7
0704:  BSF    03.5
0705:  BSF    03.6
0706:  BSF    0C.7
0707:  BSF    0C.0
0708:  NOP
0709:  NOP
070A:  BCF    03.5
070B:  BCF    03.6
070C:  BTFSC  51.7
070D:  BSF    0B.7
070E:  DECFSZ 4D,F
070F:  GOTO   711
0710:  GOTO   731
0711:  BSF    03.6
0712:  RLF    0C,W
0713:  RLF    0E,W
0714:  ANDLW  7F
0715:  BCF    03.6
0716:  MOVWF  4E
0717:  BSF    03.6
0718:  MOVF   0D,W
0719:  BCF    03.6
071A:  MOVWF  4F
071B:  BSF    03.6
071C:  MOVF   0F,W
071D:  BCF    03.6
071E:  MOVWF  50
071F:  MOVF   4E,W
0720:  BTFSS  0C.4
0721:  GOTO   720
0722:  MOVWF  19
0723:  MOVF   4F,W
0724:  BSF    03.6
0725:  MOVWF  0D
0726:  BCF    03.6
0727:  MOVF   50,W
0728:  BSF    03.6
0729:  MOVWF  0F
072A:  INCF   0D,F
072B:  BTFSC  03.2
072C:  INCF   0F,F
072D:  BCF    03.0
072E:  BCF    03.6
072F:  DECFSZ 4D,F
0730:  GOTO   6D9
0731:  RETURN
0732:  CLRF   55
0733:  MOVF   04,W
0734:  MOVWF  54
0735:  BCF    55.0
0736:  BTFSC  03.7
0737:  BSF    55.0
0738:  SWAPF  4E,W
0739:  IORLW  F0
073A:  MOVWF  50
073B:  ADDWF  50,F
073C:  ADDLW  E2
073D:  MOVWF  51
073E:  ADDLW  32
073F:  MOVWF  53
0740:  MOVF   4E,W
0741:  ANDLW  0F
0742:  ADDWF  51,F
0743:  ADDWF  51,F
0744:  ADDWF  53,F
0745:  ADDLW  E9
0746:  MOVWF  52
0747:  ADDWF  52,F
0748:  ADDWF  52,F
0749:  SWAPF  4D,W
074A:  ANDLW  0F
074B:  ADDWF  52,F
074C:  ADDWF  53,F
074D:  RLF    52,F
074E:  RLF    53,F
074F:  COMF   53,F
0750:  RLF    53,F
0751:  MOVF   4D,W
0752:  ANDLW  0F
0753:  ADDWF  53,F
0754:  RLF    50,F
0755:  MOVLW  07
0756:  MOVWF  4F
0757:  MOVLW  0A
0758:  ADDWF  53,F
0759:  DECF   52,F
075A:  BTFSS  03.0
075B:  GOTO   758
075C:  ADDWF  52,F
075D:  DECF   51,F
075E:  BTFSS  03.0
075F:  GOTO   75C
0760:  ADDWF  51,F
0761:  DECF   50,F
0762:  BTFSS  03.0
0763:  GOTO   760
0764:  ADDWF  50,F
0765:  DECF   4F,F
0766:  BTFSS  03.0
0767:  GOTO   764
0768:  MOVLW  4F
0769:  MOVWF  04
076A:  BCF    03.7
076B:  MOVLW  07
076C:  ANDWF  54,W
076D:  BCF    54.6
076E:  ADDWF  04,F
076F:  MOVLW  53
0770:  SUBWF  04,W
0771:  BTFSC  03.2
0772:  BSF    54.6
0773:  MOVF   00,W
0774:  MOVWF  77
0775:  BTFSS  03.2
0776:  GOTO   77F
0777:  BTFSC  54.6
0778:  GOTO   77F
0779:  BTFSC  54.4
077A:  GOTO   787
077B:  BTFSC  54.3
077C:  GOTO   77F
077D:  MOVLW  20
077E:  GOTO   782
077F:  BSF    54.3
0780:  BCF    54.4
0781:  MOVLW  30
0782:  ADDWF  77,F
0783:  MOVF   77,W
0784:  BTFSS  0C.4
0785:  GOTO   784
0786:  MOVWF  19
0787:  INCF   04,F
0788:  BTFSS  54.6
0789:  GOTO   76F
078A:  BSF    0A.3
078B:  BCF    0A.4
078C:  GOTO   3CA (RETURN)
078D:  MOVF   5E,W
078E:  SUBLW  B6
078F:  MOVWF  5E
0790:  CLRF   7A
0791:  MOVF   5F,W
0792:  MOVWF  62
0793:  BSF    5F.7
0794:  BCF    03.0
0795:  RRF    5F,F
0796:  RRF    60,F
0797:  RRF    61,F
0798:  RRF    7A,F
0799:  RRF    79,F
079A:  RRF    78,F
079B:  RRF    77,F
079C:  DECFSZ 5E,F
079D:  GOTO   794
079E:  BTFSS  62.7
079F:  GOTO   7AB
07A0:  COMF   77,F
07A1:  COMF   78,F
07A2:  COMF   79,F
07A3:  COMF   7A,F
07A4:  INCF   77,F
07A5:  BTFSC  03.2
07A6:  INCF   78,F
07A7:  BTFSC  03.2
07A8:  INCF   79,F
07A9:  BTFSC  03.2
07AA:  INCF   7A,F
07AB:  RETURN
07AC:  BTFSC  03.1
07AD:  GOTO   7B1
07AE:  MOVLW  66
07AF:  MOVWF  04
07B0:  BCF    03.7
07B1:  CLRF   77
07B2:  CLRF   78
07B3:  CLRF   79
07B4:  CLRF   7A
07B5:  CLRF   66
07B6:  CLRF   67
07B7:  CLRF   68
07B8:  CLRF   69
07B9:  MOVF   65,W
07BA:  IORWF  64,W
07BB:  IORWF  63,W
07BC:  IORWF  62,W
07BD:  BTFSC  03.2
07BE:  GOTO   7EF
07BF:  MOVLW  20
07C0:  MOVWF  6A
07C1:  BCF    03.0
07C2:  RLF    5E,F
07C3:  RLF    5F,F
07C4:  RLF    60,F
07C5:  RLF    61,F
07C6:  RLF    66,F
07C7:  RLF    67,F
07C8:  RLF    68,F
07C9:  RLF    69,F
07CA:  MOVF   65,W
07CB:  SUBWF  69,W
07CC:  BTFSS  03.2
07CD:  GOTO   7D8
07CE:  MOVF   64,W
07CF:  SUBWF  68,W
07D0:  BTFSS  03.2
07D1:  GOTO   7D8
07D2:  MOVF   63,W
07D3:  SUBWF  67,W
07D4:  BTFSS  03.2
07D5:  GOTO   7D8
07D6:  MOVF   62,W
07D7:  SUBWF  66,W
07D8:  BTFSS  03.0
07D9:  GOTO   7E9
07DA:  MOVF   62,W
07DB:  SUBWF  66,F
07DC:  MOVF   63,W
07DD:  BTFSS  03.0
07DE:  INCFSZ 63,W
07DF:  SUBWF  67,F
07E0:  MOVF   64,W
07E1:  BTFSS  03.0
07E2:  INCFSZ 64,W
07E3:  SUBWF  68,F
07E4:  MOVF   65,W
07E5:  BTFSS  03.0
07E6:  INCFSZ 65,W
07E7:  SUBWF  69,F
07E8:  BSF    03.0
07E9:  RLF    77,F
07EA:  RLF    78,F
07EB:  RLF    79,F
07EC:  RLF    7A,F
07ED:  DECFSZ 6A,F
07EE:  GOTO   7C1
07EF:  MOVF   66,W
07F0:  MOVWF  00
07F1:  INCF   04,F
07F2:  MOVF   67,W
07F3:  MOVWF  00
07F4:  INCF   04,F
07F5:  MOVF   68,W
07F6:  MOVWF  00
07F7:  INCF   04,F
07F8:  MOVF   69,W
07F9:  MOVWF  00
07FA:  RETURN
*
0800:  MOVF   04,W
0801:  MOVWF  52
0802:  MOVF   51,W
0803:  MOVWF  54
0804:  BTFSC  03.2
0805:  GOTO   029
0806:  MOVF   50,W
0807:  BSF    03.5
0808:  MOVWF  3B
0809:  BCF    03.5
080A:  MOVF   4F,W
080B:  BSF    03.5
080C:  MOVWF  3A
080D:  BCF    03.5
080E:  MOVF   4E,W
080F:  BSF    03.5
0810:  MOVWF  39
0811:  BCF    03.5
0812:  MOVF   4D,W
0813:  BSF    03.5
0814:  MOVWF  38
0815:  CLRF   3F
0816:  CLRF   3E
0817:  MOVLW  20
0818:  MOVWF  3D
0819:  MOVLW  82
081A:  MOVWF  3C
081B:  BCF    0A.3
081C:  BCF    03.5
081D:  CALL   049
081E:  BSF    0A.3
081F:  MOVF   7A,W
0820:  MOVWF  50
0821:  MOVF   79,W
0822:  MOVWF  4F
0823:  MOVF   78,W
0824:  MOVWF  4E
0825:  MOVF   77,W
0826:  MOVWF  4D
0827:  DECFSZ 54,F
0828:  GOTO   006
0829:  MOVF   50,W
082A:  MOVWF  61
082B:  MOVF   4F,W
082C:  MOVWF  60
082D:  MOVF   4E,W
082E:  MOVWF  5F
082F:  MOVF   4D,W
0830:  MOVWF  5E
0831:  BCF    0A.3
0832:  CALL   78D
0833:  BSF    0A.3
0834:  MOVF   7A,W
0835:  MOVWF  50
0836:  MOVF   79,W
0837:  MOVWF  4F
0838:  MOVF   78,W
0839:  MOVWF  4E
083A:  MOVF   77,W
083B:  MOVWF  4D
083C:  BTFSS  50.7
083D:  GOTO   04B
083E:  DECF   52,F
083F:  BSF    52.5
0840:  COMF   4D,F
0841:  COMF   4E,F
0842:  COMF   4F,F
0843:  COMF   50,F
0844:  INCF   4D,F
0845:  BTFSC  03.2
0846:  INCF   4E,F
0847:  BTFSC  03.2
0848:  INCF   4F,F
0849:  BTFSC  03.2
084A:  INCF   50,F
084B:  MOVLW  3B
084C:  MOVWF  59
084D:  MOVLW  9A
084E:  MOVWF  58
084F:  MOVLW  CA
0850:  MOVWF  57
0851:  CLRF   56
0852:  MOVLW  0A
0853:  MOVWF  54
0854:  MOVF   51,W
0855:  BTFSC  03.2
0856:  INCF   52,F
0857:  BSF    03.1
0858:  MOVLW  4D
0859:  MOVWF  04
085A:  BCF    03.7
085B:  MOVF   50,W
085C:  MOVWF  61
085D:  MOVF   4F,W
085E:  MOVWF  60
085F:  MOVF   4E,W
0860:  MOVWF  5F
0861:  MOVF   4D,W
0862:  MOVWF  5E
0863:  MOVF   59,W
0864:  MOVWF  65
0865:  MOVF   58,W
0866:  MOVWF  64
0867:  MOVF   57,W
0868:  MOVWF  63
0869:  MOVF   56,W
086A:  MOVWF  62
086B:  BCF    0A.3
086C:  CALL   7AC
086D:  BSF    0A.3
086E:  MOVF   78,W
086F:  MOVF   77,F
0870:  BTFSS  03.2
0871:  GOTO   085
0872:  INCF   51,W
0873:  SUBWF  54,W
0874:  BTFSC  03.2
0875:  GOTO   085
0876:  MOVF   52,W
0877:  BTFSC  03.2
0878:  GOTO   087
0879:  ANDLW  0F
087A:  SUBWF  54,W
087B:  BTFSC  03.2
087C:  GOTO   07F
087D:  BTFSC  03.0
087E:  GOTO   0BB
087F:  BTFSC  52.7
0880:  GOTO   0BB
0881:  BTFSC  52.6
0882:  GOTO   087
0883:  MOVLW  20
0884:  GOTO   0B6
0885:  MOVLW  20
0886:  ANDWF  52,F
0887:  BTFSS  52.5
0888:  GOTO   096
0889:  BCF    52.5
088A:  MOVF   51,W
088B:  BTFSS  03.2
088C:  DECF   52,F
088D:  MOVF   77,W
088E:  MOVWF  52
088F:  MOVLW  2D
0890:  BTFSS  0C.4
0891:  GOTO   090
0892:  MOVWF  19
0893:  MOVF   52,W
0894:  MOVWF  77
0895:  CLRF   52
0896:  MOVF   51,W
0897:  SUBWF  54,W
0898:  BTFSS  03.2
0899:  GOTO   0A5
089A:  MOVF   77,W
089B:  MOVWF  52
089C:  MOVLW  2E
089D:  BTFSS  0C.4
089E:  GOTO   09D
089F:  MOVWF  19
08A0:  MOVF   52,W
08A1:  MOVWF  77
08A2:  MOVLW  20
08A3:  ANDWF  52,F
08A4:  MOVLW  00
08A5:  MOVLW  30
08A6:  BTFSS  52.5
08A7:  GOTO   0B6
08A8:  BCF    52.5
08A9:  MOVF   51,W
08AA:  BTFSS  03.2
08AB:  DECF   52,F
08AC:  MOVF   77,W
08AD:  MOVWF  52
08AE:  MOVLW  2D
08AF:  BTFSS  0C.4
08B0:  GOTO   0AF
08B1:  MOVWF  19
08B2:  MOVF   52,W
08B3:  MOVWF  77
08B4:  CLRF   52
08B5:  MOVLW  30
08B6:  ADDWF  77,F
08B7:  MOVF   77,W
08B8:  BTFSS  0C.4
08B9:  GOTO   0B8
08BA:  MOVWF  19
08BB:  BCF    03.1
08BC:  MOVF   59,W
08BD:  MOVWF  61
08BE:  MOVF   58,W
08BF:  MOVWF  60
08C0:  MOVF   57,W
08C1:  MOVWF  5F
08C2:  MOVF   56,W
08C3:  MOVWF  5E
08C4:  CLRF   65
08C5:  CLRF   64
08C6:  CLRF   63
08C7:  MOVLW  0A
08C8:  MOVWF  62
08C9:  BCF    0A.3
08CA:  CALL   7AC
08CB:  BSF    0A.3
08CC:  MOVF   7A,W
08CD:  MOVWF  59
08CE:  MOVF   79,W
08CF:  MOVWF  58
08D0:  MOVF   78,W
08D1:  MOVWF  57
08D2:  MOVF   77,W
08D3:  MOVWF  56
08D4:  DECFSZ 54,F
08D5:  GOTO   057
08D6:  RETURN
08D7:  MOVF   33,W
08D8:  MOVWF  04
08D9:  BCF    03.7
08DA:  BTFSC  34.0
08DB:  BSF    03.7
08DC:  MOVF   5E,W
08DD:  MOVWF  00
08DE:  INCF   04,F
08DF:  CLRF   00
08E0:  INCF   33,F
08E1:  BTFSC  03.2
08E2:  INCF   34,F
08E3:  RETURN
08E4:  MOVF   0B,W
08E5:  MOVWF  4D
08E6:  BCF    0B.7
08E7:  BSF    03.5
08E8:  BSF    03.6
08E9:  BSF    0C.7
08EA:  BSF    0C.0
08EB:  NOP
08EC:  NOP
08ED:  BCF    03.5
08EE:  BCF    03.6
08EF:  BTFSC  4D.7
08F0:  BSF    0B.7
08F1:  BSF    03.6
08F2:  MOVF   0C,W
08F3:  ANDLW  7F
08F4:  BTFSC  03.2
08F5:  GOTO   138
08F6:  BCF    03.6
08F7:  MOVWF  4D
08F8:  BSF    03.6
08F9:  MOVF   0D,W
08FA:  BCF    03.6
08FB:  MOVWF  4E
08FC:  BSF    03.6
08FD:  MOVF   0F,W
08FE:  BCF    03.6
08FF:  MOVWF  4F
0900:  MOVF   4D,W
0901:  MOVWF  5E
0902:  CALL   0D7
0903:  MOVF   4E,W
0904:  BSF    03.6
0905:  MOVWF  0D
0906:  BCF    03.6
0907:  MOVF   4F,W
0908:  BSF    03.6
0909:  MOVWF  0F
090A:  BCF    03.6
090B:  MOVF   0B,W
090C:  MOVWF  50
090D:  BCF    0B.7
090E:  BSF    03.5
090F:  BSF    03.6
0910:  BSF    0C.7
0911:  BSF    0C.0
0912:  NOP
0913:  NOP
0914:  BCF    03.5
0915:  BCF    03.6
0916:  BTFSC  50.7
0917:  BSF    0B.7
0918:  BSF    03.6
0919:  RLF    0C,W
091A:  RLF    0E,W
091B:  ANDLW  7F
091C:  BTFSC  03.2
091D:  GOTO   138
091E:  BCF    03.6
091F:  MOVWF  4D
0920:  BSF    03.6
0921:  MOVF   0D,W
0922:  BCF    03.6
0923:  MOVWF  4E
0924:  BSF    03.6
0925:  MOVF   0F,W
0926:  BCF    03.6
0927:  MOVWF  4F
0928:  MOVF   4D,W
0929:  MOVWF  5E
092A:  CALL   0D7
092B:  MOVF   4E,W
092C:  BSF    03.6
092D:  MOVWF  0D
092E:  BCF    03.6
092F:  MOVF   4F,W
0930:  BSF    03.6
0931:  MOVWF  0F
0932:  INCF   0D,F
0933:  BTFSC  03.2
0934:  INCF   0F,F
0935:  BCF    03.6
0936:  GOTO   0E4
0937:  BSF    03.6
0938:  BCF    03.6
0939:  RETURN
093A:  MOVF   04,W
093B:  MOVWF  56
093C:  MOVF   55,W
093D:  MOVWF  58
093E:  BTFSC  03.2
093F:  GOTO   163
0940:  MOVF   54,W
0941:  BSF    03.5
0942:  MOVWF  3B
0943:  BCF    03.5
0944:  MOVF   53,W
0945:  BSF    03.5
0946:  MOVWF  3A
0947:  BCF    03.5
0948:  MOVF   52,W
0949:  BSF    03.5
094A:  MOVWF  39
094B:  BCF    03.5
094C:  MOVF   51,W
094D:  BSF    03.5
094E:  MOVWF  38
094F:  CLRF   3F
0950:  CLRF   3E
0951:  MOVLW  20
0952:  MOVWF  3D
0953:  MOVLW  82
0954:  MOVWF  3C
0955:  BCF    0A.3
0956:  BCF    03.5
0957:  CALL   049
0958:  BSF    0A.3
0959:  MOVF   7A,W
095A:  MOVWF  54
095B:  MOVF   79,W
095C:  MOVWF  53
095D:  MOVF   78,W
095E:  MOVWF  52
095F:  MOVF   77,W
0960:  MOVWF  51
0961:  DECFSZ 58,F
0962:  GOTO   140
0963:  MOVF   54,W
0964:  MOVWF  61
0965:  MOVF   53,W
0966:  MOVWF  60
0967:  MOVF   52,W
0968:  MOVWF  5F
0969:  MOVF   51,W
096A:  MOVWF  5E
096B:  BCF    0A.3
096C:  CALL   78D
096D:  BSF    0A.3
096E:  MOVF   7A,W
096F:  MOVWF  54
0970:  MOVF   79,W
0971:  MOVWF  53
0972:  MOVF   78,W
0973:  MOVWF  52
0974:  MOVF   77,W
0975:  MOVWF  51
0976:  BTFSS  54.7
0977:  GOTO   185
0978:  DECF   56,F
0979:  BSF    56.5
097A:  COMF   51,F
097B:  COMF   52,F
097C:  COMF   53,F
097D:  COMF   54,F
097E:  INCF   51,F
097F:  BTFSC  03.2
0980:  INCF   52,F
0981:  BTFSC  03.2
0982:  INCF   53,F
0983:  BTFSC  03.2
0984:  INCF   54,F
0985:  MOVLW  3B
0986:  MOVWF  5D
0987:  MOVLW  9A
0988:  MOVWF  5C
0989:  MOVLW  CA
098A:  MOVWF  5B
098B:  CLRF   5A
098C:  MOVLW  0A
098D:  MOVWF  58
098E:  MOVF   55,W
098F:  BTFSC  03.2
0990:  INCF   56,F
0991:  BSF    03.1
0992:  MOVLW  51
0993:  MOVWF  04
0994:  BCF    03.7
0995:  MOVF   54,W
0996:  MOVWF  61
0997:  MOVF   53,W
0998:  MOVWF  60
0999:  MOVF   52,W
099A:  MOVWF  5F
099B:  MOVF   51,W
099C:  MOVWF  5E
099D:  MOVF   5D,W
099E:  MOVWF  65
099F:  MOVF   5C,W
09A0:  MOVWF  64
09A1:  MOVF   5B,W
09A2:  MOVWF  63
09A3:  MOVF   5A,W
09A4:  MOVWF  62
09A5:  BCF    0A.3
09A6:  CALL   7AC
09A7:  BSF    0A.3
09A8:  MOVF   78,W
09A9:  MOVF   77,F
09AA:  BTFSS  03.2
09AB:  GOTO   1BF
09AC:  INCF   55,W
09AD:  SUBWF  58,W
09AE:  BTFSC  03.2
09AF:  GOTO   1BF
09B0:  MOVF   56,W
09B1:  BTFSC  03.2
09B2:  GOTO   1C1
09B3:  ANDLW  0F
09B4:  SUBWF  58,W
09B5:  BTFSC  03.2
09B6:  GOTO   1B9
09B7:  BTFSC  03.0
09B8:  GOTO   1F1
09B9:  BTFSC  56.7
09BA:  GOTO   1F1
09BB:  BTFSC  56.6
09BC:  GOTO   1C1
09BD:  MOVLW  20
09BE:  GOTO   1ED
09BF:  MOVLW  20
09C0:  ANDWF  56,F
09C1:  BTFSS  56.5
09C2:  GOTO   1CF
09C3:  BCF    56.5
09C4:  MOVF   55,W
09C5:  BTFSS  03.2
09C6:  DECF   56,F
09C7:  MOVF   77,W
09C8:  MOVWF  56
09C9:  MOVLW  2D
09CA:  MOVWF  5E
09CB:  CALL   0D7
09CC:  MOVF   56,W
09CD:  MOVWF  77
09CE:  CLRF   56
09CF:  MOVF   55,W
09D0:  SUBWF  58,W
09D1:  BTFSS  03.2
09D2:  GOTO   1DD
09D3:  MOVF   77,W
09D4:  MOVWF  56
09D5:  MOVLW  2E
09D6:  MOVWF  5E
09D7:  CALL   0D7
09D8:  MOVF   56,W
09D9:  MOVWF  77
09DA:  MOVLW  20
09DB:  ANDWF  56,F
09DC:  MOVLW  00
09DD:  MOVLW  30
09DE:  BTFSS  56.5
09DF:  GOTO   1ED
09E0:  BCF    56.5
09E1:  MOVF   55,W
09E2:  BTFSS  03.2
09E3:  DECF   56,F
09E4:  MOVF   77,W
09E5:  MOVWF  56
09E6:  MOVLW  2D
09E7:  MOVWF  5E
09E8:  CALL   0D7
09E9:  MOVF   56,W
09EA:  MOVWF  77
09EB:  CLRF   56
09EC:  MOVLW  30
09ED:  ADDWF  77,F
09EE:  MOVF   77,W
09EF:  MOVWF  5E
09F0:  CALL   0D7
09F1:  BCF    03.1
09F2:  MOVF   5D,W
09F3:  MOVWF  61
09F4:  MOVF   5C,W
09F5:  MOVWF  60
09F6:  MOVF   5B,W
09F7:  MOVWF  5F
09F8:  MOVF   5A,W
09F9:  MOVWF  5E
09FA:  CLRF   65
09FB:  CLRF   64
09FC:  CLRF   63
09FD:  MOVLW  0A
09FE:  MOVWF  62
09FF:  BCF    0A.3
0A00:  CALL   7AC
0A01:  BSF    0A.3
0A02:  MOVF   7A,W
0A03:  MOVWF  5D
0A04:  MOVF   79,W
0A05:  MOVWF  5C
0A06:  MOVF   78,W
0A07:  MOVWF  5B
0A08:  MOVF   77,W
0A09:  MOVWF  5A
0A0A:  DECFSZ 58,F
0A0B:  GOTO   191
0A0C:  RETURN
....................  
.................... #list 
....................  
.................... #include "MPU6050\MPU6050.h" 
.................... #define MPU6050_ADDRESS   0xD0 
.................... #define MPU6050_RA_XG_OFFS_TC       0x00  
.................... #define MPU6050_RA_YG_OFFS_TC       0x01  
.................... #define MPU6050_RA_ZG_OFFS_TC       0x02  
.................... #define MPU6050_RA_X_FINE_GAIN      0x03  
.................... #define MPU6050_RA_Y_FINE_GAIN      0x04  
.................... #define MPU6050_RA_Z_FINE_GAIN      0x05  
.................... #define MPU6050_RA_XA_OFFS_H        0x06  
.................... #define MPU6050_RA_XA_OFFS_L_TC     0x07 
.................... #define MPU6050_RA_YA_OFFS_H        0x08  
.................... #define MPU6050_RA_YA_OFFS_L_TC     0x09 
.................... #define MPU6050_RA_ZA_OFFS_H        0x0A  
.................... #define MPU6050_RA_ZA_OFFS_L_TC     0x0B 
.................... #define MPU6050_RA_XG_OFFS_USRH     0x13  
.................... #define MPU6050_RA_XG_OFFS_USRL     0x14 
.................... #define MPU6050_RA_YG_OFFS_USRH     0x15  
.................... #define MPU6050_RA_YG_OFFS_USRL     0x16 
.................... #define MPU6050_RA_ZG_OFFS_USRH     0x17  
.................... #define MPU6050_RA_ZG_OFFS_USRL     0x18 
.................... #define MPU6050_RA_SMPLRT_DIV       0x19 
.................... #define MPU6050_RA_CONFIG           0x1A 
.................... #define MPU6050_RA_GYRO_CONFIG      0x1B 
.................... #define MPU6050_RA_ACCEL_CONFIG     0x1C 
.................... #define MPU6050_RA_FF_THR           0x1D 
.................... #define MPU6050_RA_FF_DUR           0x1E 
.................... #define MPU6050_RA_MOT_THR          0x1F 
.................... #define MPU6050_RA_MOT_DUR          0x20 
.................... #define MPU6050_RA_ZRMOT_THR        0x21 
.................... #define MPU6050_RA_ZRMOT_DUR        0x22 
.................... #define MPU6050_RA_FIFO_EN          0x23 
.................... #define MPU6050_RA_I2C_MST_CTRL     0x24 
.................... #define MPU6050_RA_I2C_SLV0_ADDR    0x25 
.................... #define MPU6050_RA_I2C_SLV0_REG     0x26 
.................... #define MPU6050_RA_I2C_SLV0_CTRL    0x27 
.................... #define MPU6050_RA_I2C_SLV1_ADDR    0x28 
.................... #define MPU6050_RA_I2C_SLV1_REG     0x29 
.................... #define MPU6050_RA_I2C_SLV1_CTRL    0x2A 
.................... #define MPU6050_RA_I2C_SLV2_ADDR    0x2B 
.................... #define MPU6050_RA_I2C_SLV2_REG     0x2C 
.................... #define MPU6050_RA_I2C_SLV2_CTRL    0x2D 
.................... #define MPU6050_RA_I2C_SLV3_ADDR    0x2E 
.................... #define MPU6050_RA_I2C_SLV3_REG     0x2F 
.................... #define MPU6050_RA_I2C_SLV3_CTRL    0x30 
.................... #define MPU6050_RA_I2C_SLV4_ADDR    0x31 
.................... #define MPU6050_RA_I2C_SLV4_REG     0x32 
.................... #define MPU6050_RA_I2C_SLV4_DO      0x33 
.................... #define MPU6050_RA_I2C_SLV4_CTRL    0x34 
.................... #define MPU6050_RA_I2C_SLV4_DI      0x35 
.................... #define MPU6050_RA_I2C_MST_STATUS   0x36 
.................... #define MPU6050_RA_INT_PIN_CFG      0x37 
.................... #define MPU6050_RA_INT_ENABLE       0x38 
.................... #define MPU6050_RA_DMP_INT_STATUS   0x39 
.................... #define MPU6050_RA_INT_STATUS       0x3A 
.................... #define MPU6050_RA_ACCEL_XOUT_H     0x3B 
.................... #define MPU6050_RA_ACCEL_XOUT_L     0x3C 
.................... #define MPU6050_RA_ACCEL_YOUT_H     0x3D 
.................... #define MPU6050_RA_ACCEL_YOUT_L     0x3E 
.................... #define MPU6050_RA_ACCEL_ZOUT_H     0x3F 
.................... #define MPU6050_RA_ACCEL_ZOUT_L     0x40 
.................... #define MPU6050_RA_TEMP_OUT_H       0x41 
.................... #define MPU6050_RA_TEMP_OUT_L       0x42 
.................... #define MPU6050_RA_GYRO_XOUT_H      0x43 
.................... #define MPU6050_RA_GYRO_XOUT_L      0x44 
.................... #define MPU6050_RA_GYRO_YOUT_H      0x45 
.................... #define MPU6050_RA_GYRO_YOUT_L      0x46 
.................... #define MPU6050_RA_GYRO_ZOUT_H      0x47 
.................... #define MPU6050_RA_GYRO_ZOUT_L      0x48 
.................... #define MPU6050_RA_EXT_SENS_DATA_00 0x49 
.................... #define MPU6050_RA_EXT_SENS_DATA_01 0x4A 
.................... #define MPU6050_RA_EXT_SENS_DATA_02 0x4B 
.................... #define MPU6050_RA_EXT_SENS_DATA_03 0x4C 
.................... #define MPU6050_RA_EXT_SENS_DATA_04 0x4D 
.................... #define MPU6050_RA_EXT_SENS_DATA_05 0x4E 
.................... #define MPU6050_RA_EXT_SENS_DATA_06 0x4F 
.................... #define MPU6050_RA_EXT_SENS_DATA_07 0x50 
.................... #define MPU6050_RA_EXT_SENS_DATA_08 0x51 
.................... #define MPU6050_RA_EXT_SENS_DATA_09 0x52 
.................... #define MPU6050_RA_EXT_SENS_DATA_10 0x53 
.................... #define MPU6050_RA_EXT_SENS_DATA_11 0x54 
.................... #define MPU6050_RA_EXT_SENS_DATA_12 0x55 
.................... #define MPU6050_RA_EXT_SENS_DATA_13 0x56 
.................... #define MPU6050_RA_EXT_SENS_DATA_14 0x57 
.................... #define MPU6050_RA_EXT_SENS_DATA_15 0x58 
.................... #define MPU6050_RA_EXT_SENS_DATA_16 0x59 
.................... #define MPU6050_RA_EXT_SENS_DATA_17 0x5A 
.................... #define MPU6050_RA_EXT_SENS_DATA_18 0x5B 
.................... #define MPU6050_RA_EXT_SENS_DATA_19 0x5C 
.................... #define MPU6050_RA_EXT_SENS_DATA_20 0x5D 
.................... #define MPU6050_RA_EXT_SENS_DATA_21 0x5E 
.................... #define MPU6050_RA_EXT_SENS_DATA_22 0x5F 
.................... #define MPU6050_RA_EXT_SENS_DATA_23 0x60 
.................... #define MPU6050_RA_MOT_DETECT_STATUS    0x61 
.................... #define MPU6050_RA_I2C_SLV0_DO      0x63 
.................... #define MPU6050_RA_I2C_SLV1_DO      0x64 
.................... #define MPU6050_RA_I2C_SLV2_DO      0x65 
.................... #define MPU6050_RA_I2C_SLV3_DO      0x66 
.................... #define MPU6050_RA_I2C_MST_DELAY_CTRL   0x67 
.................... #define MPU6050_RA_SIGNAL_PATH_RESET    0x68 
.................... #define MPU6050_RA_MOT_DETECT_CTRL      0x69 
.................... #define MPU6050_RA_USER_CTRL        0x6A 
.................... #define MPU6050_RA_PWR_MGMT_1       0x6B 
.................... #define MPU6050_RA_PWR_MGMT_2       0x6C 
.................... #define MPU6050_RA_BANK_SEL         0x6D 
.................... #define MPU6050_RA_MEM_START_ADDR   0x6E 
.................... #define MPU6050_RA_MEM_R_W          0x6F 
.................... #define MPU6050_RA_DMP_CFG_1        0x70 
.................... #define MPU6050_RA_DMP_CFG_2        0x71 
.................... #define MPU6050_RA_FIFO_COUNTH      0x72 
.................... #define MPU6050_RA_FIFO_COUNTL      0x73 
.................... #define MPU6050_RA_FIFO_R_W         0x74 
.................... #define MPU6050_RA_WHO_AM_I         0x75 
....................  
.................... #device ADC=10 *=16 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
*
0433:  CLRF   70
0434:  CLRF   6F
0435:  CLRF   6E
0436:  MOVLW  7F
0437:  MOVWF  6D
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
0438:  MOVLW  7E
0439:  BSF    03.5
043A:  MOVWF  20
043B:  MOVLW  80
043C:  MOVWF  21
043D:  CLRF   22
043E:  CLRF   23
043F:  MOVLW  7A
0440:  MOVWF  24
0441:  MOVLW  2A
0442:  MOVWF  25
0443:  MOVLW  AA
0444:  MOVWF  26
0445:  MOVLW  A3
0446:  MOVWF  27
0447:  MOVLW  75
0448:  MOVWF  28
0449:  MOVLW  B6
044A:  MOVWF  29
044B:  MOVLW  09
044C:  MOVWF  2A
044D:  MOVLW  B4
044E:  MOVWF  2B
044F:  MOVLW  6F
0450:  MOVWF  2C
0451:  MOVLW  4F
0452:  MOVWF  2D
0453:  MOVLW  B6
0454:  MOVWF  2E
0455:  MOVLW  AA
0456:  MOVWF  2F
0457:  MOVLW  69
0458:  MOVWF  30
0459:  MOVLW  8B
045A:  MOVWF  31
045B:  MOVLW  F6
045C:  MOVWF  32
045D:  MOVLW  E8
045E:  MOVWF  33
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
045F:  BCF    03.5
0460:  MOVF   64,W
0461:  BSF    03.5
0462:  MOVWF  37
0463:  BCF    03.5
0464:  MOVF   63,W
0465:  BSF    03.5
0466:  MOVWF  36
0467:  BCF    03.5
0468:  MOVF   62,W
0469:  BSF    03.5
046A:  MOVWF  35
046B:  BCF    03.5
046C:  MOVF   61,W
046D:  BSF    03.5
046E:  MOVWF  34
046F:  CLRF   3B
0470:  CLRF   3A
0471:  CLRF   39
0472:  CLRF   38
0473:  BCF    03.5
0474:  CALL   2AC
0475:  BTFSS  03.0
0476:  GOTO   47A
0477:  MOVF   62,W
0478:  XORLW  80
0479:  MOVWF  62
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
047A:  MOVF   64,W
047B:  BSF    03.5
047C:  MOVWF  3B
047D:  BCF    03.5
047E:  MOVF   63,W
047F:  BSF    03.5
0480:  MOVWF  3A
0481:  BCF    03.5
0482:  MOVF   62,W
0483:  BSF    03.5
0484:  MOVWF  39
0485:  BCF    03.5
0486:  MOVF   61,W
0487:  BSF    03.5
0488:  MOVWF  38
0489:  MOVLW  83
048A:  MOVWF  3F
048B:  MOVLW  F9
048C:  MOVWF  3E
048D:  MOVLW  22
048E:  MOVWF  3D
048F:  MOVLW  7E
0490:  MOVWF  3C
0491:  BCF    03.5
0492:  CALL   049
0493:  MOVF   7A,W
0494:  BSF    03.5
0495:  MOVWF  37
0496:  MOVF   79,W
0497:  MOVWF  36
0498:  MOVF   78,W
0499:  MOVWF  35
049A:  MOVF   77,W
049B:  MOVWF  34
*
04BA:  MOVF   78,W
04BB:  MOVWF  71
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
04BC:  BCF    03.5
04BD:  MOVF   64,W
04BE:  BSF    03.5
04BF:  MOVWF  3B
04C0:  BCF    03.5
04C1:  MOVF   63,W
04C2:  BSF    03.5
04C3:  MOVWF  3A
04C4:  BCF    03.5
04C5:  MOVF   62,W
04C6:  BSF    03.5
04C7:  MOVWF  39
04C8:  BCF    03.5
04C9:  MOVF   61,W
04CA:  BSF    03.5
04CB:  MOVWF  38
04CC:  MOVLW  83
04CD:  MOVWF  3F
04CE:  MOVLW  F9
04CF:  MOVWF  3E
04D0:  MOVLW  22
04D1:  MOVWF  3D
04D2:  MOVLW  7E
04D3:  MOVWF  3C
04D4:  BCF    03.5
04D5:  CALL   049
04D6:  MOVF   7A,W
04D7:  MOVWF  7E
04D8:  MOVF   79,W
04D9:  MOVWF  7D
04DA:  MOVF   78,W
04DB:  MOVWF  7C
04DC:  MOVF   77,W
04DD:  MOVWF  7B
04DE:  BSF    03.5
04DF:  CLRF   39
04E0:  MOVF   71,W
04E1:  MOVWF  38
04E2:  BCF    03.5
04E3:  CALL   18A
04E4:  BSF    03.1
04E5:  MOVF   7E,W
04E6:  BSF    03.5
04E7:  MOVWF  3B
04E8:  MOVF   7D,W
04E9:  MOVWF  3A
04EA:  MOVF   7C,W
04EB:  MOVWF  39
04EC:  MOVF   7B,W
04ED:  MOVWF  38
04EE:  MOVF   7A,W
04EF:  MOVWF  3F
04F0:  MOVF   79,W
04F1:  MOVWF  3E
04F2:  MOVF   78,W
04F3:  MOVWF  3D
04F4:  MOVF   77,W
04F5:  MOVWF  3C
04F6:  BCF    03.5
04F7:  CALL   2ED
04F8:  MOVF   7A,W
04F9:  MOVWF  76
04FA:  MOVF   79,W
04FB:  MOVWF  75
04FC:  MOVF   78,W
04FD:  MOVWF  74
04FE:  MOVF   77,W
04FF:  MOVWF  73
....................    quad = quad % 4;                    // quadrant (0 to 3) 
0500:  MOVLW  03
0501:  ANDWF  71,F
....................  
....................    if (quad == 0 || quad == 2) 
0502:  MOVF   71,F
0503:  BTFSC  03.2
0504:  GOTO   509
0505:  MOVF   71,W
0506:  SUBLW  02
0507:  BTFSS  03.2
0508:  GOTO   525
....................       t = frac * PI_DIV_BY_TWO; 
0509:  MOVF   76,W
050A:  BSF    03.5
050B:  MOVWF  3B
050C:  MOVF   75,W
050D:  MOVWF  3A
050E:  MOVF   74,W
050F:  MOVWF  39
0510:  MOVF   73,W
0511:  MOVWF  38
0512:  MOVLW  DB
0513:  MOVWF  3F
0514:  MOVLW  0F
0515:  MOVWF  3E
0516:  MOVLW  49
0517:  MOVWF  3D
0518:  MOVLW  7F
0519:  MOVWF  3C
051A:  BCF    03.5
051B:  CALL   049
051C:  MOVF   7A,W
051D:  MOVWF  6C
051E:  MOVF   79,W
051F:  MOVWF  6B
0520:  MOVF   78,W
0521:  MOVWF  6A
0522:  MOVF   77,W
0523:  MOVWF  69
0524:  GOTO   590
....................    else if (quad == 1) 
0525:  DECFSZ 71,W
0526:  GOTO   55C
....................       t = (1-frac) * PI_DIV_BY_TWO; 
0527:  BSF    03.1
0528:  BSF    03.5
0529:  CLRF   3B
052A:  CLRF   3A
052B:  CLRF   39
052C:  MOVLW  7F
052D:  MOVWF  38
052E:  MOVF   76,W
052F:  MOVWF  3F
0530:  MOVF   75,W
0531:  MOVWF  3E
0532:  MOVF   74,W
0533:  MOVWF  3D
0534:  MOVF   73,W
0535:  MOVWF  3C
0536:  BCF    03.5
0537:  CALL   2ED
0538:  MOVF   7A,W
0539:  MOVWF  7E
053A:  MOVF   79,W
053B:  MOVWF  7D
053C:  MOVF   78,W
053D:  MOVWF  7C
053E:  MOVF   77,W
053F:  MOVWF  7B
0540:  MOVF   7E,W
0541:  BSF    03.5
0542:  MOVWF  3B
0543:  MOVF   7D,W
0544:  MOVWF  3A
0545:  MOVF   7C,W
0546:  MOVWF  39
0547:  MOVF   7B,W
0548:  MOVWF  38
0549:  MOVLW  DB
054A:  MOVWF  3F
054B:  MOVLW  0F
054C:  MOVWF  3E
054D:  MOVLW  49
054E:  MOVWF  3D
054F:  MOVLW  7F
0550:  MOVWF  3C
0551:  BCF    03.5
0552:  CALL   049
0553:  MOVF   7A,W
0554:  MOVWF  6C
0555:  MOVF   79,W
0556:  MOVWF  6B
0557:  MOVF   78,W
0558:  MOVWF  6A
0559:  MOVF   77,W
055A:  MOVWF  69
055B:  GOTO   590
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
055C:  BSF    03.1
055D:  MOVF   76,W
055E:  BSF    03.5
055F:  MOVWF  3B
0560:  MOVF   75,W
0561:  MOVWF  3A
0562:  MOVF   74,W
0563:  MOVWF  39
0564:  MOVF   73,W
0565:  MOVWF  38
0566:  CLRF   3F
0567:  CLRF   3E
0568:  CLRF   3D
0569:  MOVLW  7F
056A:  MOVWF  3C
056B:  BCF    03.5
056C:  CALL   2ED
056D:  MOVF   7A,W
056E:  MOVWF  7E
056F:  MOVF   79,W
0570:  MOVWF  7D
0571:  MOVF   78,W
0572:  MOVWF  7C
0573:  MOVF   77,W
0574:  MOVWF  7B
0575:  MOVF   7A,W
0576:  BSF    03.5
0577:  MOVWF  3B
0578:  MOVF   79,W
0579:  MOVWF  3A
057A:  MOVF   78,W
057B:  MOVWF  39
057C:  MOVF   77,W
057D:  MOVWF  38
057E:  MOVLW  DB
057F:  MOVWF  3F
0580:  MOVLW  0F
0581:  MOVWF  3E
0582:  MOVLW  49
0583:  MOVWF  3D
0584:  MOVLW  7F
0585:  MOVWF  3C
0586:  BCF    03.5
0587:  CALL   049
0588:  MOVF   7A,W
0589:  MOVWF  6C
058A:  MOVF   79,W
058B:  MOVWF  6B
058C:  MOVF   78,W
058D:  MOVWF  6A
058E:  MOVF   77,W
058F:  MOVWF  69
....................  
....................    y = 1.0; 
0590:  CLRF   68
0591:  CLRF   67
0592:  CLRF   66
0593:  MOVLW  7F
0594:  MOVWF  65
....................    t = t * t; 
0595:  MOVF   6C,W
0596:  BSF    03.5
0597:  MOVWF  3B
0598:  BCF    03.5
0599:  MOVF   6B,W
059A:  BSF    03.5
059B:  MOVWF  3A
059C:  BCF    03.5
059D:  MOVF   6A,W
059E:  BSF    03.5
059F:  MOVWF  39
05A0:  BCF    03.5
05A1:  MOVF   69,W
05A2:  BSF    03.5
05A3:  MOVWF  38
05A4:  BCF    03.5
05A5:  MOVF   6C,W
05A6:  BSF    03.5
05A7:  MOVWF  3F
05A8:  BCF    03.5
05A9:  MOVF   6B,W
05AA:  BSF    03.5
05AB:  MOVWF  3E
05AC:  BCF    03.5
05AD:  MOVF   6A,W
05AE:  BSF    03.5
05AF:  MOVWF  3D
05B0:  BCF    03.5
05B1:  MOVF   69,W
05B2:  BSF    03.5
05B3:  MOVWF  3C
05B4:  BCF    03.5
05B5:  CALL   049
05B6:  MOVF   7A,W
05B7:  MOVWF  6C
05B8:  MOVF   79,W
05B9:  MOVWF  6B
05BA:  MOVF   78,W
05BB:  MOVWF  6A
05BC:  MOVF   77,W
05BD:  MOVWF  69
....................    for (i = 0; i <= 4; i++) 
05BE:  CLRF   72
05BF:  MOVF   72,W
05C0:  SUBLW  04
05C1:  BTFSS  03.0
05C2:  GOTO   647
....................    { 
....................       t2 = t2 * t; 
05C3:  MOVF   70,W
05C4:  BSF    03.5
05C5:  MOVWF  3B
05C6:  BCF    03.5
05C7:  MOVF   6F,W
05C8:  BSF    03.5
05C9:  MOVWF  3A
05CA:  BCF    03.5
05CB:  MOVF   6E,W
05CC:  BSF    03.5
05CD:  MOVWF  39
05CE:  BCF    03.5
05CF:  MOVF   6D,W
05D0:  BSF    03.5
05D1:  MOVWF  38
05D2:  BCF    03.5
05D3:  MOVF   6C,W
05D4:  BSF    03.5
05D5:  MOVWF  3F
05D6:  BCF    03.5
05D7:  MOVF   6B,W
05D8:  BSF    03.5
05D9:  MOVWF  3E
05DA:  BCF    03.5
05DB:  MOVF   6A,W
05DC:  BSF    03.5
05DD:  MOVWF  3D
05DE:  BCF    03.5
05DF:  MOVF   69,W
05E0:  BSF    03.5
05E1:  MOVWF  3C
05E2:  BCF    03.5
05E3:  CALL   049
05E4:  MOVF   7A,W
05E5:  MOVWF  70
05E6:  MOVF   79,W
05E7:  MOVWF  6F
05E8:  MOVF   78,W
05E9:  MOVWF  6E
05EA:  MOVF   77,W
05EB:  MOVWF  6D
....................       y = y + p[i] * t2; 
05EC:  RLF    72,W
05ED:  MOVWF  77
05EE:  RLF    77,F
05EF:  MOVLW  FC
05F0:  ANDWF  77,F
05F1:  MOVF   77,W
05F2:  ADDLW  A0
05F3:  MOVWF  04
05F4:  BCF    03.7
05F5:  MOVF   00,W
05F6:  MOVWF  7B
05F7:  INCF   04,F
05F8:  MOVF   00,W
05F9:  MOVWF  7C
05FA:  INCF   04,F
05FB:  MOVF   00,W
05FC:  MOVWF  7D
05FD:  INCF   04,F
05FE:  MOVF   00,W
05FF:  MOVWF  7E
0600:  BSF    03.5
0601:  MOVWF  3B
0602:  MOVF   7D,W
0603:  MOVWF  3A
0604:  MOVF   7C,W
0605:  MOVWF  39
0606:  MOVF   7B,W
0607:  MOVWF  38
0608:  MOVF   70,W
0609:  MOVWF  3F
060A:  BCF    03.5
060B:  MOVF   6F,W
060C:  BSF    03.5
060D:  MOVWF  3E
060E:  BCF    03.5
060F:  MOVF   6E,W
0610:  BSF    03.5
0611:  MOVWF  3D
0612:  BCF    03.5
0613:  MOVF   6D,W
0614:  BSF    03.5
0615:  MOVWF  3C
0616:  BCF    03.5
0617:  CALL   049
0618:  CLRF   7C
0619:  MOVF   04,W
061A:  MOVWF  7B
061B:  BCF    7C.0
061C:  BTFSC  03.7
061D:  BSF    7C.0
061E:  BCF    03.1
061F:  MOVF   68,W
0620:  BSF    03.5
0621:  MOVWF  3B
0622:  BCF    03.5
0623:  MOVF   67,W
0624:  BSF    03.5
0625:  MOVWF  3A
0626:  BCF    03.5
0627:  MOVF   66,W
0628:  BSF    03.5
0629:  MOVWF  39
062A:  BCF    03.5
062B:  MOVF   65,W
062C:  BSF    03.5
062D:  MOVWF  38
062E:  MOVF   7A,W
062F:  MOVWF  3F
0630:  MOVF   79,W
0631:  MOVWF  3E
0632:  MOVF   78,W
0633:  MOVWF  3D
0634:  MOVF   77,W
0635:  MOVWF  3C
0636:  BCF    03.5
0637:  CALL   2ED
0638:  MOVF   7B,W
0639:  MOVWF  04
063A:  BCF    03.7
063B:  BTFSC  7C.0
063C:  BSF    03.7
063D:  MOVF   7A,W
063E:  MOVWF  68
063F:  MOVF   79,W
0640:  MOVWF  67
0641:  MOVF   78,W
0642:  MOVWF  66
0643:  MOVF   77,W
0644:  MOVWF  65
0645:  INCF   72,F
0646:  GOTO   5BF
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
0647:  MOVF   71,W
0648:  SUBLW  02
0649:  BTFSC  03.2
064A:  GOTO   64D
064B:  DECFSZ 71,W
064C:  GOTO   650
....................       y = -y;  // correct sign 
064D:  MOVF   66,W
064E:  XORLW  80
064F:  MOVWF  66
....................  
....................    return (y); 
0650:  MOVF   65,W
0651:  MOVWF  77
0652:  MOVF   66,W
0653:  MOVWF  78
0654:  MOVF   67,W
0655:  MOVWF  79
0656:  MOVF   68,W
0657:  MOVWF  7A
0658:  RETURN
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
*
0692:  BSF    03.1
0693:  MOVF   5C,W
0694:  BSF    03.5
0695:  MOVWF  3B
0696:  BCF    03.5
0697:  MOVF   5B,W
0698:  BSF    03.5
0699:  MOVWF  3A
069A:  BCF    03.5
069B:  MOVF   5A,W
069C:  BSF    03.5
069D:  MOVWF  39
069E:  BCF    03.5
069F:  MOVF   59,W
06A0:  BSF    03.5
06A1:  MOVWF  38
06A2:  MOVLW  DB
06A3:  MOVWF  3F
06A4:  MOVLW  0F
06A5:  MOVWF  3E
06A6:  MOVLW  49
06A7:  MOVWF  3D
06A8:  MOVLW  7F
06A9:  MOVWF  3C
06AA:  BCF    03.5
06AB:  CALL   2ED
06AC:  MOVF   7A,W
06AD:  MOVWF  60
06AE:  MOVF   79,W
06AF:  MOVWF  5F
06B0:  MOVF   78,W
06B1:  MOVWF  5E
06B2:  MOVF   77,W
06B3:  MOVWF  5D
06B4:  MOVF   7A,W
06B5:  MOVWF  64
06B6:  MOVF   79,W
06B7:  MOVWF  63
06B8:  MOVF   78,W
06B9:  MOVWF  62
06BA:  MOVF   77,W
06BB:  MOVWF  61
06BC:  CALL   433
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
*
0659:  MOVF   50,W
065A:  MOVWF  64
065B:  MOVF   4F,W
065C:  MOVWF  63
065D:  MOVF   4E,W
065E:  MOVWF  62
065F:  MOVF   4D,W
0660:  MOVWF  61
0661:  CALL   433
0662:  MOVF   7A,W
0663:  MOVWF  54
0664:  MOVF   79,W
0665:  MOVWF  53
0666:  MOVF   78,W
0667:  MOVWF  52
0668:  MOVF   77,W
0669:  MOVWF  51
....................    if (c == 0.0) 
066A:  MOVF   54,W
066B:  BSF    03.5
066C:  MOVWF  37
066D:  BCF    03.5
066E:  MOVF   53,W
066F:  BSF    03.5
0670:  MOVWF  36
0671:  BCF    03.5
0672:  MOVF   52,W
0673:  BSF    03.5
0674:  MOVWF  35
0675:  BCF    03.5
0676:  MOVF   51,W
0677:  BSF    03.5
0678:  MOVWF  34
0679:  CLRF   3B
067A:  CLRF   3A
067B:  CLRF   39
067C:  CLRF   38
067D:  BCF    03.5
067E:  CALL   2AC
067F:  BTFSS  03.2
0680:  GOTO   68A
....................       return (1.0e+36); 
0681:  MOVLW  F6
0682:  MOVWF  77
0683:  MOVLW  40
0684:  MOVWF  78
0685:  MOVLW  97
0686:  MOVWF  79
0687:  MOVLW  CE
0688:  MOVWF  7A
0689:  GOTO   6D6
....................  
....................    s = sin(x); 
068A:  MOVF   50,W
068B:  MOVWF  5C
068C:  MOVF   4F,W
068D:  MOVWF  5B
068E:  MOVF   4E,W
068F:  MOVWF  5A
0690:  MOVF   4D,W
0691:  MOVWF  59
*
06BD:  MOVF   7A,W
06BE:  MOVWF  58
06BF:  MOVF   79,W
06C0:  MOVWF  57
06C1:  MOVF   78,W
06C2:  MOVWF  56
06C3:  MOVF   77,W
06C4:  MOVWF  55
....................    return(s/c); 
06C5:  MOVF   58,W
06C6:  MOVWF  5C
06C7:  MOVF   57,W
06C8:  MOVWF  5B
06C9:  MOVF   56,W
06CA:  MOVWF  5A
06CB:  MOVF   55,W
06CC:  MOVWF  59
06CD:  MOVF   54,W
06CE:  MOVWF  60
06CF:  MOVF   53,W
06D0:  MOVWF  5F
06D1:  MOVF   52,W
06D2:  MOVWF  5E
06D3:  MOVF   51,W
06D4:  MOVWF  5D
06D5:  CALL   0C0
06D6:  BSF    0A.3
06D7:  BCF    0A.4
06D8:  GOTO   34B (RETURN)
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... #FUSES NOWDT //No Watch Dog Timer 
.................... #FUSES PUT //Power Up Timer 
.................... #FUSES NOMCLR //Master Clear pin not enabled 
.................... #FUSES NOPROTECT //Code not protected from reading 
.................... #FUSES NOCPD //No EE protection 
.................... #FUSES BROWNOUT //Brownout reset 
.................... #FUSES IESO //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG //No Debug mode for ICD 
.................... #FUSES NOWRT //Program memory not write protected 
.................... #FUSES BORV40 //Brodddddwnout reset at 4.0V 
.................... #FUSES RESERVED //Used to set the reserved FUSE bits 
.................... #FUSES INTRC_IO  
....................  
.................... #use delay(clock=8M) 
*
0035:  MOVLW  4E
0036:  MOVWF  04
0037:  BCF    03.7
0038:  MOVF   00,W
0039:  BTFSC  03.2
003A:  GOTO   048
003B:  MOVLW  02
003C:  MOVWF  78
003D:  CLRF   77
003E:  DECFSZ 77,F
003F:  GOTO   03E
0040:  DECFSZ 78,F
0041:  GOTO   03D
0042:  MOVLW  97
0043:  MOVWF  77
0044:  DECFSZ 77,F
0045:  GOTO   044
0046:  DECFSZ 00,F
0047:  GOTO   03B
0048:  RETURN
....................  
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #use i2c(MASTER, I2C1, FORCE_HW) 
*
024C:  BCF    14.7
024D:  BCF    0C.3
024E:  MOVF   53,W
024F:  MOVWF  13
0250:  MOVLW  02
0251:  BTFSC  14.7
0252:  GOTO   25A
0253:  BTFSS  0C.3
0254:  GOTO   253
0255:  MOVLW  00
0256:  BSF    03.5
0257:  BTFSC  11.6
0258:  MOVLW  01
0259:  BCF    03.5
025A:  MOVWF  78
025B:  RETURN
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
.................... #define SLAVE_ADDRESS  0xB0 
.................... #define DISPLAY_ADDRESS 0xB4 
.................... #define REGISTER_SIZE  8    
.................... #define DISPLAY_CMD_SEND_VALUE 2 
.................... #define DISPLAY_CMD_SEND_LONG_TEXT 5 
.................... #define DISPLAY_CMD_CLS 6 
.................... #define DISPLAY_CMD_SETPOS 8 
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... int16 rotaryR; 
.................... float degree,distance,tall,rad; 
....................  
.................... void displayLongText(char* text) { 
....................  
....................    int i ; 
....................    i2c_start(); 
*
0283:  BSF    03.5
0284:  BSF    11.0
0285:  BTFSC  11.0
0286:  GOTO   285
....................    i2c_write(DISPLAY_ADDRESS); 
0287:  MOVLW  B4
0288:  BCF    03.5
0289:  MOVWF  53
028A:  CALL   24C
....................    i2c_write(DISPLAY_CMD_SEND_LONG_TEXT); 
028B:  MOVLW  05
028C:  MOVWF  53
028D:  CALL   24C
....................  
....................    for(i=0;text[i]!='\0';i++) 
028E:  CLRF   51
028F:  MOVF   51,W
0290:  ADDWF  4F,W
0291:  MOVWF  04
0292:  BCF    03.7
0293:  BTFSC  50.0
0294:  BSF    03.7
0295:  MOVF   00,F
0296:  BTFSC  03.2
0297:  GOTO   2A4
....................    { 
....................       i2c_write(text[i]); 
0298:  MOVF   51,W
0299:  ADDWF  4F,W
029A:  MOVWF  04
029B:  BCF    03.7
029C:  BTFSC  50.0
029D:  BSF    03.7
029E:  MOVF   00,W
029F:  MOVWF  52
02A0:  MOVWF  53
02A1:  CALL   24C
02A2:  INCF   51,F
02A3:  GOTO   28F
....................  
....................    } 
....................    i2c_write('\0'); 
02A4:  CLRF   53
02A5:  CALL   24C
....................    i2c_stop(); 
02A6:  BSF    03.5
02A7:  BSF    11.2
02A8:  BTFSC  11.2
02A9:  GOTO   2A8
02AA:  BCF    03.5
02AB:  RETURN
....................  
.................... } 
....................  
.................... void clearDisplay(){ 
....................  
....................    i2c_start(); 
*
025C:  BSF    03.5
025D:  BSF    11.0
025E:  BTFSC  11.0
025F:  GOTO   25E
....................    i2c_write(DISPLAY_ADDRESS); 
0260:  MOVLW  B4
0261:  BCF    03.5
0262:  MOVWF  53
0263:  CALL   24C
....................    i2c_write(DISPLAY_CMD_CLS); 
0264:  MOVLW  06
0265:  MOVWF  53
0266:  CALL   24C
....................    i2c_stop(); 
0267:  BSF    03.5
0268:  BSF    11.2
0269:  BTFSC  11.2
026A:  GOTO   269
026B:  BCF    03.5
026C:  RETURN
.................... } 
....................  
.................... void setDisplayPos(int pos){ 
....................    i2c_start(); 
026D:  BSF    03.5
026E:  BSF    11.0
026F:  BTFSC  11.0
0270:  GOTO   26F
....................    i2c_write(DISPLAY_ADDRESS); 
0271:  MOVLW  B4
0272:  BCF    03.5
0273:  MOVWF  53
0274:  CALL   24C
....................    i2c_write(DISPLAY_CMD_SETPOS); 
0275:  MOVLW  08
0276:  MOVWF  53
0277:  CALL   24C
....................    i2c_write(pos); 
0278:  MOVF   4D,W
0279:  MOVWF  53
027A:  CALL   24C
....................    i2c_write('\0'); 
027B:  CLRF   53
027C:  CALL   24C
....................    i2c_stop(); 
027D:  BSF    03.5
027E:  BSF    11.2
027F:  BTFSC  11.2
0280:  GOTO   27F
0281:  BCF    03.5
0282:  RETURN
.................... } 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... float distanceFromUltrasonic(){ 
....................  
....................    float distance; 
....................    output_high(PIN_C0); 
*
01A9:  BCF    20.0
01AA:  MOVF   20,W
01AB:  BSF    03.5
01AC:  MOVWF  07
01AD:  BCF    03.5
01AE:  BSF    07.0
....................    delay_us(10); 
01AF:  MOVLW  06
01B0:  MOVWF  77
01B1:  DECFSZ 77,F
01B2:  GOTO   1B1
01B3:  NOP
....................    output_low(PIN_C0); 
01B4:  BCF    20.0
01B5:  MOVF   20,W
01B6:  BSF    03.5
01B7:  MOVWF  07
01B8:  BCF    03.5
01B9:  BCF    07.0
....................     
....................    while(!input(PIN_C1)) {} 
01BA:  BSF    20.1
01BB:  MOVF   20,W
01BC:  BSF    03.5
01BD:  MOVWF  07
01BE:  BCF    03.5
01BF:  BTFSS  07.1
01C0:  GOTO   1BA
....................    set_timer1(0); 
01C1:  CLRF   0E
01C2:  CLRF   0F
01C3:  CLRF   0E
....................    while(input(PIN_C1)) { 
01C4:  BSF    20.1
01C5:  MOVF   20,W
01C6:  BSF    03.5
01C7:  MOVWF  07
01C8:  BCF    03.5
01C9:  BTFSC  07.1
01CA:  GOTO   1C4
....................    //if(get_timer1() >= 65534) return -1; 
....................    } 
....................    distance = get_timer1()*4*0.0005; //convert time to ms 
01CB:  MOVF   0F,W
01CC:  MOVWF  7A
01CD:  MOVF   0E,W
01CE:  MOVWF  77
01CF:  MOVF   0F,W
01D0:  SUBWF  7A,W
01D1:  BTFSS  03.2
01D2:  GOTO   1CB
01D3:  MOVF   77,W
01D4:  MOVWF  51
01D5:  MOVF   7A,W
01D6:  MOVWF  52
01D7:  RLF    51,F
01D8:  RLF    52,F
01D9:  RLF    51,F
01DA:  RLF    52,F
01DB:  MOVLW  FC
01DC:  ANDWF  51,F
01DD:  MOVF   52,W
01DE:  BSF    03.5
01DF:  MOVWF  39
01E0:  BCF    03.5
01E1:  MOVF   51,W
01E2:  BSF    03.5
01E3:  MOVWF  38
01E4:  BCF    03.5
01E5:  CALL   18A
01E6:  MOVF   7A,W
01E7:  BSF    03.5
01E8:  MOVWF  3B
01E9:  MOVF   79,W
01EA:  MOVWF  3A
01EB:  MOVF   78,W
01EC:  MOVWF  39
01ED:  MOVF   77,W
01EE:  MOVWF  38
01EF:  MOVLW  6F
01F0:  MOVWF  3F
01F1:  MOVLW  12
01F2:  MOVWF  3E
01F3:  MOVLW  03
01F4:  MOVWF  3D
01F5:  MOVLW  74
01F6:  MOVWF  3C
01F7:  BCF    03.5
01F8:  CALL   049
01F9:  MOVF   7A,W
01FA:  MOVWF  50
01FB:  MOVF   79,W
01FC:  MOVWF  4F
01FD:  MOVF   78,W
01FE:  MOVWF  4E
01FF:  MOVF   77,W
0200:  MOVWF  4D
....................  distance = distance *0.3497/* metre/ms*/  *100; // distance in cm 
0201:  MOVF   50,W
0202:  BSF    03.5
0203:  MOVWF  3B
0204:  BCF    03.5
0205:  MOVF   4F,W
0206:  BSF    03.5
0207:  MOVWF  3A
0208:  BCF    03.5
0209:  MOVF   4E,W
020A:  BSF    03.5
020B:  MOVWF  39
020C:  BCF    03.5
020D:  MOVF   4D,W
020E:  BSF    03.5
020F:  MOVWF  38
0210:  MOVLW  E1
0211:  MOVWF  3F
0212:  MOVLW  0B
0213:  MOVWF  3E
0214:  MOVLW  33
0215:  MOVWF  3D
0216:  MOVLW  7D
0217:  MOVWF  3C
0218:  BCF    03.5
0219:  CALL   049
021A:  MOVF   7A,W
021B:  MOVWF  54
021C:  MOVF   79,W
021D:  MOVWF  53
021E:  MOVF   78,W
021F:  MOVWF  52
0220:  MOVF   77,W
0221:  MOVWF  51
0222:  MOVF   7A,W
0223:  BSF    03.5
0224:  MOVWF  3B
0225:  BCF    03.5
0226:  MOVF   79,W
0227:  BSF    03.5
0228:  MOVWF  3A
0229:  BCF    03.5
022A:  MOVF   78,W
022B:  BSF    03.5
022C:  MOVWF  39
022D:  BCF    03.5
022E:  MOVF   77,W
022F:  BSF    03.5
0230:  MOVWF  38
0231:  CLRF   3F
0232:  CLRF   3E
0233:  MOVLW  48
0234:  MOVWF  3D
0235:  MOVLW  85
0236:  MOVWF  3C
0237:  BCF    03.5
0238:  CALL   049
0239:  MOVF   7A,W
023A:  MOVWF  50
023B:  MOVF   79,W
023C:  MOVWF  4F
023D:  MOVF   78,W
023E:  MOVWF  4E
023F:  MOVF   77,W
0240:  MOVWF  4D
....................  
....................        
....................    return distance ; 
0241:  MOVF   4D,W
0242:  MOVWF  77
0243:  MOVF   4E,W
0244:  MOVWF  78
0245:  MOVF   4F,W
0246:  MOVWF  79
0247:  MOVF   50,W
0248:  MOVWF  7A
0249:  BSF    0A.3
024A:  BCF    0A.4
024B:  GOTO   2E6 (RETURN)
....................      
.................... } 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //READ DISTANCE ULTRASONIC 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... float setDistanceFromUltrasonic(){ 
....................    int16 time = 0; 
....................    output_low(PIN_C0); 
....................    delay_us(10); 
....................    output_high(PIN_C0); 
....................   // delay_ms(20); 
....................   // output_low(PIN_C0); 
....................    while(input(PIN_C1) == 0) 
....................    { 
....................      set_timer1(0); 
....................    } 
....................    while(input(PIN_C1) == 1) 
....................    {     
....................      time = get_timer1(); 
....................    } 
....................     
....................    float distance = time * 8*0.2 *0.001; //time in ms 
....................    distance *= 34.7867; // to cm 
....................    //printf("Distance(mm) from the light to Lens = %Lu\r\n", distance); 
....................    //setMaxCount(getDistanceToMove(distance)); 
....................    //delay_ms(1000); 
....................     return distance; 
.................... } 
....................  
....................   
....................  
....................  
.................... void main() { 
*
0A0D:  MOVF   03,W
0A0E:  ANDLW  1F
0A0F:  MOVWF  03
0A10:  MOVLW  71
0A11:  BSF    03.5
0A12:  MOVWF  0F
0A13:  CLRF   10
0A14:  MOVF   0F,W
0A15:  BSF    03.6
0A16:  BCF    07.3
0A17:  MOVLW  0C
0A18:  BCF    03.6
0A19:  MOVWF  19
0A1A:  MOVLW  A2
0A1B:  MOVWF  18
0A1C:  MOVLW  90
0A1D:  BCF    03.5
0A1E:  MOVWF  18
0A1F:  MOVLW  FF
0A20:  MOVWF  20
0A21:  BSF    20.3
0A22:  MOVF   20,W
0A23:  BSF    03.5
0A24:  MOVWF  07
0A25:  BCF    03.5
0A26:  BSF    20.4
0A27:  MOVF   20,W
0A28:  BSF    03.5
0A29:  MOVWF  07
0A2A:  MOVLW  13
0A2B:  MOVWF  13
0A2C:  MOVLW  28
0A2D:  BCF    03.5
0A2E:  MOVWF  14
0A2F:  BSF    03.5
0A30:  BSF    14.7
0A31:  BCF    14.6
0A32:  BCF    03.5
0A33:  CLRF   34
0A34:  CLRF   33
0A35:  BSF    03.5
0A36:  BSF    03.6
0A37:  MOVF   09,W
0A38:  ANDLW  C0
0A39:  MOVWF  09
0A3A:  BCF    03.6
0A3B:  BCF    1F.4
0A3C:  BCF    1F.5
0A3D:  MOVLW  00
0A3E:  BSF    03.6
0A3F:  MOVWF  08
0A40:  BCF    03.5
0A41:  CLRF   07
0A42:  CLRF   08
0A43:  CLRF   09
0A44:  BCF    03.7
....................     setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);  
0A45:  MOVLW  35
0A46:  BCF    03.6
0A47:  MOVWF  10
....................      
....................     setup_adc_ports(sAN0);  
0A48:  BSF    03.5
0A49:  BSF    03.6
0A4A:  MOVF   09,W
0A4B:  ANDLW  C0
0A4C:  MOVWF  09
0A4D:  BCF    03.6
0A4E:  BCF    1F.4
0A4F:  BCF    1F.5
0A50:  MOVLW  01
0A51:  BSF    03.6
0A52:  MOVWF  08
....................     setup_adc( ADC_CLOCK_INTERNAL );  
0A53:  BCF    03.5
0A54:  BCF    03.6
0A55:  BSF    1F.6
0A56:  BSF    1F.7
0A57:  BSF    03.5
0A58:  BSF    1F.7
0A59:  BCF    03.5
0A5A:  BSF    1F.0
....................  
....................     set_adc_channel( 0 );  
0A5B:  MOVLW  00
0A5C:  MOVWF  78
0A5D:  MOVF   1F,W
0A5E:  ANDLW  C3
0A5F:  IORWF  78,W
0A60:  MOVWF  1F
....................     delay_ms(50);  
0A61:  MOVLW  32
0A62:  MOVWF  4E
0A63:  BCF    0A.3
0A64:  CALL   035
0A65:  BSF    0A.3
....................       
....................     float toFloor ; 
....................  
....................      
....................     while (1) { 
....................  
....................         
....................       rotaryR = read_adc(); 
0A66:  BSF    1F.1
0A67:  BTFSC  1F.1
0A68:  GOTO   267
0A69:  BSF    03.5
0A6A:  MOVF   1E,W
0A6B:  BCF    03.5
0A6C:  MOVWF  21
0A6D:  MOVF   1E,W
0A6E:  MOVWF  22
....................       //degree = 155.0*(1021 - rotaryR) / 387.0; 
....................       //degree = log((float)rotaryR) / log(1000.0)  * 1023; 
....................       degree = (float)degree*5/1023; 
0A6F:  MOVF   26,W
0A70:  BSF    03.5
0A71:  MOVWF  3B
0A72:  BCF    03.5
0A73:  MOVF   25,W
0A74:  BSF    03.5
0A75:  MOVWF  3A
0A76:  BCF    03.5
0A77:  MOVF   24,W
0A78:  BSF    03.5
0A79:  MOVWF  39
0A7A:  BCF    03.5
0A7B:  MOVF   23,W
0A7C:  BSF    03.5
0A7D:  MOVWF  38
0A7E:  CLRF   3F
0A7F:  CLRF   3E
0A80:  MOVLW  20
0A81:  MOVWF  3D
0A82:  MOVLW  81
0A83:  MOVWF  3C
0A84:  BCF    0A.3
0A85:  BCF    03.5
0A86:  CALL   049
0A87:  BSF    0A.3
0A88:  MOVF   7A,W
0A89:  MOVWF  50
0A8A:  MOVF   79,W
0A8B:  MOVWF  4F
0A8C:  MOVF   78,W
0A8D:  MOVWF  4E
0A8E:  MOVF   77,W
0A8F:  MOVWF  4D
0A90:  MOVF   7A,W
0A91:  MOVWF  5C
0A92:  MOVF   79,W
0A93:  MOVWF  5B
0A94:  MOVF   78,W
0A95:  MOVWF  5A
0A96:  MOVF   77,W
0A97:  MOVWF  59
0A98:  CLRF   60
0A99:  MOVLW  C0
0A9A:  MOVWF  5F
0A9B:  MOVLW  7F
0A9C:  MOVWF  5E
0A9D:  MOVLW  88
0A9E:  MOVWF  5D
0A9F:  BCF    0A.3
0AA0:  CALL   0C0
0AA1:  BSF    0A.3
0AA2:  MOVF   7A,W
0AA3:  MOVWF  26
0AA4:  MOVF   79,W
0AA5:  MOVWF  25
0AA6:  MOVF   78,W
0AA7:  MOVWF  24
0AA8:  MOVF   77,W
0AA9:  MOVWF  23
....................       degree = degree*300 /5; 
0AAA:  MOVF   26,W
0AAB:  BSF    03.5
0AAC:  MOVWF  3B
0AAD:  BCF    03.5
0AAE:  MOVF   25,W
0AAF:  BSF    03.5
0AB0:  MOVWF  3A
0AB1:  BCF    03.5
0AB2:  MOVF   24,W
0AB3:  BSF    03.5
0AB4:  MOVWF  39
0AB5:  BCF    03.5
0AB6:  MOVF   23,W
0AB7:  BSF    03.5
0AB8:  MOVWF  38
0AB9:  CLRF   3F
0ABA:  CLRF   3E
0ABB:  MOVLW  16
0ABC:  MOVWF  3D
0ABD:  MOVLW  87
0ABE:  MOVWF  3C
0ABF:  BCF    0A.3
0AC0:  BCF    03.5
0AC1:  CALL   049
0AC2:  BSF    0A.3
0AC3:  MOVF   7A,W
0AC4:  MOVWF  50
0AC5:  MOVF   79,W
0AC6:  MOVWF  4F
0AC7:  MOVF   78,W
0AC8:  MOVWF  4E
0AC9:  MOVF   77,W
0ACA:  MOVWF  4D
0ACB:  MOVF   7A,W
0ACC:  MOVWF  5C
0ACD:  MOVF   79,W
0ACE:  MOVWF  5B
0ACF:  MOVF   78,W
0AD0:  MOVWF  5A
0AD1:  MOVF   77,W
0AD2:  MOVWF  59
0AD3:  CLRF   60
0AD4:  CLRF   5F
0AD5:  MOVLW  20
0AD6:  MOVWF  5E
0AD7:  MOVLW  81
0AD8:  MOVWF  5D
0AD9:  BCF    0A.3
0ADA:  CALL   0C0
0ADB:  BSF    0A.3
0ADC:  MOVF   7A,W
0ADD:  MOVWF  26
0ADE:  MOVF   79,W
0ADF:  MOVWF  25
0AE0:  MOVF   78,W
0AE1:  MOVWF  24
0AE2:  MOVF   77,W
0AE3:  MOVWF  23
....................      // degree = (degree*150.0)/511; 
....................       distance = distanceFromUltrasonic(); 
0AE4:  BCF    0A.3
0AE5:  GOTO   1A9
0AE6:  BSF    0A.3
0AE7:  MOVF   7A,W
0AE8:  MOVWF  2A
0AE9:  MOVF   79,W
0AEA:  MOVWF  29
0AEB:  MOVF   78,W
0AEC:  MOVWF  28
0AED:  MOVF   77,W
0AEE:  MOVWF  27
.................... //      distance =setDistanceFromUltrasonic(); 
....................        
....................  
....................       if(!input(PIN_B7)){ 
0AEF:  BSF    03.5
0AF0:  BSF    06.7
0AF1:  BCF    03.5
0AF2:  BTFSC  06.7
0AF3:  GOTO   31E
....................          toFloor = distance; 
0AF4:  MOVF   2A,W
0AF5:  MOVWF  38
0AF6:  MOVF   29,W
0AF7:  MOVWF  37
0AF8:  MOVF   28,W
0AF9:  MOVWF  36
0AFA:  MOVF   27,W
0AFB:  MOVWF  35
....................           
....................          clearDisplay(); 
0AFC:  BCF    0A.3
0AFD:  CALL   25C
0AFE:  BSF    0A.3
....................          setDisplayPos(1); 
0AFF:  MOVLW  01
0B00:  MOVWF  4D
0B01:  BCF    0A.3
0B02:  CALL   26D
0B03:  BSF    0A.3
....................          displayLongText((char*)"Calibrated!"); 
0B04:  CLRF   78
0B05:  MOVLW  0C
0B06:  MOVWF  77
0B07:  MOVLW  39
0B08:  MOVWF  04
0B09:  BCF    03.7
0B0A:  MOVF   78,W
0B0B:  BCF    0A.3
0B0C:  CALL   004
0B0D:  BSF    0A.3
0B0E:  MOVWF  00
0B0F:  INCF   78,F
0B10:  INCF   04,F
0B11:  DECFSZ 77,F
0B12:  GOTO   30A
0B13:  CLRF   50
0B14:  MOVLW  39
0B15:  MOVWF  4F
0B16:  BCF    0A.3
0B17:  CALL   283
0B18:  BSF    0A.3
....................          delay_ms(100); 
0B19:  MOVLW  64
0B1A:  MOVWF  4E
0B1B:  BCF    0A.3
0B1C:  CALL   035
0B1D:  BSF    0A.3
....................       } 
....................  
....................       rad = degree * 0.0174533; 
0B1E:  MOVF   26,W
0B1F:  BSF    03.5
0B20:  MOVWF  3B
0B21:  BCF    03.5
0B22:  MOVF   25,W
0B23:  BSF    03.5
0B24:  MOVWF  3A
0B25:  BCF    03.5
0B26:  MOVF   24,W
0B27:  BSF    03.5
0B28:  MOVWF  39
0B29:  BCF    03.5
0B2A:  MOVF   23,W
0B2B:  BSF    03.5
0B2C:  MOVWF  38
0B2D:  MOVLW  39
0B2E:  MOVWF  3F
0B2F:  MOVLW  FA
0B30:  MOVWF  3E
0B31:  MOVLW  0E
0B32:  MOVWF  3D
0B33:  MOVLW  79
0B34:  MOVWF  3C
0B35:  BCF    0A.3
0B36:  BCF    03.5
0B37:  CALL   049
0B38:  BSF    0A.3
0B39:  MOVF   7A,W
0B3A:  MOVWF  32
0B3B:  MOVF   79,W
0B3C:  MOVWF  31
0B3D:  MOVF   78,W
0B3E:  MOVWF  30
0B3F:  MOVF   77,W
0B40:  MOVWF  2F
....................       tall = (tan(rad) * distance ) + toFloor; 
0B41:  MOVF   32,W
0B42:  MOVWF  50
0B43:  MOVF   31,W
0B44:  MOVWF  4F
0B45:  MOVF   30,W
0B46:  MOVWF  4E
0B47:  MOVF   2F,W
0B48:  MOVWF  4D
0B49:  BCF    0A.3
0B4A:  GOTO   659
0B4B:  BSF    0A.3
0B4C:  MOVF   7A,W
0B4D:  MOVWF  50
0B4E:  MOVF   79,W
0B4F:  MOVWF  4F
0B50:  MOVF   78,W
0B51:  MOVWF  4E
0B52:  MOVF   77,W
0B53:  MOVWF  4D
0B54:  MOVF   7A,W
0B55:  BSF    03.5
0B56:  MOVWF  3B
0B57:  BCF    03.5
0B58:  MOVF   79,W
0B59:  BSF    03.5
0B5A:  MOVWF  3A
0B5B:  BCF    03.5
0B5C:  MOVF   78,W
0B5D:  BSF    03.5
0B5E:  MOVWF  39
0B5F:  BCF    03.5
0B60:  MOVF   77,W
0B61:  BSF    03.5
0B62:  MOVWF  38
0B63:  BCF    03.5
0B64:  MOVF   2A,W
0B65:  BSF    03.5
0B66:  MOVWF  3F
0B67:  BCF    03.5
0B68:  MOVF   29,W
0B69:  BSF    03.5
0B6A:  MOVWF  3E
0B6B:  BCF    03.5
0B6C:  MOVF   28,W
0B6D:  BSF    03.5
0B6E:  MOVWF  3D
0B6F:  BCF    03.5
0B70:  MOVF   27,W
0B71:  BSF    03.5
0B72:  MOVWF  3C
0B73:  BCF    0A.3
0B74:  BCF    03.5
0B75:  CALL   049
0B76:  BSF    0A.3
0B77:  MOVF   7A,W
0B78:  MOVWF  50
0B79:  MOVF   79,W
0B7A:  MOVWF  4F
0B7B:  MOVF   78,W
0B7C:  MOVWF  4E
0B7D:  MOVF   77,W
0B7E:  MOVWF  4D
0B7F:  CLRF   52
0B80:  MOVF   04,W
0B81:  MOVWF  51
0B82:  BCF    52.0
0B83:  BTFSC  03.7
0B84:  BSF    52.0
0B85:  BCF    03.1
0B86:  MOVF   7A,W
0B87:  BSF    03.5
0B88:  MOVWF  3B
0B89:  BCF    03.5
0B8A:  MOVF   79,W
0B8B:  BSF    03.5
0B8C:  MOVWF  3A
0B8D:  BCF    03.5
0B8E:  MOVF   78,W
0B8F:  BSF    03.5
0B90:  MOVWF  39
0B91:  BCF    03.5
0B92:  MOVF   77,W
0B93:  BSF    03.5
0B94:  MOVWF  38
0B95:  BCF    03.5
0B96:  MOVF   38,W
0B97:  BSF    03.5
0B98:  MOVWF  3F
0B99:  BCF    03.5
0B9A:  MOVF   37,W
0B9B:  BSF    03.5
0B9C:  MOVWF  3E
0B9D:  BCF    03.5
0B9E:  MOVF   36,W
0B9F:  BSF    03.5
0BA0:  MOVWF  3D
0BA1:  BCF    03.5
0BA2:  MOVF   35,W
0BA3:  BSF    03.5
0BA4:  MOVWF  3C
0BA5:  BCF    0A.3
0BA6:  BCF    03.5
0BA7:  CALL   2ED
0BA8:  BSF    0A.3
0BA9:  MOVF   51,W
0BAA:  MOVWF  04
0BAB:  BCF    03.7
0BAC:  BTFSC  52.0
0BAD:  BSF    03.7
0BAE:  MOVF   7A,W
0BAF:  MOVWF  2E
0BB0:  MOVF   79,W
0BB1:  MOVWF  2D
0BB2:  MOVF   78,W
0BB3:  MOVWF  2C
0BB4:  MOVF   77,W
0BB5:  MOVWF  2B
....................   
....................       printf("Sensor= %Lu\tDegree= %.2f\tDist= %.2f cm  tall=%f cm\r\n",rotaryR,degree,distance,tall); 
0BB6:  MOVLW  14
0BB7:  BSF    03.6
0BB8:  MOVWF  0D
0BB9:  MOVLW  00
0BBA:  MOVWF  0F
0BBB:  BCF    03.0
0BBC:  MOVLW  08
0BBD:  BCF    03.6
0BBE:  MOVWF  4D
0BBF:  BCF    0A.3
0BC0:  CALL   6D9
0BC1:  BSF    0A.3
0BC2:  MOVLW  10
0BC3:  MOVWF  04
0BC4:  MOVF   22,W
0BC5:  MOVWF  4E
0BC6:  MOVF   21,W
0BC7:  MOVWF  4D
0BC8:  BCF    0A.3
0BC9:  GOTO   732
0BCA:  BSF    0A.3
0BCB:  MOVLW  19
0BCC:  BSF    03.6
0BCD:  MOVWF  0D
0BCE:  MOVLW  00
0BCF:  MOVWF  0F
0BD0:  BSF    03.0
0BD1:  MOVLW  09
0BD2:  BCF    03.6
0BD3:  MOVWF  4D
0BD4:  BCF    0A.3
0BD5:  CALL   6D9
0BD6:  BSF    0A.3
0BD7:  MOVLW  89
0BD8:  MOVWF  04
0BD9:  MOVF   26,W
0BDA:  MOVWF  50
0BDB:  MOVF   25,W
0BDC:  MOVWF  4F
0BDD:  MOVF   24,W
0BDE:  MOVWF  4E
0BDF:  MOVF   23,W
0BE0:  MOVWF  4D
0BE1:  MOVLW  02
0BE2:  MOVWF  51
0BE3:  CALL   000
0BE4:  MOVLW  20
0BE5:  BSF    03.6
0BE6:  MOVWF  0D
0BE7:  MOVLW  00
0BE8:  MOVWF  0F
0BE9:  BCF    03.0
0BEA:  MOVLW  07
0BEB:  BCF    03.6
0BEC:  MOVWF  4D
0BED:  BCF    0A.3
0BEE:  CALL   6D9
0BEF:  BSF    0A.3
0BF0:  MOVLW  89
0BF1:  MOVWF  04
0BF2:  MOVF   2A,W
0BF3:  MOVWF  50
0BF4:  MOVF   29,W
0BF5:  MOVWF  4F
0BF6:  MOVF   28,W
0BF7:  MOVWF  4E
0BF8:  MOVF   27,W
0BF9:  MOVWF  4D
0BFA:  MOVLW  02
0BFB:  MOVWF  51
0BFC:  CALL   000
0BFD:  MOVLW  25
0BFE:  BSF    03.6
0BFF:  MOVWF  0D
0C00:  MOVLW  00
0C01:  MOVWF  0F
0C02:  BSF    03.0
0C03:  MOVLW  0A
0C04:  BCF    03.6
0C05:  MOVWF  4D
0C06:  BCF    0A.3
0C07:  CALL   6D9
0C08:  BSF    0A.3
0C09:  MOVLW  89
0C0A:  MOVWF  04
0C0B:  MOVF   2E,W
0C0C:  MOVWF  50
0C0D:  MOVF   2D,W
0C0E:  MOVWF  4F
0C0F:  MOVF   2C,W
0C10:  MOVWF  4E
0C11:  MOVF   2B,W
0C12:  MOVWF  4D
0C13:  MOVLW  02
0C14:  MOVWF  51
0C15:  CALL   000
0C16:  MOVLW  2B
0C17:  BSF    03.6
0C18:  MOVWF  0D
0C19:  MOVLW  00
0C1A:  MOVWF  0F
0C1B:  BSF    03.0
0C1C:  MOVLW  05
0C1D:  BCF    03.6
0C1E:  MOVWF  4D
0C1F:  BCF    0A.3
0C20:  CALL   6D9
0C21:  BSF    0A.3
....................       delay_ms(100); 
0C22:  MOVLW  64
0C23:  MOVWF  4E
0C24:  BCF    0A.3
0C25:  CALL   035
0C26:  BSF    0A.3
....................       clearDisplay(); 
0C27:  BCF    0A.3
0C28:  CALL   25C
0C29:  BSF    0A.3
....................       setDisplayPos(1); 
0C2A:  MOVLW  01
0C2B:  MOVWF  4D
0C2C:  BCF    0A.3
0C2D:  CALL   26D
0C2E:  BSF    0A.3
....................       char* message; 
....................       displayLongText((char*)"Deg:"); 
0C2F:  MOVLW  44
0C30:  MOVWF  47
0C31:  MOVLW  65
0C32:  MOVWF  48
0C33:  MOVLW  67
0C34:  MOVWF  49
0C35:  MOVLW  3A
0C36:  MOVWF  4A
0C37:  CLRF   4B
0C38:  CLRF   50
0C39:  MOVLW  47
0C3A:  MOVWF  4F
0C3B:  BCF    0A.3
0C3C:  CALL   283
0C3D:  BSF    0A.3
....................        
....................       if(degree >= 90) sprintf( message , "----" ); 
0C3E:  BSF    03.5
0C3F:  CLRF   37
0C40:  CLRF   36
0C41:  MOVLW  34
0C42:  MOVWF  35
0C43:  MOVLW  85
0C44:  MOVWF  34
0C45:  BCF    03.5
0C46:  MOVF   26,W
0C47:  BSF    03.5
0C48:  MOVWF  3B
0C49:  BCF    03.5
0C4A:  MOVF   25,W
0C4B:  BSF    03.5
0C4C:  MOVWF  3A
0C4D:  BCF    03.5
0C4E:  MOVF   24,W
0C4F:  BSF    03.5
0C50:  MOVWF  39
0C51:  BCF    03.5
0C52:  MOVF   23,W
0C53:  BSF    03.5
0C54:  MOVWF  38
0C55:  BCF    0A.3
0C56:  BCF    03.5
0C57:  CALL   2AC
0C58:  BSF    0A.3
0C59:  BTFSC  03.0
0C5A:  GOTO   45D
0C5B:  BTFSS  03.2
0C5C:  GOTO   469
0C5D:  MOVF   46,W
0C5E:  MOVWF  34
0C5F:  MOVF   45,W
0C60:  MOVWF  33
0C61:  MOVLW  2F
0C62:  BSF    03.6
0C63:  MOVWF  0D
0C64:  MOVLW  00
0C65:  MOVWF  0F
0C66:  BCF    03.6
0C67:  CALL   0E4
0C68:  GOTO   47A
....................       else sprintf( message , "%.1lf" ,(float) degree); 
0C69:  MOVF   46,W
0C6A:  MOVWF  34
0C6B:  MOVF   45,W
0C6C:  MOVWF  33
0C6D:  MOVLW  89
0C6E:  MOVWF  04
0C6F:  MOVF   26,W
0C70:  MOVWF  54
0C71:  MOVF   25,W
0C72:  MOVWF  53
0C73:  MOVF   24,W
0C74:  MOVWF  52
0C75:  MOVF   23,W
0C76:  MOVWF  51
0C77:  MOVLW  01
0C78:  MOVWF  55
0C79:  CALL   13A
....................        
....................        setDisplayPos(5); 
0C7A:  MOVLW  05
0C7B:  MOVWF  4D
0C7C:  BCF    0A.3
0C7D:  CALL   26D
0C7E:  BSF    0A.3
....................       displayLongText(message); 
0C7F:  MOVF   46,W
0C80:  MOVWF  50
0C81:  MOVF   45,W
0C82:  MOVWF  4F
0C83:  BCF    0A.3
0C84:  CALL   283
0C85:  BSF    0A.3
....................        
....................       setDisplayPos(9); 
0C86:  MOVLW  09
0C87:  MOVWF  4D
0C88:  BCF    0A.3
0C89:  CALL   26D
0C8A:  BSF    0A.3
....................       displayLongText((char*)"Dis:"); 
0C8B:  MOVLW  44
0C8C:  MOVWF  47
0C8D:  MOVLW  69
0C8E:  MOVWF  48
0C8F:  MOVLW  73
0C90:  MOVWF  49
0C91:  MOVLW  3A
0C92:  MOVWF  4A
0C93:  CLRF   4B
0C94:  CLRF   50
0C95:  MOVLW  47
0C96:  MOVWF  4F
0C97:  BCF    0A.3
0C98:  CALL   283
0C99:  BSF    0A.3
....................       sprintf( message , "%.2lf" ,(float)distance /100.0); 
0C9A:  MOVF   2A,W
0C9B:  MOVWF  5C
0C9C:  MOVF   29,W
0C9D:  MOVWF  5B
0C9E:  MOVF   28,W
0C9F:  MOVWF  5A
0CA0:  MOVF   27,W
0CA1:  MOVWF  59
0CA2:  CLRF   60
0CA3:  CLRF   5F
0CA4:  MOVLW  48
0CA5:  MOVWF  5E
0CA6:  MOVLW  85
0CA7:  MOVWF  5D
0CA8:  BCF    0A.3
0CA9:  CALL   0C0
0CAA:  BSF    0A.3
0CAB:  MOVF   7A,W
0CAC:  MOVWF  50
0CAD:  MOVF   79,W
0CAE:  MOVWF  4F
0CAF:  MOVF   78,W
0CB0:  MOVWF  4E
0CB1:  MOVF   77,W
0CB2:  MOVWF  4D
0CB3:  MOVF   46,W
0CB4:  MOVWF  34
0CB5:  MOVF   45,W
0CB6:  MOVWF  33
0CB7:  MOVLW  89
0CB8:  MOVWF  04
0CB9:  MOVF   7A,W
0CBA:  MOVWF  54
0CBB:  MOVF   79,W
0CBC:  MOVWF  53
0CBD:  MOVF   78,W
0CBE:  MOVWF  52
0CBF:  MOVF   77,W
0CC0:  MOVWF  51
0CC1:  MOVLW  02
0CC2:  MOVWF  55
0CC3:  CALL   13A
....................       displayLongText(message); 
0CC4:  MOVF   46,W
0CC5:  MOVWF  50
0CC6:  MOVF   45,W
0CC7:  MOVWF  4F
0CC8:  BCF    0A.3
0CC9:  CALL   283
0CCA:  BSF    0A.3
....................  
....................  
....................       setDisplayPos(17); 
0CCB:  MOVLW  11
0CCC:  MOVWF  4D
0CCD:  BCF    0A.3
0CCE:  CALL   26D
0CCF:  BSF    0A.3
....................       displayLongText((char*)"tall:"); 
0CD0:  MOVLW  74
0CD1:  MOVWF  47
0CD2:  MOVLW  61
0CD3:  MOVWF  48
0CD4:  MOVLW  6C
0CD5:  MOVWF  49
0CD6:  MOVWF  4A
0CD7:  MOVLW  3A
0CD8:  MOVWF  4B
0CD9:  CLRF   4C
0CDA:  CLRF   50
0CDB:  MOVLW  47
0CDC:  MOVWF  4F
0CDD:  BCF    0A.3
0CDE:  CALL   283
0CDF:  BSF    0A.3
....................        
....................       if(degree >= 90) sprintf( message , "----" ); 
0CE0:  BSF    03.5
0CE1:  CLRF   37
0CE2:  CLRF   36
0CE3:  MOVLW  34
0CE4:  MOVWF  35
0CE5:  MOVLW  85
0CE6:  MOVWF  34
0CE7:  BCF    03.5
0CE8:  MOVF   26,W
0CE9:  BSF    03.5
0CEA:  MOVWF  3B
0CEB:  BCF    03.5
0CEC:  MOVF   25,W
0CED:  BSF    03.5
0CEE:  MOVWF  3A
0CEF:  BCF    03.5
0CF0:  MOVF   24,W
0CF1:  BSF    03.5
0CF2:  MOVWF  39
0CF3:  BCF    03.5
0CF4:  MOVF   23,W
0CF5:  BSF    03.5
0CF6:  MOVWF  38
0CF7:  BCF    0A.3
0CF8:  BCF    03.5
0CF9:  CALL   2AC
0CFA:  BSF    0A.3
0CFB:  BTFSC  03.0
0CFC:  GOTO   4FF
0CFD:  BTFSS  03.2
0CFE:  GOTO   50B
0CFF:  MOVF   46,W
0D00:  MOVWF  34
0D01:  MOVF   45,W
0D02:  MOVWF  33
0D03:  MOVLW  32
0D04:  BSF    03.6
0D05:  MOVWF  0D
0D06:  MOVLW  00
0D07:  MOVWF  0F
0D08:  BCF    03.6
0D09:  CALL   0E4
0D0A:  GOTO   51C
....................       else sprintf( message , "%.1f" ,tall ); 
0D0B:  MOVF   46,W
0D0C:  MOVWF  34
0D0D:  MOVF   45,W
0D0E:  MOVWF  33
0D0F:  MOVLW  89
0D10:  MOVWF  04
0D11:  MOVF   2E,W
0D12:  MOVWF  54
0D13:  MOVF   2D,W
0D14:  MOVWF  53
0D15:  MOVF   2C,W
0D16:  MOVWF  52
0D17:  MOVF   2B,W
0D18:  MOVWF  51
0D19:  MOVLW  01
0D1A:  MOVWF  55
0D1B:  CALL   13A
....................       displayLongText(message); 
0D1C:  MOVF   46,W
0D1D:  MOVWF  50
0D1E:  MOVF   45,W
0D1F:  MOVWF  4F
0D20:  BCF    0A.3
0D21:  CALL   283
0D22:  BSF    0A.3
....................  
....................  
....................        
....................        
....................        
....................       delay_ms(300); 
0D23:  MOVLW  02
0D24:  MOVWF  4D
0D25:  MOVLW  96
0D26:  MOVWF  4E
0D27:  BCF    0A.3
0D28:  CALL   035
0D29:  BSF    0A.3
0D2A:  DECFSZ 4D,F
0D2B:  GOTO   525
0D2C:  GOTO   266
....................        
....................       
....................         
....................     } 
....................  
.................... } 
....................  
0D2D:  SLEEP
....................  
....................  

Configuration Fuses:
   Word  1: 2FC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
