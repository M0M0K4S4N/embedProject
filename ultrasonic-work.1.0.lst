CCS PCM C Compiler, Version 5.063, 32906               04-Apr-17 23:02

               Filename:   D:\#cpeembed\#project\ultrasonic-work.1.0.lst

               ROM used:   3411 words (42%)
                           Largest free fragment is 2048
               RAM used:   58 (16%) at main() level
                           136 (37%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  0A
0001:  MOVWF  0A
0002:  GOTO   253
0003:  NOP
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  43
0009:  RETLW  61
000A:  RETLW  6C
000B:  RETLW  69
000C:  RETLW  62
000D:  RETLW  72
000E:  RETLW  61
000F:  RETLW  74
0010:  RETLW  65
0011:  RETLW  64
0012:  RETLW  21
0013:  RETLW  00
0014:  DATA E1,39
0015:  DATA 64,10
0016:  DATA D8,1E
0017:  DATA 25,36
0018:  DATA 75,10
0019:  DATA A0,29
001A:  DATA 65,37
001B:  DATA F3,37
001C:  DATA F2,1E
001D:  DATA A0,12
001E:  DATA CC,3A
001F:  DATA 09,22
0020:  DATA E5,33
0021:  DATA F2,32
0022:  DATA E5,1E
0023:  DATA A0,12
0024:  DATA 2E,19
0025:  DATA E6,04
0026:  DATA C4,34
0027:  DATA 73,3A
0028:  DATA 3D,10
0029:  DATA 25,17
002A:  DATA 32,33
002B:  DATA A0,31
002C:  DATA 6D,10
002D:  DATA 20,3A
002E:  DATA 61,36
002F:  DATA EC,1E
0030:  DATA 25,33
0031:  DATA A0,31
0032:  DATA ED,06
0033:  DATA 0A,00
0034:  DATA AD,16
0035:  DATA AD,16
0036:  DATA 00,00
0037:  DATA AD,16
0038:  DATA AD,16
0039:  DATA 00,01
*
004E:  MOVLW  8E
004F:  MOVWF  77
0050:  BSF    03.5
0051:  MOVF   39,W
0052:  MOVWF  78
0053:  MOVF   38,W
0054:  MOVWF  79
0055:  CLRF   7A
0056:  MOVF   78,F
0057:  BTFSS  03.2
0058:  GOTO   063
0059:  MOVF   79,W
005A:  MOVWF  78
005B:  CLRF   79
005C:  MOVLW  08
005D:  SUBWF  77,F
005E:  MOVF   78,F
005F:  BTFSS  03.2
0060:  GOTO   063
0061:  CLRF   77
0062:  GOTO   06B
0063:  BCF    03.0
0064:  BTFSC  78.7
0065:  GOTO   06A
0066:  RLF    79,F
0067:  RLF    78,F
0068:  DECF   77,F
0069:  GOTO   063
006A:  BCF    78.7
006B:  BCF    03.5
006C:  RETURN
006D:  BSF    03.5
006E:  MOVF   38,W
006F:  BTFSC  03.2
0070:  GOTO   0DE
0071:  MOVWF  40
0072:  MOVF   3C,W
0073:  BTFSC  03.2
0074:  GOTO   0DE
0075:  ADDWF  40,F
0076:  BTFSC  03.0
0077:  GOTO   07F
0078:  MOVLW  7F
0079:  SUBWF  40,F
007A:  BTFSS  03.0
007B:  GOTO   0DE
007C:  BTFSC  03.2
007D:  GOTO   0DE
007E:  GOTO   083
007F:  MOVLW  81
0080:  ADDWF  40,F
0081:  BTFSC  03.0
0082:  GOTO   0DE
0083:  MOVF   40,W
0084:  MOVWF  77
0085:  CLRF   78
0086:  CLRF   79
0087:  CLRF   7A
0088:  MOVF   39,W
0089:  MOVWF  44
008A:  BSF    44.7
008B:  MOVF   3A,W
008C:  MOVWF  43
008D:  MOVF   3B,W
008E:  MOVWF  42
008F:  MOVLW  18
0090:  MOVWF  40
0091:  CLRF   41
0092:  BTFSS  42.0
0093:  GOTO   0AC
0094:  MOVF   3F,W
0095:  ADDWF  7A,F
0096:  BTFSS  03.0
0097:  GOTO   09E
0098:  INCF   79,F
0099:  BTFSS  03.2
009A:  GOTO   09E
009B:  INCF   78,F
009C:  BTFSC  03.2
009D:  BSF    41.7
009E:  MOVF   3E,W
009F:  ADDWF  79,F
00A0:  BTFSS  03.0
00A1:  GOTO   0A5
00A2:  INCF   78,F
00A3:  BTFSC  03.2
00A4:  BSF    41.7
00A5:  MOVF   3D,W
00A6:  MOVWF  3A
00A7:  BSF    3A.7
00A8:  MOVF   3A,W
00A9:  ADDWF  78,F
00AA:  BTFSC  03.0
00AB:  BSF    41.7
00AC:  RLF    41,F
00AD:  RRF    78,F
00AE:  RRF    79,F
00AF:  RRF    7A,F
00B0:  RRF    44,F
00B1:  RRF    43,F
00B2:  RRF    42,F
00B3:  BCF    03.0
00B4:  DECFSZ 40,F
00B5:  GOTO   091
00B6:  MOVLW  01
00B7:  ADDWF  77,F
00B8:  BTFSC  03.0
00B9:  GOTO   0DE
00BA:  BTFSC  78.7
00BB:  GOTO   0C3
00BC:  RLF    44,F
00BD:  RLF    7A,F
00BE:  RLF    79,F
00BF:  RLF    78,F
00C0:  DECF   77,F
00C1:  BTFSC  03.2
00C2:  GOTO   0DE
00C3:  BTFSS  44.7
00C4:  GOTO   0D4
00C5:  INCF   7A,F
00C6:  BTFSS  03.2
00C7:  GOTO   0D4
00C8:  INCF   79,F
00C9:  BTFSS  03.2
00CA:  GOTO   0D4
00CB:  INCF   78,F
00CC:  BTFSS  03.2
00CD:  GOTO   0D4
00CE:  RRF    78,F
00CF:  RRF    79,F
00D0:  RRF    7A,F
00D1:  INCF   77,F
00D2:  BTFSC  03.2
00D3:  GOTO   0DE
00D4:  MOVF   39,W
00D5:  MOVWF  41
00D6:  MOVF   3D,W
00D7:  XORWF  41,F
00D8:  BTFSS  41.7
00D9:  GOTO   0DC
00DA:  BSF    78.7
00DB:  GOTO   0E2
00DC:  BCF    78.7
00DD:  GOTO   0E2
00DE:  CLRF   77
00DF:  CLRF   78
00E0:  CLRF   79
00E1:  CLRF   7A
00E2:  BCF    03.5
00E3:  RETURN
00E4:  MOVF   5B,W
00E5:  BTFSC  03.2
00E6:  GOTO   1A9
00E7:  MOVWF  67
00E8:  MOVF   5F,W
00E9:  BTFSC  03.2
00EA:  GOTO   1A9
00EB:  SUBWF  67,F
00EC:  BTFSS  03.0
00ED:  GOTO   0F3
00EE:  MOVLW  7F
00EF:  ADDWF  67,F
00F0:  BTFSC  03.0
00F1:  GOTO   1A9
00F2:  GOTO   0F9
00F3:  MOVLW  81
00F4:  SUBWF  67,F
00F5:  BTFSS  03.0
00F6:  GOTO   1A9
00F7:  BTFSC  03.2
00F8:  GOTO   1A9
00F9:  MOVF   67,W
00FA:  MOVWF  77
00FB:  CLRF   78
00FC:  CLRF   79
00FD:  CLRF   7A
00FE:  CLRF   66
00FF:  MOVF   5C,W
0100:  MOVWF  65
0101:  BSF    65.7
0102:  MOVF   5D,W
0103:  MOVWF  64
0104:  MOVF   5E,W
0105:  MOVWF  63
0106:  MOVLW  19
0107:  MOVWF  67
0108:  MOVF   62,W
0109:  SUBWF  63,F
010A:  BTFSC  03.0
010B:  GOTO   11C
010C:  MOVLW  01
010D:  SUBWF  64,F
010E:  BTFSC  03.0
010F:  GOTO   11C
0110:  SUBWF  65,F
0111:  BTFSC  03.0
0112:  GOTO   11C
0113:  SUBWF  66,F
0114:  BTFSC  03.0
0115:  GOTO   11C
0116:  INCF   66,F
0117:  INCF   65,F
0118:  INCF   64,F
0119:  MOVF   62,W
011A:  ADDWF  63,F
011B:  GOTO   14E
011C:  MOVF   61,W
011D:  SUBWF  64,F
011E:  BTFSC  03.0
011F:  GOTO   137
0120:  MOVLW  01
0121:  SUBWF  65,F
0122:  BTFSC  03.0
0123:  GOTO   137
0124:  SUBWF  66,F
0125:  BTFSC  03.0
0126:  GOTO   137
0127:  INCF   66,F
0128:  INCF   65,F
0129:  MOVF   61,W
012A:  ADDWF  64,F
012B:  MOVF   62,W
012C:  ADDWF  63,F
012D:  BTFSS  03.0
012E:  GOTO   14E
012F:  INCF   64,F
0130:  BTFSS  03.2
0131:  GOTO   14E
0132:  INCF   65,F
0133:  BTFSS  03.2
0134:  GOTO   14E
0135:  INCF   66,F
0136:  GOTO   14E
0137:  MOVF   60,W
0138:  IORLW  80
0139:  SUBWF  65,F
013A:  BTFSC  03.0
013B:  GOTO   14D
013C:  MOVLW  01
013D:  SUBWF  66,F
013E:  BTFSC  03.0
013F:  GOTO   14D
0140:  INCF   66,F
0141:  MOVF   60,W
0142:  IORLW  80
0143:  ADDWF  65,F
0144:  MOVF   61,W
0145:  ADDWF  64,F
0146:  BTFSS  03.0
0147:  GOTO   12B
0148:  INCF   65,F
0149:  BTFSS  03.2
014A:  GOTO   12B
014B:  INCF   66,F
014C:  GOTO   12B
014D:  BSF    7A.0
014E:  DECFSZ 67,F
014F:  GOTO   151
0150:  GOTO   15C
0151:  BCF    03.0
0152:  RLF    63,F
0153:  RLF    64,F
0154:  RLF    65,F
0155:  RLF    66,F
0156:  BCF    03.0
0157:  RLF    7A,F
0158:  RLF    79,F
0159:  RLF    78,F
015A:  RLF    68,F
015B:  GOTO   108
015C:  BTFSS  68.0
015D:  GOTO   164
015E:  BCF    03.0
015F:  RRF    78,F
0160:  RRF    79,F
0161:  RRF    7A,F
0162:  RRF    68,F
0163:  GOTO   167
0164:  DECF   77,F
0165:  BTFSC  03.2
0166:  GOTO   1A9
0167:  BTFSC  68.7
0168:  GOTO   190
0169:  BCF    03.0
016A:  RLF    63,F
016B:  RLF    64,F
016C:  RLF    65,F
016D:  RLF    66,F
016E:  MOVF   62,W
016F:  SUBWF  63,F
0170:  BTFSC  03.0
0171:  GOTO   17C
0172:  MOVLW  01
0173:  SUBWF  64,F
0174:  BTFSC  03.0
0175:  GOTO   17C
0176:  SUBWF  65,F
0177:  BTFSC  03.0
0178:  GOTO   17C
0179:  SUBWF  66,F
017A:  BTFSS  03.0
017B:  GOTO   19F
017C:  MOVF   61,W
017D:  SUBWF  64,F
017E:  BTFSC  03.0
017F:  GOTO   187
0180:  MOVLW  01
0181:  SUBWF  65,F
0182:  BTFSC  03.0
0183:  GOTO   187
0184:  SUBWF  66,F
0185:  BTFSS  03.0
0186:  GOTO   19F
0187:  MOVF   60,W
0188:  IORLW  80
0189:  SUBWF  65,F
018A:  BTFSC  03.0
018B:  GOTO   190
018C:  MOVLW  01
018D:  SUBWF  66,F
018E:  BTFSS  03.0
018F:  GOTO   19F
0190:  INCF   7A,F
0191:  BTFSS  03.2
0192:  GOTO   19F
0193:  INCF   79,F
0194:  BTFSS  03.2
0195:  GOTO   19F
0196:  INCF   78,F
0197:  BTFSS  03.2
0198:  GOTO   19F
0199:  INCF   77,F
019A:  BTFSC  03.2
019B:  GOTO   1A9
019C:  RRF    78,F
019D:  RRF    79,F
019E:  RRF    7A,F
019F:  MOVF   5C,W
01A0:  MOVWF  67
01A1:  MOVF   60,W
01A2:  XORWF  67,F
01A3:  BTFSS  67.7
01A4:  GOTO   1A7
01A5:  BSF    78.7
01A6:  GOTO   1AD
01A7:  BCF    78.7
01A8:  GOTO   1AD
01A9:  CLRF   77
01AA:  CLRF   78
01AB:  CLRF   79
01AC:  CLRF   7A
01AD:  RETURN
*
02B1:  BSF    03.5
02B2:  MOVF   35,W
02B3:  MOVWF  3C
02B4:  MOVF   39,W
02B5:  XORWF  3C,F
02B6:  BTFSS  3C.7
02B7:  GOTO   2BD
02B8:  BCF    03.2
02B9:  BCF    03.0
02BA:  BTFSC  35.7
02BB:  BSF    03.0
02BC:  GOTO   2F0
02BD:  MOVF   35,W
02BE:  MOVWF  3C
02BF:  MOVF   38,W
02C0:  MOVWF  3D
02C1:  MOVF   34,W
02C2:  SUBWF  3D,F
02C3:  BTFSC  03.2
02C4:  GOTO   2CB
02C5:  BTFSS  3C.7
02C6:  GOTO   2F0
02C7:  MOVF   03,W
02C8:  XORLW  01
02C9:  MOVWF  03
02CA:  GOTO   2F0
02CB:  MOVF   39,W
02CC:  MOVWF  3D
02CD:  MOVF   35,W
02CE:  SUBWF  3D,F
02CF:  BTFSC  03.2
02D0:  GOTO   2D7
02D1:  BTFSS  3C.7
02D2:  GOTO   2F0
02D3:  MOVF   03,W
02D4:  XORLW  01
02D5:  MOVWF  03
02D6:  GOTO   2F0
02D7:  MOVF   3A,W
02D8:  MOVWF  3D
02D9:  MOVF   36,W
02DA:  SUBWF  3D,F
02DB:  BTFSC  03.2
02DC:  GOTO   2E3
02DD:  BTFSS  3C.7
02DE:  GOTO   2F0
02DF:  MOVF   03,W
02E0:  XORLW  01
02E1:  MOVWF  03
02E2:  GOTO   2F0
02E3:  MOVF   3B,W
02E4:  MOVWF  3D
02E5:  MOVF   37,W
02E6:  SUBWF  3D,F
02E7:  BTFSC  03.2
02E8:  GOTO   2EF
02E9:  BTFSS  3C.7
02EA:  GOTO   2F0
02EB:  MOVF   03,W
02EC:  XORLW  01
02ED:  MOVWF  03
02EE:  GOTO   2F0
02EF:  BCF    03.0
02F0:  BCF    03.5
02F1:  RETURN
02F2:  MOVLW  80
02F3:  BTFSS  03.1
02F4:  GOTO   2F8
02F5:  BSF    03.5
02F6:  XORWF  3D,F
02F7:  BCF    03.5
02F8:  BSF    03.5
02F9:  CLRF   42
02FA:  CLRF   43
02FB:  MOVF   39,W
02FC:  MOVWF  41
02FD:  MOVF   3D,W
02FE:  XORWF  41,F
02FF:  MOVF   38,W
0300:  BTFSC  03.2
0301:  GOTO   3E6
0302:  MOVWF  40
0303:  MOVWF  77
0304:  MOVF   3C,W
0305:  BTFSC  03.2
0306:  GOTO   3EF
0307:  SUBWF  40,F
0308:  BTFSC  03.2
0309:  GOTO   38B
030A:  BTFSS  03.0
030B:  GOTO   349
030C:  MOVF   3D,W
030D:  MOVWF  46
030E:  BSF    46.7
030F:  MOVF   3E,W
0310:  MOVWF  45
0311:  MOVF   3F,W
0312:  MOVWF  44
0313:  CLRF   43
0314:  BCF    03.0
0315:  RRF    46,F
0316:  RRF    45,F
0317:  RRF    44,F
0318:  RRF    43,F
0319:  DECFSZ 40,F
031A:  GOTO   313
031B:  BTFSS  41.7
031C:  GOTO   320
031D:  BSF    42.0
031E:  GOTO   403
031F:  BCF    42.0
0320:  BCF    40.0
0321:  BSF    42.4
0322:  MOVLW  BB
0323:  MOVWF  04
0324:  BCF    03.7
0325:  GOTO   418
0326:  BCF    42.4
0327:  BTFSC  41.7
0328:  GOTO   333
0329:  BTFSS  40.0
032A:  GOTO   33E
032B:  RRF    46,F
032C:  RRF    45,F
032D:  RRF    44,F
032E:  RRF    43,F
032F:  INCF   77,F
0330:  BTFSC  03.2
0331:  GOTO   3FE
0332:  GOTO   33E
0333:  BTFSC  46.7
0334:  GOTO   341
0335:  BCF    03.0
0336:  RLF    43,F
0337:  RLF    44,F
0338:  RLF    45,F
0339:  RLF    46,F
033A:  DECF   77,F
033B:  BTFSC  03.2
033C:  GOTO   3FE
033D:  GOTO   333
033E:  BSF    42.6
033F:  GOTO   3AB
0340:  BCF    42.6
0341:  MOVF   39,W
0342:  MOVWF  41
0343:  BTFSS  41.7
0344:  GOTO   347
0345:  BSF    46.7
0346:  GOTO   3F7
0347:  BCF    46.7
0348:  GOTO   3F7
0349:  MOVF   3C,W
034A:  MOVWF  40
034B:  MOVWF  77
034C:  MOVF   38,W
034D:  SUBWF  40,F
034E:  MOVF   39,W
034F:  MOVWF  46
0350:  BSF    46.7
0351:  MOVF   3A,W
0352:  MOVWF  45
0353:  MOVF   3B,W
0354:  MOVWF  44
0355:  CLRF   43
0356:  BCF    03.0
0357:  RRF    46,F
0358:  RRF    45,F
0359:  RRF    44,F
035A:  RRF    43,F
035B:  DECFSZ 40,F
035C:  GOTO   355
035D:  BTFSS  41.7
035E:  GOTO   362
035F:  BSF    42.1
0360:  GOTO   403
0361:  BCF    42.1
0362:  BCF    40.0
0363:  BSF    42.5
0364:  MOVLW  BF
0365:  MOVWF  04
0366:  BCF    03.7
0367:  GOTO   418
0368:  BCF    42.5
0369:  BTFSC  41.7
036A:  GOTO   375
036B:  BTFSS  40.0
036C:  GOTO   380
036D:  RRF    46,F
036E:  RRF    45,F
036F:  RRF    44,F
0370:  RRF    43,F
0371:  INCF   77,F
0372:  BTFSC  03.2
0373:  GOTO   3FE
0374:  GOTO   380
0375:  BTFSC  46.7
0376:  GOTO   383
0377:  BCF    03.0
0378:  RLF    43,F
0379:  RLF    44,F
037A:  RLF    45,F
037B:  RLF    46,F
037C:  DECF   77,F
037D:  BTFSC  03.2
037E:  GOTO   3FE
037F:  GOTO   375
0380:  BSF    42.7
0381:  GOTO   3AB
0382:  BCF    42.7
0383:  MOVF   3D,W
0384:  MOVWF  41
0385:  BTFSS  41.7
0386:  GOTO   389
0387:  BSF    46.7
0388:  GOTO   3F7
0389:  BCF    46.7
038A:  GOTO   3F7
038B:  MOVF   3D,W
038C:  MOVWF  46
038D:  BSF    46.7
038E:  MOVF   3E,W
038F:  MOVWF  45
0390:  MOVF   3F,W
0391:  MOVWF  44
0392:  BTFSS  41.7
0393:  GOTO   398
0394:  BCF    46.7
0395:  BSF    42.2
0396:  GOTO   403
0397:  BCF    42.2
0398:  CLRF   43
0399:  BCF    40.0
039A:  MOVLW  BB
039B:  MOVWF  04
039C:  BCF    03.7
039D:  GOTO   418
039E:  BTFSC  41.7
039F:  GOTO   3C1
03A0:  MOVF   39,W
03A1:  MOVWF  41
03A2:  BTFSS  40.0
03A3:  GOTO   3AB
03A4:  RRF    46,F
03A5:  RRF    45,F
03A6:  RRF    44,F
03A7:  RRF    43,F
03A8:  INCF   77,F
03A9:  BTFSC  03.2
03AA:  GOTO   3FE
03AB:  BTFSS  43.7
03AC:  GOTO   3BC
03AD:  INCF   44,F
03AE:  BTFSS  03.2
03AF:  GOTO   3BC
03B0:  INCF   45,F
03B1:  BTFSS  03.2
03B2:  GOTO   3BC
03B3:  INCF   46,F
03B4:  BTFSS  03.2
03B5:  GOTO   3BC
03B6:  RRF    46,F
03B7:  RRF    45,F
03B8:  RRF    44,F
03B9:  INCF   77,F
03BA:  BTFSC  03.2
03BB:  GOTO   3FE
03BC:  BTFSC  42.6
03BD:  GOTO   340
03BE:  BTFSC  42.7
03BF:  GOTO   382
03C0:  GOTO   3E0
03C1:  MOVLW  80
03C2:  XORWF  46,F
03C3:  BTFSS  46.7
03C4:  GOTO   3C9
03C5:  GOTO   403
03C6:  MOVF   3D,W
03C7:  MOVWF  41
03C8:  GOTO   3D6
03C9:  MOVF   39,W
03CA:  MOVWF  41
03CB:  MOVF   46,F
03CC:  BTFSS  03.2
03CD:  GOTO   3D6
03CE:  MOVF   45,F
03CF:  BTFSS  03.2
03D0:  GOTO   3D6
03D1:  MOVF   44,F
03D2:  BTFSS  03.2
03D3:  GOTO   3D6
03D4:  CLRF   77
03D5:  GOTO   3F7
03D6:  BTFSC  46.7
03D7:  GOTO   3E0
03D8:  BCF    03.0
03D9:  RLF    43,F
03DA:  RLF    44,F
03DB:  RLF    45,F
03DC:  RLF    46,F
03DD:  DECFSZ 77,F
03DE:  GOTO   3D6
03DF:  GOTO   3FE
03E0:  BTFSS  41.7
03E1:  GOTO   3E4
03E2:  BSF    46.7
03E3:  GOTO   3F7
03E4:  BCF    46.7
03E5:  GOTO   3F7
03E6:  MOVF   3C,W
03E7:  MOVWF  77
03E8:  MOVF   3D,W
03E9:  MOVWF  46
03EA:  MOVF   3E,W
03EB:  MOVWF  45
03EC:  MOVF   3F,W
03ED:  MOVWF  44
03EE:  GOTO   3F7
03EF:  MOVF   38,W
03F0:  MOVWF  77
03F1:  MOVF   39,W
03F2:  MOVWF  46
03F3:  MOVF   3A,W
03F4:  MOVWF  45
03F5:  MOVF   3B,W
03F6:  MOVWF  44
03F7:  MOVF   46,W
03F8:  MOVWF  78
03F9:  MOVF   45,W
03FA:  MOVWF  79
03FB:  MOVF   44,W
03FC:  MOVWF  7A
03FD:  GOTO   436
03FE:  CLRF   77
03FF:  CLRF   78
0400:  CLRF   79
0401:  CLRF   7A
0402:  GOTO   436
0403:  CLRF   43
0404:  COMF   44,F
0405:  COMF   45,F
0406:  COMF   46,F
0407:  COMF   43,F
0408:  INCF   43,F
0409:  BTFSS  03.2
040A:  GOTO   411
040B:  INCF   44,F
040C:  BTFSS  03.2
040D:  GOTO   411
040E:  INCF   45,F
040F:  BTFSC  03.2
0410:  INCF   46,F
0411:  BTFSC  42.0
0412:  GOTO   31F
0413:  BTFSC  42.1
0414:  GOTO   361
0415:  BTFSC  42.2
0416:  GOTO   397
0417:  GOTO   3C6
0418:  MOVF   00,W
0419:  ADDWF  44,F
041A:  BTFSS  03.0
041B:  GOTO   422
041C:  INCF   45,F
041D:  BTFSS  03.2
041E:  GOTO   422
041F:  INCF   46,F
0420:  BTFSC  03.2
0421:  BSF    40.0
0422:  DECF   04,F
0423:  MOVF   00,W
0424:  ADDWF  45,F
0425:  BTFSS  03.0
0426:  GOTO   42A
0427:  INCF   46,F
0428:  BTFSC  03.2
0429:  BSF    40.0
042A:  DECF   04,F
042B:  MOVF   00,W
042C:  BTFSS  00.7
042D:  XORLW  80
042E:  ADDWF  46,F
042F:  BTFSC  03.0
0430:  BSF    40.0
0431:  BTFSC  42.4
0432:  GOTO   326
0433:  BTFSC  42.5
0434:  GOTO   368
0435:  GOTO   39E
0436:  BCF    03.5
0437:  RETURN
*
04A1:  MOVLW  8E
04A2:  MOVWF  77
04A3:  MOVF   34,W
04A4:  SUBWF  77,F
04A5:  MOVF   35,W
04A6:  MOVWF  79
04A7:  MOVF   36,W
04A8:  MOVWF  78
04A9:  BSF    79.7
04AA:  MOVF   77,F
04AB:  BTFSC  03.2
04AC:  GOTO   4B8
04AD:  BCF    03.0
04AE:  MOVF   79,F
04AF:  BTFSS  03.2
04B0:  GOTO   4B4
04B1:  MOVF   78,F
04B2:  BTFSC  03.2
04B3:  GOTO   4B8
04B4:  RRF    79,F
04B5:  RRF    78,F
04B6:  DECFSZ 77,F
04B7:  GOTO   4AD
04B8:  BTFSS  35.7
04B9:  GOTO   4BF
04BA:  COMF   78,F
04BB:  COMF   79,F
04BC:  INCF   78,F
04BD:  BTFSC  03.2
04BE:  INCF   79,F
*
0713:  MOVF   0B,W
0714:  MOVWF  50
0715:  BCF    0B.7
0716:  BSF    03.5
0717:  BSF    03.6
0718:  BSF    0C.7
0719:  BSF    0C.0
071A:  NOP
071B:  NOP
071C:  BCF    03.5
071D:  BCF    03.6
071E:  BTFSC  50.7
071F:  BSF    0B.7
0720:  BTFSC  03.0
0721:  GOTO   74B
0722:  BSF    03.6
0723:  MOVF   0C,W
0724:  ANDLW  7F
0725:  BCF    03.6
0726:  MOVWF  50
0727:  BSF    03.6
0728:  MOVF   0D,W
0729:  BCF    03.6
072A:  MOVWF  51
072B:  BSF    03.6
072C:  MOVF   0F,W
072D:  BCF    03.6
072E:  MOVWF  52
072F:  MOVF   50,W
0730:  BTFSS  0C.4
0731:  GOTO   730
0732:  MOVWF  19
0733:  MOVF   51,W
0734:  BSF    03.6
0735:  MOVWF  0D
0736:  BCF    03.6
0737:  MOVF   52,W
0738:  BSF    03.6
0739:  MOVWF  0F
073A:  BCF    03.6
073B:  MOVF   0B,W
073C:  MOVWF  53
073D:  BCF    0B.7
073E:  BSF    03.5
073F:  BSF    03.6
0740:  BSF    0C.7
0741:  BSF    0C.0
0742:  NOP
0743:  NOP
0744:  BCF    03.5
0745:  BCF    03.6
0746:  BTFSC  53.7
0747:  BSF    0B.7
0748:  DECFSZ 4F,F
0749:  GOTO   74B
074A:  GOTO   76B
074B:  BSF    03.6
074C:  RLF    0C,W
074D:  RLF    0E,W
074E:  ANDLW  7F
074F:  BCF    03.6
0750:  MOVWF  50
0751:  BSF    03.6
0752:  MOVF   0D,W
0753:  BCF    03.6
0754:  MOVWF  51
0755:  BSF    03.6
0756:  MOVF   0F,W
0757:  BCF    03.6
0758:  MOVWF  52
0759:  MOVF   50,W
075A:  BTFSS  0C.4
075B:  GOTO   75A
075C:  MOVWF  19
075D:  MOVF   51,W
075E:  BSF    03.6
075F:  MOVWF  0D
0760:  BCF    03.6
0761:  MOVF   52,W
0762:  BSF    03.6
0763:  MOVWF  0F
0764:  INCF   0D,F
0765:  BTFSC  03.2
0766:  INCF   0F,F
0767:  BCF    03.0
0768:  BCF    03.6
0769:  DECFSZ 4F,F
076A:  GOTO   713
076B:  RETURN
076C:  CLRF   57
076D:  MOVF   04,W
076E:  MOVWF  56
076F:  BCF    57.0
0770:  BTFSC  03.7
0771:  BSF    57.0
0772:  SWAPF  50,W
0773:  IORLW  F0
0774:  MOVWF  52
0775:  ADDWF  52,F
0776:  ADDLW  E2
0777:  MOVWF  53
0778:  ADDLW  32
0779:  MOVWF  55
077A:  MOVF   50,W
077B:  ANDLW  0F
077C:  ADDWF  53,F
077D:  ADDWF  53,F
077E:  ADDWF  55,F
077F:  ADDLW  E9
0780:  MOVWF  54
0781:  ADDWF  54,F
0782:  ADDWF  54,F
0783:  SWAPF  4F,W
0784:  ANDLW  0F
0785:  ADDWF  54,F
0786:  ADDWF  55,F
0787:  RLF    54,F
0788:  RLF    55,F
0789:  COMF   55,F
078A:  RLF    55,F
078B:  MOVF   4F,W
078C:  ANDLW  0F
078D:  ADDWF  55,F
078E:  RLF    52,F
078F:  MOVLW  07
0790:  MOVWF  51
0791:  MOVLW  0A
0792:  ADDWF  55,F
0793:  DECF   54,F
0794:  BTFSS  03.0
0795:  GOTO   792
0796:  ADDWF  54,F
0797:  DECF   53,F
0798:  BTFSS  03.0
0799:  GOTO   796
079A:  ADDWF  53,F
079B:  DECF   52,F
079C:  BTFSS  03.0
079D:  GOTO   79A
079E:  ADDWF  52,F
079F:  DECF   51,F
07A0:  BTFSS  03.0
07A1:  GOTO   79E
07A2:  MOVLW  51
07A3:  MOVWF  04
07A4:  BCF    03.7
07A5:  MOVLW  07
07A6:  ANDWF  56,W
07A7:  BCF    56.6
07A8:  ADDWF  04,F
07A9:  MOVLW  55
07AA:  SUBWF  04,W
07AB:  BTFSC  03.2
07AC:  BSF    56.6
07AD:  MOVF   00,W
07AE:  MOVWF  77
07AF:  BTFSS  03.2
07B0:  GOTO   7B9
07B1:  BTFSC  56.6
07B2:  GOTO   7B9
07B3:  BTFSC  56.4
07B4:  GOTO   7C1
07B5:  BTFSC  56.3
07B6:  GOTO   7B9
07B7:  MOVLW  20
07B8:  GOTO   7BC
07B9:  BSF    56.3
07BA:  BCF    56.4
07BB:  MOVLW  30
07BC:  ADDWF  77,F
07BD:  MOVF   77,W
07BE:  BTFSS  0C.4
07BF:  GOTO   7BE
07C0:  MOVWF  19
07C1:  INCF   04,F
07C2:  BTFSS  56.6
07C3:  GOTO   7A9
07C4:  RETURN
07C5:  MOVF   60,W
07C6:  SUBLW  B6
07C7:  MOVWF  60
07C8:  CLRF   7A
07C9:  MOVF   61,W
07CA:  MOVWF  64
07CB:  BSF    61.7
07CC:  BCF    03.0
07CD:  RRF    61,F
07CE:  RRF    62,F
07CF:  RRF    63,F
07D0:  RRF    7A,F
07D1:  RRF    79,F
07D2:  RRF    78,F
07D3:  RRF    77,F
07D4:  DECFSZ 60,F
07D5:  GOTO   7CC
07D6:  BTFSS  64.7
07D7:  GOTO   7E3
07D8:  COMF   77,F
07D9:  COMF   78,F
07DA:  COMF   79,F
07DB:  COMF   7A,F
07DC:  INCF   77,F
07DD:  BTFSC  03.2
07DE:  INCF   78,F
07DF:  BTFSC  03.2
07E0:  INCF   79,F
07E1:  BTFSC  03.2
07E2:  INCF   7A,F
07E3:  RETURN
07E4:  MOVF   33,W
07E5:  MOVWF  04
07E6:  BCF    03.7
07E7:  BTFSC  34.0
07E8:  BSF    03.7
07E9:  MOVF   60,W
07EA:  MOVWF  00
07EB:  INCF   04,F
07EC:  CLRF   00
07ED:  INCF   33,F
07EE:  BTFSC  03.2
07EF:  INCF   34,F
07F0:  RETURN
*
0800:  BTFSC  03.1
0801:  GOTO   005
0802:  MOVLW  68
0803:  MOVWF  04
0804:  BCF    03.7
0805:  CLRF   77
0806:  CLRF   78
0807:  CLRF   79
0808:  CLRF   7A
0809:  CLRF   68
080A:  CLRF   69
080B:  CLRF   6A
080C:  CLRF   6B
080D:  MOVF   67,W
080E:  IORWF  66,W
080F:  IORWF  65,W
0810:  IORWF  64,W
0811:  BTFSC  03.2
0812:  GOTO   043
0813:  MOVLW  20
0814:  MOVWF  6C
0815:  BCF    03.0
0816:  RLF    60,F
0817:  RLF    61,F
0818:  RLF    62,F
0819:  RLF    63,F
081A:  RLF    68,F
081B:  RLF    69,F
081C:  RLF    6A,F
081D:  RLF    6B,F
081E:  MOVF   67,W
081F:  SUBWF  6B,W
0820:  BTFSS  03.2
0821:  GOTO   02C
0822:  MOVF   66,W
0823:  SUBWF  6A,W
0824:  BTFSS  03.2
0825:  GOTO   02C
0826:  MOVF   65,W
0827:  SUBWF  69,W
0828:  BTFSS  03.2
0829:  GOTO   02C
082A:  MOVF   64,W
082B:  SUBWF  68,W
082C:  BTFSS  03.0
082D:  GOTO   03D
082E:  MOVF   64,W
082F:  SUBWF  68,F
0830:  MOVF   65,W
0831:  BTFSS  03.0
0832:  INCFSZ 65,W
0833:  SUBWF  69,F
0834:  MOVF   66,W
0835:  BTFSS  03.0
0836:  INCFSZ 66,W
0837:  SUBWF  6A,F
0838:  MOVF   67,W
0839:  BTFSS  03.0
083A:  INCFSZ 67,W
083B:  SUBWF  6B,F
083C:  BSF    03.0
083D:  RLF    77,F
083E:  RLF    78,F
083F:  RLF    79,F
0840:  RLF    7A,F
0841:  DECFSZ 6C,F
0842:  GOTO   015
0843:  MOVF   68,W
0844:  MOVWF  00
0845:  INCF   04,F
0846:  MOVF   69,W
0847:  MOVWF  00
0848:  INCF   04,F
0849:  MOVF   6A,W
084A:  MOVWF  00
084B:  INCF   04,F
084C:  MOVF   6B,W
084D:  MOVWF  00
084E:  RETURN
084F:  MOVF   04,W
0850:  MOVWF  54
0851:  MOVF   53,W
0852:  MOVWF  56
0853:  BTFSC  03.2
0854:  GOTO   078
0855:  MOVF   52,W
0856:  BSF    03.5
0857:  MOVWF  3B
0858:  BCF    03.5
0859:  MOVF   51,W
085A:  BSF    03.5
085B:  MOVWF  3A
085C:  BCF    03.5
085D:  MOVF   50,W
085E:  BSF    03.5
085F:  MOVWF  39
0860:  BCF    03.5
0861:  MOVF   4F,W
0862:  BSF    03.5
0863:  MOVWF  38
0864:  CLRF   3F
0865:  CLRF   3E
0866:  MOVLW  20
0867:  MOVWF  3D
0868:  MOVLW  82
0869:  MOVWF  3C
086A:  BCF    0A.3
086B:  BCF    03.5
086C:  CALL   06D
086D:  BSF    0A.3
086E:  MOVF   7A,W
086F:  MOVWF  52
0870:  MOVF   79,W
0871:  MOVWF  51
0872:  MOVF   78,W
0873:  MOVWF  50
0874:  MOVF   77,W
0875:  MOVWF  4F
0876:  DECFSZ 56,F
0877:  GOTO   055
0878:  MOVF   52,W
0879:  MOVWF  63
087A:  MOVF   51,W
087B:  MOVWF  62
087C:  MOVF   50,W
087D:  MOVWF  61
087E:  MOVF   4F,W
087F:  MOVWF  60
0880:  BCF    0A.3
0881:  CALL   7C5
0882:  BSF    0A.3
0883:  MOVF   7A,W
0884:  MOVWF  52
0885:  MOVF   79,W
0886:  MOVWF  51
0887:  MOVF   78,W
0888:  MOVWF  50
0889:  MOVF   77,W
088A:  MOVWF  4F
088B:  BTFSS  52.7
088C:  GOTO   09A
088D:  DECF   54,F
088E:  BSF    54.5
088F:  COMF   4F,F
0890:  COMF   50,F
0891:  COMF   51,F
0892:  COMF   52,F
0893:  INCF   4F,F
0894:  BTFSC  03.2
0895:  INCF   50,F
0896:  BTFSC  03.2
0897:  INCF   51,F
0898:  BTFSC  03.2
0899:  INCF   52,F
089A:  MOVLW  3B
089B:  MOVWF  5B
089C:  MOVLW  9A
089D:  MOVWF  5A
089E:  MOVLW  CA
089F:  MOVWF  59
08A0:  CLRF   58
08A1:  MOVLW  0A
08A2:  MOVWF  56
08A3:  MOVF   53,W
08A4:  BTFSC  03.2
08A5:  INCF   54,F
08A6:  BSF    03.1
08A7:  MOVLW  4F
08A8:  MOVWF  04
08A9:  BCF    03.7
08AA:  MOVF   52,W
08AB:  MOVWF  63
08AC:  MOVF   51,W
08AD:  MOVWF  62
08AE:  MOVF   50,W
08AF:  MOVWF  61
08B0:  MOVF   4F,W
08B1:  MOVWF  60
08B2:  MOVF   5B,W
08B3:  MOVWF  67
08B4:  MOVF   5A,W
08B5:  MOVWF  66
08B6:  MOVF   59,W
08B7:  MOVWF  65
08B8:  MOVF   58,W
08B9:  MOVWF  64
08BA:  CALL   000
08BB:  MOVF   78,W
08BC:  MOVF   77,F
08BD:  BTFSS  03.2
08BE:  GOTO   0D2
08BF:  INCF   53,W
08C0:  SUBWF  56,W
08C1:  BTFSC  03.2
08C2:  GOTO   0D2
08C3:  MOVF   54,W
08C4:  BTFSC  03.2
08C5:  GOTO   0D4
08C6:  ANDLW  0F
08C7:  SUBWF  56,W
08C8:  BTFSC  03.2
08C9:  GOTO   0CC
08CA:  BTFSC  03.0
08CB:  GOTO   108
08CC:  BTFSC  54.7
08CD:  GOTO   108
08CE:  BTFSC  54.6
08CF:  GOTO   0D4
08D0:  MOVLW  20
08D1:  GOTO   103
08D2:  MOVLW  20
08D3:  ANDWF  54,F
08D4:  BTFSS  54.5
08D5:  GOTO   0E3
08D6:  BCF    54.5
08D7:  MOVF   53,W
08D8:  BTFSS  03.2
08D9:  DECF   54,F
08DA:  MOVF   77,W
08DB:  MOVWF  54
08DC:  MOVLW  2D
08DD:  BTFSS  0C.4
08DE:  GOTO   0DD
08DF:  MOVWF  19
08E0:  MOVF   54,W
08E1:  MOVWF  77
08E2:  CLRF   54
08E3:  MOVF   53,W
08E4:  SUBWF  56,W
08E5:  BTFSS  03.2
08E6:  GOTO   0F2
08E7:  MOVF   77,W
08E8:  MOVWF  54
08E9:  MOVLW  2E
08EA:  BTFSS  0C.4
08EB:  GOTO   0EA
08EC:  MOVWF  19
08ED:  MOVF   54,W
08EE:  MOVWF  77
08EF:  MOVLW  20
08F0:  ANDWF  54,F
08F1:  MOVLW  00
08F2:  MOVLW  30
08F3:  BTFSS  54.5
08F4:  GOTO   103
08F5:  BCF    54.5
08F6:  MOVF   53,W
08F7:  BTFSS  03.2
08F8:  DECF   54,F
08F9:  MOVF   77,W
08FA:  MOVWF  54
08FB:  MOVLW  2D
08FC:  BTFSS  0C.4
08FD:  GOTO   0FC
08FE:  MOVWF  19
08FF:  MOVF   54,W
0900:  MOVWF  77
0901:  CLRF   54
0902:  MOVLW  30
0903:  ADDWF  77,F
0904:  MOVF   77,W
0905:  BTFSS  0C.4
0906:  GOTO   105
0907:  MOVWF  19
0908:  BCF    03.1
0909:  MOVF   5B,W
090A:  MOVWF  63
090B:  MOVF   5A,W
090C:  MOVWF  62
090D:  MOVF   59,W
090E:  MOVWF  61
090F:  MOVF   58,W
0910:  MOVWF  60
0911:  CLRF   67
0912:  CLRF   66
0913:  CLRF   65
0914:  MOVLW  0A
0915:  MOVWF  64
0916:  CALL   000
0917:  MOVF   7A,W
0918:  MOVWF  5B
0919:  MOVF   79,W
091A:  MOVWF  5A
091B:  MOVF   78,W
091C:  MOVWF  59
091D:  MOVF   77,W
091E:  MOVWF  58
091F:  DECFSZ 56,F
0920:  GOTO   0A6
0921:  RETURN
0922:  MOVF   0B,W
0923:  MOVWF  4F
0924:  BCF    0B.7
0925:  BSF    03.5
0926:  BSF    03.6
0927:  BSF    0C.7
0928:  BSF    0C.0
0929:  NOP
092A:  NOP
092B:  BCF    03.5
092C:  BCF    03.6
092D:  BTFSC  4F.7
092E:  BSF    0B.7
092F:  BSF    03.6
0930:  MOVF   0C,W
0931:  ANDLW  7F
0932:  BTFSC  03.2
0933:  GOTO   17A
0934:  BCF    03.6
0935:  MOVWF  4F
0936:  BSF    03.6
0937:  MOVF   0D,W
0938:  BCF    03.6
0939:  MOVWF  50
093A:  BSF    03.6
093B:  MOVF   0F,W
093C:  BCF    03.6
093D:  MOVWF  51
093E:  MOVF   4F,W
093F:  MOVWF  60
0940:  BCF    0A.3
0941:  CALL   7E4
0942:  BSF    0A.3
0943:  MOVF   50,W
0944:  BSF    03.6
0945:  MOVWF  0D
0946:  BCF    03.6
0947:  MOVF   51,W
0948:  BSF    03.6
0949:  MOVWF  0F
094A:  BCF    03.6
094B:  MOVF   0B,W
094C:  MOVWF  52
094D:  BCF    0B.7
094E:  BSF    03.5
094F:  BSF    03.6
0950:  BSF    0C.7
0951:  BSF    0C.0
0952:  NOP
0953:  NOP
0954:  BCF    03.5
0955:  BCF    03.6
0956:  BTFSC  52.7
0957:  BSF    0B.7
0958:  BSF    03.6
0959:  RLF    0C,W
095A:  RLF    0E,W
095B:  ANDLW  7F
095C:  BTFSC  03.2
095D:  GOTO   17A
095E:  BCF    03.6
095F:  MOVWF  4F
0960:  BSF    03.6
0961:  MOVF   0D,W
0962:  BCF    03.6
0963:  MOVWF  50
0964:  BSF    03.6
0965:  MOVF   0F,W
0966:  BCF    03.6
0967:  MOVWF  51
0968:  MOVF   4F,W
0969:  MOVWF  60
096A:  BCF    0A.3
096B:  CALL   7E4
096C:  BSF    0A.3
096D:  MOVF   50,W
096E:  BSF    03.6
096F:  MOVWF  0D
0970:  BCF    03.6
0971:  MOVF   51,W
0972:  BSF    03.6
0973:  MOVWF  0F
0974:  INCF   0D,F
0975:  BTFSC  03.2
0976:  INCF   0F,F
0977:  BCF    03.6
0978:  GOTO   122
0979:  BSF    03.6
097A:  BCF    03.6
097B:  RETURN
097C:  MOVF   04,W
097D:  MOVWF  58
097E:  MOVF   57,W
097F:  MOVWF  5A
0980:  BTFSC  03.2
0981:  GOTO   1A5
0982:  MOVF   56,W
0983:  BSF    03.5
0984:  MOVWF  3B
0985:  BCF    03.5
0986:  MOVF   55,W
0987:  BSF    03.5
0988:  MOVWF  3A
0989:  BCF    03.5
098A:  MOVF   54,W
098B:  BSF    03.5
098C:  MOVWF  39
098D:  BCF    03.5
098E:  MOVF   53,W
098F:  BSF    03.5
0990:  MOVWF  38
0991:  CLRF   3F
0992:  CLRF   3E
0993:  MOVLW  20
0994:  MOVWF  3D
0995:  MOVLW  82
0996:  MOVWF  3C
0997:  BCF    0A.3
0998:  BCF    03.5
0999:  CALL   06D
099A:  BSF    0A.3
099B:  MOVF   7A,W
099C:  MOVWF  56
099D:  MOVF   79,W
099E:  MOVWF  55
099F:  MOVF   78,W
09A0:  MOVWF  54
09A1:  MOVF   77,W
09A2:  MOVWF  53
09A3:  DECFSZ 5A,F
09A4:  GOTO   182
09A5:  MOVF   56,W
09A6:  MOVWF  63
09A7:  MOVF   55,W
09A8:  MOVWF  62
09A9:  MOVF   54,W
09AA:  MOVWF  61
09AB:  MOVF   53,W
09AC:  MOVWF  60
09AD:  BCF    0A.3
09AE:  CALL   7C5
09AF:  BSF    0A.3
09B0:  MOVF   7A,W
09B1:  MOVWF  56
09B2:  MOVF   79,W
09B3:  MOVWF  55
09B4:  MOVF   78,W
09B5:  MOVWF  54
09B6:  MOVF   77,W
09B7:  MOVWF  53
09B8:  BTFSS  56.7
09B9:  GOTO   1C7
09BA:  DECF   58,F
09BB:  BSF    58.5
09BC:  COMF   53,F
09BD:  COMF   54,F
09BE:  COMF   55,F
09BF:  COMF   56,F
09C0:  INCF   53,F
09C1:  BTFSC  03.2
09C2:  INCF   54,F
09C3:  BTFSC  03.2
09C4:  INCF   55,F
09C5:  BTFSC  03.2
09C6:  INCF   56,F
09C7:  MOVLW  3B
09C8:  MOVWF  5F
09C9:  MOVLW  9A
09CA:  MOVWF  5E
09CB:  MOVLW  CA
09CC:  MOVWF  5D
09CD:  CLRF   5C
09CE:  MOVLW  0A
09CF:  MOVWF  5A
09D0:  MOVF   57,W
09D1:  BTFSC  03.2
09D2:  INCF   58,F
09D3:  BSF    03.1
09D4:  MOVLW  53
09D5:  MOVWF  04
09D6:  BCF    03.7
09D7:  MOVF   56,W
09D8:  MOVWF  63
09D9:  MOVF   55,W
09DA:  MOVWF  62
09DB:  MOVF   54,W
09DC:  MOVWF  61
09DD:  MOVF   53,W
09DE:  MOVWF  60
09DF:  MOVF   5F,W
09E0:  MOVWF  67
09E1:  MOVF   5E,W
09E2:  MOVWF  66
09E3:  MOVF   5D,W
09E4:  MOVWF  65
09E5:  MOVF   5C,W
09E6:  MOVWF  64
09E7:  CALL   000
09E8:  MOVF   78,W
09E9:  MOVF   77,F
09EA:  BTFSS  03.2
09EB:  GOTO   1FF
09EC:  INCF   57,W
09ED:  SUBWF  5A,W
09EE:  BTFSC  03.2
09EF:  GOTO   1FF
09F0:  MOVF   58,W
09F1:  BTFSC  03.2
09F2:  GOTO   201
09F3:  ANDLW  0F
09F4:  SUBWF  5A,W
09F5:  BTFSC  03.2
09F6:  GOTO   1F9
09F7:  BTFSC  03.0
09F8:  GOTO   239
09F9:  BTFSC  58.7
09FA:  GOTO   239
09FB:  BTFSC  58.6
09FC:  GOTO   201
09FD:  MOVLW  20
09FE:  GOTO   233
09FF:  MOVLW  20
0A00:  ANDWF  58,F
0A01:  BTFSS  58.5
0A02:  GOTO   211
0A03:  BCF    58.5
0A04:  MOVF   57,W
0A05:  BTFSS  03.2
0A06:  DECF   58,F
0A07:  MOVF   77,W
0A08:  MOVWF  58
0A09:  MOVLW  2D
0A0A:  MOVWF  60
0A0B:  BCF    0A.3
0A0C:  CALL   7E4
0A0D:  BSF    0A.3
0A0E:  MOVF   58,W
0A0F:  MOVWF  77
0A10:  CLRF   58
0A11:  MOVF   57,W
0A12:  SUBWF  5A,W
0A13:  BTFSS  03.2
0A14:  GOTO   221
0A15:  MOVF   77,W
0A16:  MOVWF  58
0A17:  MOVLW  2E
0A18:  MOVWF  60
0A19:  BCF    0A.3
0A1A:  CALL   7E4
0A1B:  BSF    0A.3
0A1C:  MOVF   58,W
0A1D:  MOVWF  77
0A1E:  MOVLW  20
0A1F:  ANDWF  58,F
0A20:  MOVLW  00
0A21:  MOVLW  30
0A22:  BTFSS  58.5
0A23:  GOTO   233
0A24:  BCF    58.5
0A25:  MOVF   57,W
0A26:  BTFSS  03.2
0A27:  DECF   58,F
0A28:  MOVF   77,W
0A29:  MOVWF  58
0A2A:  MOVLW  2D
0A2B:  MOVWF  60
0A2C:  BCF    0A.3
0A2D:  CALL   7E4
0A2E:  BSF    0A.3
0A2F:  MOVF   58,W
0A30:  MOVWF  77
0A31:  CLRF   58
0A32:  MOVLW  30
0A33:  ADDWF  77,F
0A34:  MOVF   77,W
0A35:  MOVWF  60
0A36:  BCF    0A.3
0A37:  CALL   7E4
0A38:  BSF    0A.3
0A39:  BCF    03.1
0A3A:  MOVF   5F,W
0A3B:  MOVWF  63
0A3C:  MOVF   5E,W
0A3D:  MOVWF  62
0A3E:  MOVF   5D,W
0A3F:  MOVWF  61
0A40:  MOVF   5C,W
0A41:  MOVWF  60
0A42:  CLRF   67
0A43:  CLRF   66
0A44:  CLRF   65
0A45:  MOVLW  0A
0A46:  MOVWF  64
0A47:  CALL   000
0A48:  MOVF   7A,W
0A49:  MOVWF  5F
0A4A:  MOVF   79,W
0A4B:  MOVWF  5E
0A4C:  MOVF   78,W
0A4D:  MOVWF  5D
0A4E:  MOVF   77,W
0A4F:  MOVWF  5C
0A50:  DECFSZ 5A,F
0A51:  GOTO   1D3
0A52:  RETURN
....................  
.................... #list 
....................  
.................... #include "MPU6050\MPU6050.h" 
.................... #define MPU6050_ADDRESS   0xD0 
.................... #define MPU6050_RA_XG_OFFS_TC       0x00  
.................... #define MPU6050_RA_YG_OFFS_TC       0x01  
.................... #define MPU6050_RA_ZG_OFFS_TC       0x02  
.................... #define MPU6050_RA_X_FINE_GAIN      0x03  
.................... #define MPU6050_RA_Y_FINE_GAIN      0x04  
.................... #define MPU6050_RA_Z_FINE_GAIN      0x05  
.................... #define MPU6050_RA_XA_OFFS_H        0x06  
.................... #define MPU6050_RA_XA_OFFS_L_TC     0x07 
.................... #define MPU6050_RA_YA_OFFS_H        0x08  
.................... #define MPU6050_RA_YA_OFFS_L_TC     0x09 
.................... #define MPU6050_RA_ZA_OFFS_H        0x0A  
.................... #define MPU6050_RA_ZA_OFFS_L_TC     0x0B 
.................... #define MPU6050_RA_XG_OFFS_USRH     0x13  
.................... #define MPU6050_RA_XG_OFFS_USRL     0x14 
.................... #define MPU6050_RA_YG_OFFS_USRH     0x15  
.................... #define MPU6050_RA_YG_OFFS_USRL     0x16 
.................... #define MPU6050_RA_ZG_OFFS_USRH     0x17  
.................... #define MPU6050_RA_ZG_OFFS_USRL     0x18 
.................... #define MPU6050_RA_SMPLRT_DIV       0x19 
.................... #define MPU6050_RA_CONFIG           0x1A 
.................... #define MPU6050_RA_GYRO_CONFIG      0x1B 
.................... #define MPU6050_RA_ACCEL_CONFIG     0x1C 
.................... #define MPU6050_RA_FF_THR           0x1D 
.................... #define MPU6050_RA_FF_DUR           0x1E 
.................... #define MPU6050_RA_MOT_THR          0x1F 
.................... #define MPU6050_RA_MOT_DUR          0x20 
.................... #define MPU6050_RA_ZRMOT_THR        0x21 
.................... #define MPU6050_RA_ZRMOT_DUR        0x22 
.................... #define MPU6050_RA_FIFO_EN          0x23 
.................... #define MPU6050_RA_I2C_MST_CTRL     0x24 
.................... #define MPU6050_RA_I2C_SLV0_ADDR    0x25 
.................... #define MPU6050_RA_I2C_SLV0_REG     0x26 
.................... #define MPU6050_RA_I2C_SLV0_CTRL    0x27 
.................... #define MPU6050_RA_I2C_SLV1_ADDR    0x28 
.................... #define MPU6050_RA_I2C_SLV1_REG     0x29 
.................... #define MPU6050_RA_I2C_SLV1_CTRL    0x2A 
.................... #define MPU6050_RA_I2C_SLV2_ADDR    0x2B 
.................... #define MPU6050_RA_I2C_SLV2_REG     0x2C 
.................... #define MPU6050_RA_I2C_SLV2_CTRL    0x2D 
.................... #define MPU6050_RA_I2C_SLV3_ADDR    0x2E 
.................... #define MPU6050_RA_I2C_SLV3_REG     0x2F 
.................... #define MPU6050_RA_I2C_SLV3_CTRL    0x30 
.................... #define MPU6050_RA_I2C_SLV4_ADDR    0x31 
.................... #define MPU6050_RA_I2C_SLV4_REG     0x32 
.................... #define MPU6050_RA_I2C_SLV4_DO      0x33 
.................... #define MPU6050_RA_I2C_SLV4_CTRL    0x34 
.................... #define MPU6050_RA_I2C_SLV4_DI      0x35 
.................... #define MPU6050_RA_I2C_MST_STATUS   0x36 
.................... #define MPU6050_RA_INT_PIN_CFG      0x37 
.................... #define MPU6050_RA_INT_ENABLE       0x38 
.................... #define MPU6050_RA_DMP_INT_STATUS   0x39 
.................... #define MPU6050_RA_INT_STATUS       0x3A 
.................... #define MPU6050_RA_ACCEL_XOUT_H     0x3B 
.................... #define MPU6050_RA_ACCEL_XOUT_L     0x3C 
.................... #define MPU6050_RA_ACCEL_YOUT_H     0x3D 
.................... #define MPU6050_RA_ACCEL_YOUT_L     0x3E 
.................... #define MPU6050_RA_ACCEL_ZOUT_H     0x3F 
.................... #define MPU6050_RA_ACCEL_ZOUT_L     0x40 
.................... #define MPU6050_RA_TEMP_OUT_H       0x41 
.................... #define MPU6050_RA_TEMP_OUT_L       0x42 
.................... #define MPU6050_RA_GYRO_XOUT_H      0x43 
.................... #define MPU6050_RA_GYRO_XOUT_L      0x44 
.................... #define MPU6050_RA_GYRO_YOUT_H      0x45 
.................... #define MPU6050_RA_GYRO_YOUT_L      0x46 
.................... #define MPU6050_RA_GYRO_ZOUT_H      0x47 
.................... #define MPU6050_RA_GYRO_ZOUT_L      0x48 
.................... #define MPU6050_RA_EXT_SENS_DATA_00 0x49 
.................... #define MPU6050_RA_EXT_SENS_DATA_01 0x4A 
.................... #define MPU6050_RA_EXT_SENS_DATA_02 0x4B 
.................... #define MPU6050_RA_EXT_SENS_DATA_03 0x4C 
.................... #define MPU6050_RA_EXT_SENS_DATA_04 0x4D 
.................... #define MPU6050_RA_EXT_SENS_DATA_05 0x4E 
.................... #define MPU6050_RA_EXT_SENS_DATA_06 0x4F 
.................... #define MPU6050_RA_EXT_SENS_DATA_07 0x50 
.................... #define MPU6050_RA_EXT_SENS_DATA_08 0x51 
.................... #define MPU6050_RA_EXT_SENS_DATA_09 0x52 
.................... #define MPU6050_RA_EXT_SENS_DATA_10 0x53 
.................... #define MPU6050_RA_EXT_SENS_DATA_11 0x54 
.................... #define MPU6050_RA_EXT_SENS_DATA_12 0x55 
.................... #define MPU6050_RA_EXT_SENS_DATA_13 0x56 
.................... #define MPU6050_RA_EXT_SENS_DATA_14 0x57 
.................... #define MPU6050_RA_EXT_SENS_DATA_15 0x58 
.................... #define MPU6050_RA_EXT_SENS_DATA_16 0x59 
.................... #define MPU6050_RA_EXT_SENS_DATA_17 0x5A 
.................... #define MPU6050_RA_EXT_SENS_DATA_18 0x5B 
.................... #define MPU6050_RA_EXT_SENS_DATA_19 0x5C 
.................... #define MPU6050_RA_EXT_SENS_DATA_20 0x5D 
.................... #define MPU6050_RA_EXT_SENS_DATA_21 0x5E 
.................... #define MPU6050_RA_EXT_SENS_DATA_22 0x5F 
.................... #define MPU6050_RA_EXT_SENS_DATA_23 0x60 
.................... #define MPU6050_RA_MOT_DETECT_STATUS    0x61 
.................... #define MPU6050_RA_I2C_SLV0_DO      0x63 
.................... #define MPU6050_RA_I2C_SLV1_DO      0x64 
.................... #define MPU6050_RA_I2C_SLV2_DO      0x65 
.................... #define MPU6050_RA_I2C_SLV3_DO      0x66 
.................... #define MPU6050_RA_I2C_MST_DELAY_CTRL   0x67 
.................... #define MPU6050_RA_SIGNAL_PATH_RESET    0x68 
.................... #define MPU6050_RA_MOT_DETECT_CTRL      0x69 
.................... #define MPU6050_RA_USER_CTRL        0x6A 
.................... #define MPU6050_RA_PWR_MGMT_1       0x6B 
.................... #define MPU6050_RA_PWR_MGMT_2       0x6C 
.................... #define MPU6050_RA_BANK_SEL         0x6D 
.................... #define MPU6050_RA_MEM_START_ADDR   0x6E 
.................... #define MPU6050_RA_MEM_R_W          0x6F 
.................... #define MPU6050_RA_DMP_CFG_1        0x70 
.................... #define MPU6050_RA_DMP_CFG_2        0x71 
.................... #define MPU6050_RA_FIFO_COUNTH      0x72 
.................... #define MPU6050_RA_FIFO_COUNTL      0x73 
.................... #define MPU6050_RA_FIFO_R_W         0x74 
.................... #define MPU6050_RA_WHO_AM_I         0x75 
....................  
.................... #device ADC=10 *=16 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
*
0438:  CLRF   72
0439:  CLRF   71
043A:  CLRF   70
043B:  MOVLW  7F
043C:  MOVWF  6F
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
043D:  MOVLW  7E
043E:  BSF    03.5
043F:  MOVWF  20
0440:  MOVLW  80
0441:  MOVWF  21
0442:  CLRF   22
0443:  CLRF   23
0444:  MOVLW  7A
0445:  MOVWF  24
0446:  MOVLW  2A
0447:  MOVWF  25
0448:  MOVLW  AA
0449:  MOVWF  26
044A:  MOVLW  A3
044B:  MOVWF  27
044C:  MOVLW  75
044D:  MOVWF  28
044E:  MOVLW  B6
044F:  MOVWF  29
0450:  MOVLW  09
0451:  MOVWF  2A
0452:  MOVLW  B4
0453:  MOVWF  2B
0454:  MOVLW  6F
0455:  MOVWF  2C
0456:  MOVLW  4F
0457:  MOVWF  2D
0458:  MOVLW  B6
0459:  MOVWF  2E
045A:  MOVLW  AA
045B:  MOVWF  2F
045C:  MOVLW  69
045D:  MOVWF  30
045E:  MOVLW  8B
045F:  MOVWF  31
0460:  MOVLW  F6
0461:  MOVWF  32
0462:  MOVLW  E8
0463:  MOVWF  33
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
0464:  BCF    03.5
0465:  MOVF   66,W
0466:  BSF    03.5
0467:  MOVWF  37
0468:  BCF    03.5
0469:  MOVF   65,W
046A:  BSF    03.5
046B:  MOVWF  36
046C:  BCF    03.5
046D:  MOVF   64,W
046E:  BSF    03.5
046F:  MOVWF  35
0470:  BCF    03.5
0471:  MOVF   63,W
0472:  BSF    03.5
0473:  MOVWF  34
0474:  CLRF   3B
0475:  CLRF   3A
0476:  CLRF   39
0477:  CLRF   38
0478:  BCF    03.5
0479:  CALL   2B1
047A:  BTFSS  03.0
047B:  GOTO   47F
047C:  MOVF   64,W
047D:  XORLW  80
047E:  MOVWF  64
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
047F:  MOVF   66,W
0480:  BSF    03.5
0481:  MOVWF  3B
0482:  BCF    03.5
0483:  MOVF   65,W
0484:  BSF    03.5
0485:  MOVWF  3A
0486:  BCF    03.5
0487:  MOVF   64,W
0488:  BSF    03.5
0489:  MOVWF  39
048A:  BCF    03.5
048B:  MOVF   63,W
048C:  BSF    03.5
048D:  MOVWF  38
048E:  MOVLW  83
048F:  MOVWF  3F
0490:  MOVLW  F9
0491:  MOVWF  3E
0492:  MOVLW  22
0493:  MOVWF  3D
0494:  MOVLW  7E
0495:  MOVWF  3C
0496:  BCF    03.5
0497:  CALL   06D
0498:  MOVF   7A,W
0499:  BSF    03.5
049A:  MOVWF  37
049B:  MOVF   79,W
049C:  MOVWF  36
049D:  MOVF   78,W
049E:  MOVWF  35
049F:  MOVF   77,W
04A0:  MOVWF  34
*
04BF:  MOVF   78,W
04C0:  MOVWF  73
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
04C1:  BCF    03.5
04C2:  MOVF   66,W
04C3:  BSF    03.5
04C4:  MOVWF  3B
04C5:  BCF    03.5
04C6:  MOVF   65,W
04C7:  BSF    03.5
04C8:  MOVWF  3A
04C9:  BCF    03.5
04CA:  MOVF   64,W
04CB:  BSF    03.5
04CC:  MOVWF  39
04CD:  BCF    03.5
04CE:  MOVF   63,W
04CF:  BSF    03.5
04D0:  MOVWF  38
04D1:  MOVLW  83
04D2:  MOVWF  3F
04D3:  MOVLW  F9
04D4:  MOVWF  3E
04D5:  MOVLW  22
04D6:  MOVWF  3D
04D7:  MOVLW  7E
04D8:  MOVWF  3C
04D9:  BCF    03.5
04DA:  CALL   06D
04DB:  MOVF   7A,W
04DC:  BSF    03.5
04DD:  MOVWF  37
04DE:  MOVF   79,W
04DF:  MOVWF  36
04E0:  MOVF   78,W
04E1:  MOVWF  35
04E2:  MOVF   77,W
04E3:  MOVWF  34
04E4:  CLRF   39
04E5:  MOVF   73,W
04E6:  MOVWF  38
04E7:  BCF    03.5
04E8:  CALL   04E
04E9:  BSF    03.1
04EA:  BSF    03.5
04EB:  MOVF   37,W
04EC:  MOVWF  3B
04ED:  MOVF   36,W
04EE:  MOVWF  3A
04EF:  MOVF   35,W
04F0:  MOVWF  39
04F1:  MOVF   34,W
04F2:  MOVWF  38
04F3:  MOVF   7A,W
04F4:  MOVWF  3F
04F5:  MOVF   79,W
04F6:  MOVWF  3E
04F7:  MOVF   78,W
04F8:  MOVWF  3D
04F9:  MOVF   77,W
04FA:  MOVWF  3C
04FB:  BCF    03.5
04FC:  CALL   2F2
04FD:  MOVF   7A,W
04FE:  MOVWF  7E
04FF:  MOVF   79,W
0500:  MOVWF  7D
0501:  MOVF   78,W
0502:  MOVWF  7C
0503:  MOVF   77,W
0504:  MOVWF  7B
....................    quad = quad % 4;                    // quadrant (0 to 3) 
0505:  MOVLW  03
0506:  ANDWF  73,F
....................  
....................    if (quad == 0 || quad == 2) 
0507:  MOVF   73,F
0508:  BTFSC  03.2
0509:  GOTO   50E
050A:  MOVF   73,W
050B:  SUBLW  02
050C:  BTFSS  03.2
050D:  GOTO   52A
....................       t = frac * PI_DIV_BY_TWO; 
050E:  MOVF   7E,W
050F:  BSF    03.5
0510:  MOVWF  3B
0511:  MOVF   7D,W
0512:  MOVWF  3A
0513:  MOVF   7C,W
0514:  MOVWF  39
0515:  MOVF   7B,W
0516:  MOVWF  38
0517:  MOVLW  DB
0518:  MOVWF  3F
0519:  MOVLW  0F
051A:  MOVWF  3E
051B:  MOVLW  49
051C:  MOVWF  3D
051D:  MOVLW  7F
051E:  MOVWF  3C
051F:  BCF    03.5
0520:  CALL   06D
0521:  MOVF   7A,W
0522:  MOVWF  6E
0523:  MOVF   79,W
0524:  MOVWF  6D
0525:  MOVF   78,W
0526:  MOVWF  6C
0527:  MOVF   77,W
0528:  MOVWF  6B
0529:  GOTO   595
....................    else if (quad == 1) 
052A:  DECFSZ 73,W
052B:  GOTO   561
....................       t = (1-frac) * PI_DIV_BY_TWO; 
052C:  BSF    03.1
052D:  BSF    03.5
052E:  CLRF   3B
052F:  CLRF   3A
0530:  CLRF   39
0531:  MOVLW  7F
0532:  MOVWF  38
0533:  MOVF   7E,W
0534:  MOVWF  3F
0535:  MOVF   7D,W
0536:  MOVWF  3E
0537:  MOVF   7C,W
0538:  MOVWF  3D
0539:  MOVF   7B,W
053A:  MOVWF  3C
053B:  BCF    03.5
053C:  CALL   2F2
053D:  MOVF   7A,W
053E:  BSF    03.5
053F:  MOVWF  37
0540:  MOVF   79,W
0541:  MOVWF  36
0542:  MOVF   78,W
0543:  MOVWF  35
0544:  MOVF   77,W
0545:  MOVWF  34
0546:  MOVF   37,W
0547:  MOVWF  3B
0548:  MOVF   36,W
0549:  MOVWF  3A
054A:  MOVF   35,W
054B:  MOVWF  39
054C:  MOVF   34,W
054D:  MOVWF  38
054E:  MOVLW  DB
054F:  MOVWF  3F
0550:  MOVLW  0F
0551:  MOVWF  3E
0552:  MOVLW  49
0553:  MOVWF  3D
0554:  MOVLW  7F
0555:  MOVWF  3C
0556:  BCF    03.5
0557:  CALL   06D
0558:  MOVF   7A,W
0559:  MOVWF  6E
055A:  MOVF   79,W
055B:  MOVWF  6D
055C:  MOVF   78,W
055D:  MOVWF  6C
055E:  MOVF   77,W
055F:  MOVWF  6B
0560:  GOTO   595
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
0561:  BSF    03.1
0562:  MOVF   7E,W
0563:  BSF    03.5
0564:  MOVWF  3B
0565:  MOVF   7D,W
0566:  MOVWF  3A
0567:  MOVF   7C,W
0568:  MOVWF  39
0569:  MOVF   7B,W
056A:  MOVWF  38
056B:  CLRF   3F
056C:  CLRF   3E
056D:  CLRF   3D
056E:  MOVLW  7F
056F:  MOVWF  3C
0570:  BCF    03.5
0571:  CALL   2F2
0572:  MOVF   7A,W
0573:  BSF    03.5
0574:  MOVWF  37
0575:  MOVF   79,W
0576:  MOVWF  36
0577:  MOVF   78,W
0578:  MOVWF  35
0579:  MOVF   77,W
057A:  MOVWF  34
057B:  MOVF   37,W
057C:  MOVWF  3B
057D:  MOVF   36,W
057E:  MOVWF  3A
057F:  MOVF   35,W
0580:  MOVWF  39
0581:  MOVF   34,W
0582:  MOVWF  38
0583:  MOVLW  DB
0584:  MOVWF  3F
0585:  MOVLW  0F
0586:  MOVWF  3E
0587:  MOVLW  49
0588:  MOVWF  3D
0589:  MOVLW  7F
058A:  MOVWF  3C
058B:  BCF    03.5
058C:  CALL   06D
058D:  MOVF   7A,W
058E:  MOVWF  6E
058F:  MOVF   79,W
0590:  MOVWF  6D
0591:  MOVF   78,W
0592:  MOVWF  6C
0593:  MOVF   77,W
0594:  MOVWF  6B
....................  
....................    y = 1.0; 
0595:  CLRF   6A
0596:  CLRF   69
0597:  CLRF   68
0598:  MOVLW  7F
0599:  MOVWF  67
....................    t = t * t; 
059A:  MOVF   6E,W
059B:  BSF    03.5
059C:  MOVWF  3B
059D:  BCF    03.5
059E:  MOVF   6D,W
059F:  BSF    03.5
05A0:  MOVWF  3A
05A1:  BCF    03.5
05A2:  MOVF   6C,W
05A3:  BSF    03.5
05A4:  MOVWF  39
05A5:  BCF    03.5
05A6:  MOVF   6B,W
05A7:  BSF    03.5
05A8:  MOVWF  38
05A9:  BCF    03.5
05AA:  MOVF   6E,W
05AB:  BSF    03.5
05AC:  MOVWF  3F
05AD:  BCF    03.5
05AE:  MOVF   6D,W
05AF:  BSF    03.5
05B0:  MOVWF  3E
05B1:  BCF    03.5
05B2:  MOVF   6C,W
05B3:  BSF    03.5
05B4:  MOVWF  3D
05B5:  BCF    03.5
05B6:  MOVF   6B,W
05B7:  BSF    03.5
05B8:  MOVWF  3C
05B9:  BCF    03.5
05BA:  CALL   06D
05BB:  MOVF   7A,W
05BC:  MOVWF  6E
05BD:  MOVF   79,W
05BE:  MOVWF  6D
05BF:  MOVF   78,W
05C0:  MOVWF  6C
05C1:  MOVF   77,W
05C2:  MOVWF  6B
....................    for (i = 0; i <= 4; i++) 
05C3:  CLRF   74
05C4:  MOVF   74,W
05C5:  SUBLW  04
05C6:  BTFSS  03.0
05C7:  GOTO   648
....................    { 
....................       t2 = t2 * t; 
05C8:  MOVF   72,W
05C9:  BSF    03.5
05CA:  MOVWF  3B
05CB:  MOVF   71,W
05CC:  MOVWF  3A
05CD:  MOVF   70,W
05CE:  MOVWF  39
05CF:  BCF    03.5
05D0:  MOVF   6F,W
05D1:  BSF    03.5
05D2:  MOVWF  38
05D3:  BCF    03.5
05D4:  MOVF   6E,W
05D5:  BSF    03.5
05D6:  MOVWF  3F
05D7:  BCF    03.5
05D8:  MOVF   6D,W
05D9:  BSF    03.5
05DA:  MOVWF  3E
05DB:  BCF    03.5
05DC:  MOVF   6C,W
05DD:  BSF    03.5
05DE:  MOVWF  3D
05DF:  BCF    03.5
05E0:  MOVF   6B,W
05E1:  BSF    03.5
05E2:  MOVWF  3C
05E3:  BCF    03.5
05E4:  CALL   06D
05E5:  MOVF   7A,W
05E6:  MOVWF  72
05E7:  MOVF   79,W
05E8:  MOVWF  71
05E9:  MOVF   78,W
05EA:  MOVWF  70
05EB:  MOVF   77,W
05EC:  MOVWF  6F
....................       y = y + p[i] * t2; 
05ED:  RLF    74,W
05EE:  MOVWF  77
05EF:  RLF    77,F
05F0:  MOVLW  FC
05F1:  ANDWF  77,F
05F2:  MOVF   77,W
05F3:  ADDLW  A0
05F4:  MOVWF  04
05F5:  BCF    03.7
05F6:  MOVF   00,W
05F7:  BSF    03.5
05F8:  MOVWF  34
05F9:  INCF   04,F
05FA:  MOVF   00,W
05FB:  MOVWF  35
05FC:  INCF   04,F
05FD:  MOVF   00,W
05FE:  MOVWF  36
05FF:  INCF   04,F
0600:  MOVF   00,W
0601:  MOVWF  37
0602:  MOVWF  3B
0603:  MOVF   36,W
0604:  MOVWF  3A
0605:  MOVF   35,W
0606:  MOVWF  39
0607:  MOVF   34,W
0608:  MOVWF  38
0609:  MOVF   72,W
060A:  MOVWF  3F
060B:  MOVF   71,W
060C:  MOVWF  3E
060D:  MOVF   70,W
060E:  MOVWF  3D
060F:  BCF    03.5
0610:  MOVF   6F,W
0611:  BSF    03.5
0612:  MOVWF  3C
0613:  BCF    03.5
0614:  CALL   06D
0615:  BSF    03.5
0616:  CLRF   35
0617:  MOVF   04,W
0618:  MOVWF  34
0619:  BCF    35.0
061A:  BTFSC  03.7
061B:  BSF    35.0
061C:  BCF    03.1
061D:  BCF    03.5
061E:  MOVF   6A,W
061F:  BSF    03.5
0620:  MOVWF  3B
0621:  BCF    03.5
0622:  MOVF   69,W
0623:  BSF    03.5
0624:  MOVWF  3A
0625:  BCF    03.5
0626:  MOVF   68,W
0627:  BSF    03.5
0628:  MOVWF  39
0629:  BCF    03.5
062A:  MOVF   67,W
062B:  BSF    03.5
062C:  MOVWF  38
062D:  MOVF   7A,W
062E:  MOVWF  3F
062F:  MOVF   79,W
0630:  MOVWF  3E
0631:  MOVF   78,W
0632:  MOVWF  3D
0633:  MOVF   77,W
0634:  MOVWF  3C
0635:  BCF    03.5
0636:  CALL   2F2
0637:  BSF    03.5
0638:  MOVF   34,W
0639:  MOVWF  04
063A:  BCF    03.7
063B:  BTFSC  35.0
063C:  BSF    03.7
063D:  MOVF   7A,W
063E:  BCF    03.5
063F:  MOVWF  6A
0640:  MOVF   79,W
0641:  MOVWF  69
0642:  MOVF   78,W
0643:  MOVWF  68
0644:  MOVF   77,W
0645:  MOVWF  67
0646:  INCF   74,F
0647:  GOTO   5C4
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
0648:  MOVF   73,W
0649:  SUBLW  02
064A:  BTFSC  03.2
064B:  GOTO   64E
064C:  DECFSZ 73,W
064D:  GOTO   651
....................       y = -y;  // correct sign 
064E:  MOVF   68,W
064F:  XORLW  80
0650:  MOVWF  68
....................  
....................    return (y); 
0651:  MOVF   67,W
0652:  MOVWF  77
0653:  MOVF   68,W
0654:  MOVWF  78
0655:  MOVF   69,W
0656:  MOVWF  79
0657:  MOVF   6A,W
0658:  MOVWF  7A
0659:  RETURN
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
*
0693:  BSF    03.1
0694:  MOVF   5E,W
0695:  BSF    03.5
0696:  MOVWF  3B
0697:  BCF    03.5
0698:  MOVF   5D,W
0699:  BSF    03.5
069A:  MOVWF  3A
069B:  BCF    03.5
069C:  MOVF   5C,W
069D:  BSF    03.5
069E:  MOVWF  39
069F:  BCF    03.5
06A0:  MOVF   5B,W
06A1:  BSF    03.5
06A2:  MOVWF  38
06A3:  MOVLW  DB
06A4:  MOVWF  3F
06A5:  MOVLW  0F
06A6:  MOVWF  3E
06A7:  MOVLW  49
06A8:  MOVWF  3D
06A9:  MOVLW  7F
06AA:  MOVWF  3C
06AB:  BCF    03.5
06AC:  CALL   2F2
06AD:  MOVF   7A,W
06AE:  MOVWF  62
06AF:  MOVF   79,W
06B0:  MOVWF  61
06B1:  MOVF   78,W
06B2:  MOVWF  60
06B3:  MOVF   77,W
06B4:  MOVWF  5F
06B5:  MOVF   7A,W
06B6:  MOVWF  66
06B7:  MOVF   79,W
06B8:  MOVWF  65
06B9:  MOVF   78,W
06BA:  MOVWF  64
06BB:  MOVF   77,W
06BC:  MOVWF  63
06BD:  CALL   438
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
*
065A:  MOVF   52,W
065B:  MOVWF  66
065C:  MOVF   51,W
065D:  MOVWF  65
065E:  MOVF   50,W
065F:  MOVWF  64
0660:  MOVF   4F,W
0661:  MOVWF  63
0662:  CALL   438
0663:  MOVF   7A,W
0664:  MOVWF  56
0665:  MOVF   79,W
0666:  MOVWF  55
0667:  MOVF   78,W
0668:  MOVWF  54
0669:  MOVF   77,W
066A:  MOVWF  53
....................    if (c == 0.0) 
066B:  MOVF   56,W
066C:  BSF    03.5
066D:  MOVWF  37
066E:  BCF    03.5
066F:  MOVF   55,W
0670:  BSF    03.5
0671:  MOVWF  36
0672:  BCF    03.5
0673:  MOVF   54,W
0674:  BSF    03.5
0675:  MOVWF  35
0676:  BCF    03.5
0677:  MOVF   53,W
0678:  BSF    03.5
0679:  MOVWF  34
067A:  CLRF   3B
067B:  CLRF   3A
067C:  CLRF   39
067D:  CLRF   38
067E:  BCF    03.5
067F:  CALL   2B1
0680:  BTFSS  03.2
0681:  GOTO   68B
....................       return (1.0e+36); 
0682:  MOVLW  F6
0683:  MOVWF  77
0684:  MOVLW  40
0685:  MOVWF  78
0686:  MOVLW  97
0687:  MOVWF  79
0688:  MOVLW  CE
0689:  MOVWF  7A
068A:  GOTO   6D7
....................  
....................    s = sin(x); 
068B:  MOVF   52,W
068C:  MOVWF  5E
068D:  MOVF   51,W
068E:  MOVWF  5D
068F:  MOVF   50,W
0690:  MOVWF  5C
0691:  MOVF   4F,W
0692:  MOVWF  5B
*
06BE:  MOVF   7A,W
06BF:  MOVWF  5A
06C0:  MOVF   79,W
06C1:  MOVWF  59
06C2:  MOVF   78,W
06C3:  MOVWF  58
06C4:  MOVF   77,W
06C5:  MOVWF  57
....................    return(s/c); 
06C6:  MOVF   5A,W
06C7:  MOVWF  5E
06C8:  MOVF   59,W
06C9:  MOVWF  5D
06CA:  MOVF   58,W
06CB:  MOVWF  5C
06CC:  MOVF   57,W
06CD:  MOVWF  5B
06CE:  MOVF   56,W
06CF:  MOVWF  62
06D0:  MOVF   55,W
06D1:  MOVWF  61
06D2:  MOVF   54,W
06D3:  MOVWF  60
06D4:  MOVF   53,W
06D5:  MOVWF  5F
06D6:  CALL   0E4
06D7:  BSF    0A.3
06D8:  BCF    0A.4
06D9:  GOTO   363 (RETURN)
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... #FUSES NOWDT //No Watch Dog Timer 
.................... #FUSES PUT //Power Up Timer 
.................... #FUSES NOMCLR //Master Clear pin not enabled 
.................... #FUSES NOPROTECT //Code not protected from reading 
.................... #FUSES NOCPD //No EE protection 
.................... #FUSES BROWNOUT //Brownout reset 
.................... #FUSES IESO //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG //No Debug mode for ICD 
.................... #FUSES NOWRT //Program memory not write protected 
.................... #FUSES BORV40 //Brodddddwnout reset at 4.0V 
.................... #FUSES RESERVED //Used to set the reserved FUSE bits 
.................... #FUSES INTRC_IO  
....................  
.................... #use delay(clock=8M) 
*
003A:  MOVLW  50
003B:  MOVWF  04
003C:  BCF    03.7
003D:  MOVF   00,W
003E:  BTFSC  03.2
003F:  GOTO   04D
0040:  MOVLW  02
0041:  MOVWF  78
0042:  CLRF   77
0043:  DECFSZ 77,F
0044:  GOTO   043
0045:  DECFSZ 78,F
0046:  GOTO   042
0047:  MOVLW  97
0048:  MOVWF  77
0049:  DECFSZ 77,F
004A:  GOTO   049
004B:  DECFSZ 00,F
004C:  GOTO   040
004D:  RETURN
....................  
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #use i2c(MASTER, I2C1, FORCE_HW) 
*
0251:  BCF    14.7
0252:  BCF    0C.3
0253:  MOVF   55,W
0254:  MOVWF  13
0255:  MOVLW  02
0256:  BTFSC  14.7
0257:  GOTO   25F
0258:  BTFSS  0C.3
0259:  GOTO   258
025A:  MOVLW  00
025B:  BSF    03.5
025C:  BTFSC  11.6
025D:  MOVLW  01
025E:  BCF    03.5
025F:  MOVWF  78
0260:  RETURN
*
06DA:  BCF    14.6
06DB:  BSF    03.5
06DC:  BSF    11.3
06DD:  BTFSC  11.3
06DE:  GOTO   6DD
06DF:  BTFSC  77.0
06E0:  BCF    11.5
06E1:  BTFSS  77.0
06E2:  BSF    11.5
06E3:  BSF    11.4
06E4:  BTFSC  11.4
06E5:  GOTO   6E4
06E6:  BCF    03.5
06E7:  MOVF   13,W
06E8:  MOVWF  78
06E9:  RETURN
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
.................... #define SLAVE_ADDRESS  0xB0 
.................... #define DISPLAY_ADDRESS 0xB4 
.................... #define REGISTER_SIZE  8    
.................... #define DISPLAY_CMD_SEND_VALUE 2 
.................... #define DISPLAY_CMD_SEND_LONG_TEXT 5 
.................... #define DISPLAY_CMD_CLS 6 
.................... #define DISPLAY_CMD_SETPOS 8 
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... int16 rotaryR; 
.................... float degree,distance,tall,rad; 
....................  
.................... void displayLongText(char* text) { 
....................  
....................    int i ; 
....................    i2c_start(); 
*
0288:  BSF    03.5
0289:  BSF    11.0
028A:  BTFSC  11.0
028B:  GOTO   28A
....................    i2c_write(DISPLAY_ADDRESS); 
028C:  MOVLW  B4
028D:  BCF    03.5
028E:  MOVWF  55
028F:  CALL   251
....................    i2c_write(DISPLAY_CMD_SEND_LONG_TEXT); 
0290:  MOVLW  05
0291:  MOVWF  55
0292:  CALL   251
....................  
....................    for(i=0;text[i]!='\0';i++) 
0293:  CLRF   53
0294:  MOVF   53,W
0295:  ADDWF  51,W
0296:  MOVWF  04
0297:  BCF    03.7
0298:  BTFSC  52.0
0299:  BSF    03.7
029A:  MOVF   00,F
029B:  BTFSC  03.2
029C:  GOTO   2A9
....................    { 
....................       i2c_write(text[i]); 
029D:  MOVF   53,W
029E:  ADDWF  51,W
029F:  MOVWF  04
02A0:  BCF    03.7
02A1:  BTFSC  52.0
02A2:  BSF    03.7
02A3:  MOVF   00,W
02A4:  MOVWF  54
02A5:  MOVWF  55
02A6:  CALL   251
02A7:  INCF   53,F
02A8:  GOTO   294
....................  
....................    } 
....................    i2c_write('\0'); 
02A9:  CLRF   55
02AA:  CALL   251
....................    i2c_stop(); 
02AB:  BSF    03.5
02AC:  BSF    11.2
02AD:  BTFSC  11.2
02AE:  GOTO   2AD
02AF:  BCF    03.5
02B0:  RETURN
....................  
.................... } 
....................  
.................... void clearDisplay(){ 
....................  
....................    i2c_start(); 
*
0261:  BSF    03.5
0262:  BSF    11.0
0263:  BTFSC  11.0
0264:  GOTO   263
....................    i2c_write(DISPLAY_ADDRESS); 
0265:  MOVLW  B4
0266:  BCF    03.5
0267:  MOVWF  55
0268:  CALL   251
....................    i2c_write(DISPLAY_CMD_CLS); 
0269:  MOVLW  06
026A:  MOVWF  55
026B:  CALL   251
....................    i2c_stop(); 
026C:  BSF    03.5
026D:  BSF    11.2
026E:  BTFSC  11.2
026F:  GOTO   26E
0270:  BCF    03.5
0271:  RETURN
.................... } 
....................  
.................... void setDisplayPos(int pos){ 
....................    i2c_start(); 
0272:  BSF    03.5
0273:  BSF    11.0
0274:  BTFSC  11.0
0275:  GOTO   274
....................    i2c_write(DISPLAY_ADDRESS); 
0276:  MOVLW  B4
0277:  BCF    03.5
0278:  MOVWF  55
0279:  CALL   251
....................    i2c_write(DISPLAY_CMD_SETPOS); 
027A:  MOVLW  08
027B:  MOVWF  55
027C:  CALL   251
....................    i2c_write(pos); 
027D:  MOVF   4F,W
027E:  MOVWF  55
027F:  CALL   251
....................    i2c_write('\0'); 
0280:  CLRF   55
0281:  CALL   251
....................    i2c_stop(); 
0282:  BSF    03.5
0283:  BSF    11.2
0284:  BTFSC  11.2
0285:  GOTO   284
0286:  BCF    03.5
0287:  RETURN
.................... } 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... typedef struct 
.................... { 
....................  struct 
....................  { 
.................... int16 X; 
....................   int16 Y; 
....................    int16 Z; 
....................  }Accel; 
....................  int16 Temperatura; 
....................  struct 
....................  { 
....................  int16 X; 
....................   int16 Y; 
....................   int16 Z; 
....................  }Gyro; 
.................... }MPU6050; 
.................... //// test mpu6050 
.................... void MPU6050_init(){ 
....................  
....................     i2c_start(); 
....................     i2c_write( MPU6050_ADDRESS ); 
....................     i2c_write( MPU6050_RA_PWR_MGMT_1 ); 
....................     i2c_write( 2 ); //Sleep OFF 
....................     i2c_write( 0 );  
....................     i2c_stop(); 
....................     i2c_start(); 
....................     i2c_write( MPU6050_ADDRESS ); 
....................     i2c_write( MPU6050_RA_GYRO_CONFIG ); 
....................     i2c_write( 0 ); //gyro_config, +-250 ?/s 
....................     i2c_write( 0 ); //accel_config +-2g 
....................     i2c_stop(); 
....................  
.................... } 
.................... int16 MPU6050_Read( ) 
.................... { 
....................  i2c_start(); 
*
06EA:  BSF    03.5
06EB:  BSF    11.0
06EC:  BTFSC  11.0
06ED:  GOTO   6EC
....................  i2c_write( MPU6050_ADDRESS ); 
06EE:  MOVLW  D0
06EF:  BCF    03.5
06F0:  MOVWF  55
06F1:  CALL   251
....................  i2c_write( MPU6050_RA_ACCEL_XOUT_H ); 
06F2:  MOVLW  3B
06F3:  MOVWF  55
06F4:  CALL   251
....................  i2c_start(); 
06F5:  BSF    03.5
06F6:  BSF    11.1
06F7:  BTFSC  11.1
06F8:  GOTO   6F7
....................  i2c_write( MPU6050_ADDRESS | 1 ); 
06F9:  MOVLW  D1
06FA:  BCF    03.5
06FB:  MOVWF  55
06FC:  CALL   251
....................  int16 x = ( i2c_read(1) << 8 ) | i2c_read(0); 
06FD:  MOVLW  01
06FE:  MOVWF  77
06FF:  CALL   6DA
0700:  CLRF   51
0701:  CLRF   77
0702:  CALL   6DA
0703:  MOVF   78,W
0704:  IORWF  51,W
0705:  MOVWF  4F
0706:  CLRF   50
....................  
....................  i2c_stop(); 
0707:  BSF    03.5
0708:  BSF    11.2
0709:  BTFSC  11.2
070A:  GOTO   709
....................    return x; 
070B:  BCF    03.5
070C:  MOVF   4F,W
070D:  MOVWF  78
070E:  MOVF   50,W
070F:  MOVWF  79
0710:  BSF    0A.3
0711:  BCF    0A.4
0712:  GOTO   3D0 (RETURN)
.................... } 
....................  
.................... float distanceFromUltrasonic(){ 
....................  
....................    float distance; 
....................    output_high(PIN_C0); 
*
01AE:  BCF    20.0
01AF:  MOVF   20,W
01B0:  BSF    03.5
01B1:  MOVWF  07
01B2:  BCF    03.5
01B3:  BSF    07.0
....................    delay_us(10); 
01B4:  MOVLW  06
01B5:  MOVWF  77
01B6:  DECFSZ 77,F
01B7:  GOTO   1B6
01B8:  NOP
....................    output_low(PIN_C0); 
01B9:  BCF    20.0
01BA:  MOVF   20,W
01BB:  BSF    03.5
01BC:  MOVWF  07
01BD:  BCF    03.5
01BE:  BCF    07.0
....................     
....................    while(!input(PIN_C1)) {} 
01BF:  BSF    20.1
01C0:  MOVF   20,W
01C1:  BSF    03.5
01C2:  MOVWF  07
01C3:  BCF    03.5
01C4:  BTFSS  07.1
01C5:  GOTO   1BF
....................    set_timer1(0); 
01C6:  CLRF   0E
01C7:  CLRF   0F
01C8:  CLRF   0E
....................    while(input(PIN_C1)) { 
01C9:  BSF    20.1
01CA:  MOVF   20,W
01CB:  BSF    03.5
01CC:  MOVWF  07
01CD:  BCF    03.5
01CE:  BTFSC  07.1
01CF:  GOTO   1C9
....................    //if(get_timer1() >= 65534) return -1; 
....................    } 
....................    distance = get_timer1()*4*0.0005; //convert time to ms 
01D0:  MOVF   0F,W
01D1:  MOVWF  7A
01D2:  MOVF   0E,W
01D3:  MOVWF  77
01D4:  MOVF   0F,W
01D5:  SUBWF  7A,W
01D6:  BTFSS  03.2
01D7:  GOTO   1D0
01D8:  MOVF   77,W
01D9:  MOVWF  53
01DA:  MOVF   7A,W
01DB:  MOVWF  54
01DC:  RLF    53,F
01DD:  RLF    54,F
01DE:  RLF    53,F
01DF:  RLF    54,F
01E0:  MOVLW  FC
01E1:  ANDWF  53,F
01E2:  MOVF   54,W
01E3:  BSF    03.5
01E4:  MOVWF  39
01E5:  BCF    03.5
01E6:  MOVF   53,W
01E7:  BSF    03.5
01E8:  MOVWF  38
01E9:  BCF    03.5
01EA:  CALL   04E
01EB:  MOVF   7A,W
01EC:  BSF    03.5
01ED:  MOVWF  3B
01EE:  MOVF   79,W
01EF:  MOVWF  3A
01F0:  MOVF   78,W
01F1:  MOVWF  39
01F2:  MOVF   77,W
01F3:  MOVWF  38
01F4:  MOVLW  6F
01F5:  MOVWF  3F
01F6:  MOVLW  12
01F7:  MOVWF  3E
01F8:  MOVLW  03
01F9:  MOVWF  3D
01FA:  MOVLW  74
01FB:  MOVWF  3C
01FC:  BCF    03.5
01FD:  CALL   06D
01FE:  MOVF   7A,W
01FF:  MOVWF  52
0200:  MOVF   79,W
0201:  MOVWF  51
0202:  MOVF   78,W
0203:  MOVWF  50
0204:  MOVF   77,W
0205:  MOVWF  4F
....................  distance = distance *0.3497/* metre/ms*/  *100; // distance in cm 
0206:  MOVF   52,W
0207:  BSF    03.5
0208:  MOVWF  3B
0209:  BCF    03.5
020A:  MOVF   51,W
020B:  BSF    03.5
020C:  MOVWF  3A
020D:  BCF    03.5
020E:  MOVF   50,W
020F:  BSF    03.5
0210:  MOVWF  39
0211:  BCF    03.5
0212:  MOVF   4F,W
0213:  BSF    03.5
0214:  MOVWF  38
0215:  MOVLW  E1
0216:  MOVWF  3F
0217:  MOVLW  0B
0218:  MOVWF  3E
0219:  MOVLW  33
021A:  MOVWF  3D
021B:  MOVLW  7D
021C:  MOVWF  3C
021D:  BCF    03.5
021E:  CALL   06D
021F:  MOVF   7A,W
0220:  MOVWF  56
0221:  MOVF   79,W
0222:  MOVWF  55
0223:  MOVF   78,W
0224:  MOVWF  54
0225:  MOVF   77,W
0226:  MOVWF  53
0227:  MOVF   7A,W
0228:  BSF    03.5
0229:  MOVWF  3B
022A:  BCF    03.5
022B:  MOVF   79,W
022C:  BSF    03.5
022D:  MOVWF  3A
022E:  BCF    03.5
022F:  MOVF   78,W
0230:  BSF    03.5
0231:  MOVWF  39
0232:  BCF    03.5
0233:  MOVF   77,W
0234:  BSF    03.5
0235:  MOVWF  38
0236:  CLRF   3F
0237:  CLRF   3E
0238:  MOVLW  48
0239:  MOVWF  3D
023A:  MOVLW  85
023B:  MOVWF  3C
023C:  BCF    03.5
023D:  CALL   06D
023E:  MOVF   7A,W
023F:  MOVWF  52
0240:  MOVF   79,W
0241:  MOVWF  51
0242:  MOVF   78,W
0243:  MOVWF  50
0244:  MOVF   77,W
0245:  MOVWF  4F
....................  
....................        
....................    return distance ; 
0246:  MOVF   4F,W
0247:  MOVWF  77
0248:  MOVF   50,W
0249:  MOVWF  78
024A:  MOVF   51,W
024B:  MOVWF  79
024C:  MOVF   52,W
024D:  MOVWF  7A
024E:  BSF    0A.3
024F:  BCF    0A.4
0250:  GOTO   2FE (RETURN)
....................      
.................... } 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //READ DISTANCE ULTRASONIC 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... float setDistanceFromUltrasonic(){ 
....................    int16 time = 0; 
....................    output_low(PIN_C0); 
....................    delay_us(10); 
....................    output_high(PIN_C0); 
....................   // delay_ms(20); 
....................   // output_low(PIN_C0); 
....................    while(input(PIN_C1) == 0) 
....................    { 
....................      set_timer1(0); 
....................    } 
....................    while(input(PIN_C1) == 1) 
....................    {     
....................      time = get_timer1(); 
....................    } 
....................     
....................    float distance = time * 8*0.2 *0.001; //time in ms 
....................    distance *= 34.7867; // to cm 
....................    //printf("Distance(mm) from the light to Lens = %Lu\r\n", distance); 
....................    //setMaxCount(getDistanceToMove(distance)); 
....................    //delay_ms(1000); 
....................     return distance; 
.................... } 
....................  
....................   
....................  
....................  
.................... void main() { 
*
0A53:  MOVF   03,W
0A54:  ANDLW  1F
0A55:  MOVWF  03
0A56:  MOVLW  71
0A57:  BSF    03.5
0A58:  MOVWF  0F
0A59:  CLRF   10
0A5A:  MOVF   0F,W
0A5B:  BSF    03.6
0A5C:  BCF    07.3
0A5D:  MOVLW  0C
0A5E:  BCF    03.6
0A5F:  MOVWF  19
0A60:  MOVLW  A2
0A61:  MOVWF  18
0A62:  MOVLW  90
0A63:  BCF    03.5
0A64:  MOVWF  18
0A65:  MOVLW  FF
0A66:  MOVWF  20
0A67:  BSF    20.3
0A68:  MOVF   20,W
0A69:  BSF    03.5
0A6A:  MOVWF  07
0A6B:  BCF    03.5
0A6C:  BSF    20.4
0A6D:  MOVF   20,W
0A6E:  BSF    03.5
0A6F:  MOVWF  07
0A70:  MOVLW  13
0A71:  MOVWF  13
0A72:  MOVLW  28
0A73:  BCF    03.5
0A74:  MOVWF  14
0A75:  BSF    03.5
0A76:  BSF    14.7
0A77:  BCF    14.6
0A78:  BCF    03.5
0A79:  CLRF   34
0A7A:  CLRF   33
0A7B:  BSF    03.5
0A7C:  BSF    03.6
0A7D:  MOVF   09,W
0A7E:  ANDLW  C0
0A7F:  MOVWF  09
0A80:  BCF    03.6
0A81:  BCF    1F.4
0A82:  BCF    1F.5
0A83:  MOVLW  00
0A84:  BSF    03.6
0A85:  MOVWF  08
0A86:  BCF    03.5
0A87:  CLRF   07
0A88:  CLRF   08
0A89:  CLRF   09
0A8A:  BCF    03.7
....................     setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);  
0A8B:  MOVLW  35
0A8C:  BCF    03.6
0A8D:  MOVWF  10
....................      
....................     setup_adc_ports(sAN0);  
0A8E:  BSF    03.5
0A8F:  BSF    03.6
0A90:  MOVF   09,W
0A91:  ANDLW  C0
0A92:  MOVWF  09
0A93:  BCF    03.6
0A94:  BCF    1F.4
0A95:  BCF    1F.5
0A96:  MOVLW  01
0A97:  BSF    03.6
0A98:  MOVWF  08
....................     setup_adc( ADC_CLOCK_INTERNAL );  
0A99:  BCF    03.5
0A9A:  BCF    03.6
0A9B:  BSF    1F.6
0A9C:  BSF    1F.7
0A9D:  BSF    03.5
0A9E:  BSF    1F.7
0A9F:  BCF    03.5
0AA0:  BSF    1F.0
....................  
....................     set_adc_channel( 0 );  
0AA1:  MOVLW  00
0AA2:  MOVWF  78
0AA3:  MOVF   1F,W
0AA4:  ANDLW  C3
0AA5:  IORWF  78,W
0AA6:  MOVWF  1F
....................     delay_ms(50);  
0AA7:  MOVLW  32
0AA8:  MOVWF  50
0AA9:  BCF    0A.3
0AAA:  CALL   03A
0AAB:  BSF    0A.3
....................       
....................     float toFloor ; 
....................  
....................      
....................     while (1) { 
....................  
....................         
....................       rotaryR = read_adc(); 
0AAC:  BSF    1F.1
0AAD:  BTFSC  1F.1
0AAE:  GOTO   2AD
0AAF:  BSF    03.5
0AB0:  MOVF   1E,W
0AB1:  BCF    03.5
0AB2:  MOVWF  21
0AB3:  MOVF   1E,W
0AB4:  MOVWF  22
....................       degree = 155.0*(1021 - rotaryR) / 387.0; 
0AB5:  MOVF   21,W
0AB6:  SUBLW  FD
0AB7:  MOVWF  77
0AB8:  MOVLW  03
0AB9:  MOVWF  7A
0ABA:  MOVF   22,W
0ABB:  BTFSS  03.0
0ABC:  INCFSZ 22,W
0ABD:  SUBWF  7A,F
0ABE:  MOVF   77,W
0ABF:  BSF    03.5
0AC0:  MOVWF  38
0AC1:  MOVF   7A,W
0AC2:  MOVWF  39
0AC3:  BCF    0A.3
0AC4:  BCF    03.5
0AC5:  CALL   04E
0AC6:  BSF    0A.3
0AC7:  BSF    03.5
0AC8:  CLRF   3B
0AC9:  CLRF   3A
0ACA:  MOVLW  1B
0ACB:  MOVWF  39
0ACC:  MOVLW  86
0ACD:  MOVWF  38
0ACE:  MOVF   7A,W
0ACF:  MOVWF  3F
0AD0:  MOVF   79,W
0AD1:  MOVWF  3E
0AD2:  MOVF   78,W
0AD3:  MOVWF  3D
0AD4:  MOVF   77,W
0AD5:  MOVWF  3C
0AD6:  BCF    0A.3
0AD7:  BCF    03.5
0AD8:  CALL   06D
0AD9:  BSF    0A.3
0ADA:  MOVF   7A,W
0ADB:  MOVWF  52
0ADC:  MOVF   79,W
0ADD:  MOVWF  51
0ADE:  MOVF   78,W
0ADF:  MOVWF  50
0AE0:  MOVF   77,W
0AE1:  MOVWF  4F
0AE2:  MOVF   7A,W
0AE3:  MOVWF  5E
0AE4:  MOVF   79,W
0AE5:  MOVWF  5D
0AE6:  MOVF   78,W
0AE7:  MOVWF  5C
0AE8:  MOVF   77,W
0AE9:  MOVWF  5B
0AEA:  CLRF   62
0AEB:  MOVLW  80
0AEC:  MOVWF  61
0AED:  MOVLW  41
0AEE:  MOVWF  60
0AEF:  MOVLW  87
0AF0:  MOVWF  5F
0AF1:  BCF    0A.3
0AF2:  CALL   0E4
0AF3:  BSF    0A.3
0AF4:  MOVF   7A,W
0AF5:  MOVWF  26
0AF6:  MOVF   79,W
0AF7:  MOVWF  25
0AF8:  MOVF   78,W
0AF9:  MOVWF  24
0AFA:  MOVF   77,W
0AFB:  MOVWF  23
....................       distance = distanceFromUltrasonic(); 
0AFC:  BCF    0A.3
0AFD:  GOTO   1AE
0AFE:  BSF    0A.3
0AFF:  MOVF   7A,W
0B00:  MOVWF  2A
0B01:  MOVF   79,W
0B02:  MOVWF  29
0B03:  MOVF   78,W
0B04:  MOVWF  28
0B05:  MOVF   77,W
0B06:  MOVWF  27
.................... //      distance =setDistanceFromUltrasonic(); 
....................        
....................  
....................       if(!input(PIN_B7)){ 
0B07:  BSF    03.5
0B08:  BSF    06.7
0B09:  BCF    03.5
0B0A:  BTFSC  06.7
0B0B:  GOTO   336
....................          toFloor = distance; 
0B0C:  MOVF   2A,W
0B0D:  MOVWF  38
0B0E:  MOVF   29,W
0B0F:  MOVWF  37
0B10:  MOVF   28,W
0B11:  MOVWF  36
0B12:  MOVF   27,W
0B13:  MOVWF  35
....................           
....................          clearDisplay(); 
0B14:  BCF    0A.3
0B15:  CALL   261
0B16:  BSF    0A.3
....................          setDisplayPos(1); 
0B17:  MOVLW  01
0B18:  MOVWF  4F
0B19:  BCF    0A.3
0B1A:  CALL   272
0B1B:  BSF    0A.3
....................          displayLongText((char*)"Calibrated!"); 
0B1C:  CLRF   78
0B1D:  MOVLW  0C
0B1E:  MOVWF  77
0B1F:  MOVLW  39
0B20:  MOVWF  04
0B21:  BCF    03.7
0B22:  MOVF   78,W
0B23:  BCF    0A.3
0B24:  CALL   004
0B25:  BSF    0A.3
0B26:  MOVWF  00
0B27:  INCF   78,F
0B28:  INCF   04,F
0B29:  DECFSZ 77,F
0B2A:  GOTO   322
0B2B:  CLRF   52
0B2C:  MOVLW  39
0B2D:  MOVWF  51
0B2E:  BCF    0A.3
0B2F:  CALL   288
0B30:  BSF    0A.3
....................          delay_ms(100); 
0B31:  MOVLW  64
0B32:  MOVWF  50
0B33:  BCF    0A.3
0B34:  CALL   03A
0B35:  BSF    0A.3
....................       } 
....................  
....................       rad = degree * 0.0174533; 
0B36:  MOVF   26,W
0B37:  BSF    03.5
0B38:  MOVWF  3B
0B39:  BCF    03.5
0B3A:  MOVF   25,W
0B3B:  BSF    03.5
0B3C:  MOVWF  3A
0B3D:  BCF    03.5
0B3E:  MOVF   24,W
0B3F:  BSF    03.5
0B40:  MOVWF  39
0B41:  BCF    03.5
0B42:  MOVF   23,W
0B43:  BSF    03.5
0B44:  MOVWF  38
0B45:  MOVLW  39
0B46:  MOVWF  3F
0B47:  MOVLW  FA
0B48:  MOVWF  3E
0B49:  MOVLW  0E
0B4A:  MOVWF  3D
0B4B:  MOVLW  79
0B4C:  MOVWF  3C
0B4D:  BCF    0A.3
0B4E:  BCF    03.5
0B4F:  CALL   06D
0B50:  BSF    0A.3
0B51:  MOVF   7A,W
0B52:  MOVWF  32
0B53:  MOVF   79,W
0B54:  MOVWF  31
0B55:  MOVF   78,W
0B56:  MOVWF  30
0B57:  MOVF   77,W
0B58:  MOVWF  2F
....................       tall = (tan(rad) * distance ) + toFloor; 
0B59:  MOVF   32,W
0B5A:  MOVWF  52
0B5B:  MOVF   31,W
0B5C:  MOVWF  51
0B5D:  MOVF   30,W
0B5E:  MOVWF  50
0B5F:  MOVF   2F,W
0B60:  MOVWF  4F
0B61:  BCF    0A.3
0B62:  GOTO   65A
0B63:  BSF    0A.3
0B64:  MOVF   7A,W
0B65:  MOVWF  52
0B66:  MOVF   79,W
0B67:  MOVWF  51
0B68:  MOVF   78,W
0B69:  MOVWF  50
0B6A:  MOVF   77,W
0B6B:  MOVWF  4F
0B6C:  MOVF   7A,W
0B6D:  BSF    03.5
0B6E:  MOVWF  3B
0B6F:  BCF    03.5
0B70:  MOVF   79,W
0B71:  BSF    03.5
0B72:  MOVWF  3A
0B73:  BCF    03.5
0B74:  MOVF   78,W
0B75:  BSF    03.5
0B76:  MOVWF  39
0B77:  BCF    03.5
0B78:  MOVF   77,W
0B79:  BSF    03.5
0B7A:  MOVWF  38
0B7B:  BCF    03.5
0B7C:  MOVF   2A,W
0B7D:  BSF    03.5
0B7E:  MOVWF  3F
0B7F:  BCF    03.5
0B80:  MOVF   29,W
0B81:  BSF    03.5
0B82:  MOVWF  3E
0B83:  BCF    03.5
0B84:  MOVF   28,W
0B85:  BSF    03.5
0B86:  MOVWF  3D
0B87:  BCF    03.5
0B88:  MOVF   27,W
0B89:  BSF    03.5
0B8A:  MOVWF  3C
0B8B:  BCF    0A.3
0B8C:  BCF    03.5
0B8D:  CALL   06D
0B8E:  BSF    0A.3
0B8F:  MOVF   7A,W
0B90:  MOVWF  52
0B91:  MOVF   79,W
0B92:  MOVWF  51
0B93:  MOVF   78,W
0B94:  MOVWF  50
0B95:  MOVF   77,W
0B96:  MOVWF  4F
0B97:  CLRF   54
0B98:  MOVF   04,W
0B99:  MOVWF  53
0B9A:  BCF    54.0
0B9B:  BTFSC  03.7
0B9C:  BSF    54.0
0B9D:  BCF    03.1
0B9E:  MOVF   7A,W
0B9F:  BSF    03.5
0BA0:  MOVWF  3B
0BA1:  BCF    03.5
0BA2:  MOVF   79,W
0BA3:  BSF    03.5
0BA4:  MOVWF  3A
0BA5:  BCF    03.5
0BA6:  MOVF   78,W
0BA7:  BSF    03.5
0BA8:  MOVWF  39
0BA9:  BCF    03.5
0BAA:  MOVF   77,W
0BAB:  BSF    03.5
0BAC:  MOVWF  38
0BAD:  BCF    03.5
0BAE:  MOVF   38,W
0BAF:  BSF    03.5
0BB0:  MOVWF  3F
0BB1:  BCF    03.5
0BB2:  MOVF   37,W
0BB3:  BSF    03.5
0BB4:  MOVWF  3E
0BB5:  BCF    03.5
0BB6:  MOVF   36,W
0BB7:  BSF    03.5
0BB8:  MOVWF  3D
0BB9:  BCF    03.5
0BBA:  MOVF   35,W
0BBB:  BSF    03.5
0BBC:  MOVWF  3C
0BBD:  BCF    0A.3
0BBE:  BCF    03.5
0BBF:  CALL   2F2
0BC0:  BSF    0A.3
0BC1:  MOVF   53,W
0BC2:  MOVWF  04
0BC3:  BCF    03.7
0BC4:  BTFSC  54.0
0BC5:  BSF    03.7
0BC6:  MOVF   7A,W
0BC7:  MOVWF  2E
0BC8:  MOVF   79,W
0BC9:  MOVWF  2D
0BCA:  MOVF   78,W
0BCB:  MOVWF  2C
0BCC:  MOVF   77,W
0BCD:  MOVWF  2B
....................   
....................       int16 x=MPU6050_Read(); 
0BCE:  BCF    0A.3
0BCF:  GOTO   6EA
0BD0:  BSF    0A.3
0BD1:  MOVF   79,W
0BD2:  MOVWF  46
0BD3:  MOVF   78,W
0BD4:  MOVWF  45
....................       printf("asd X=%lu  Sensor= %Lu\tDegree= %.2f\tDist= %.2f cm  tall=%f cm\r\n",x,rotaryR,degree,distance,tall); 
0BD5:  MOVLW  14
0BD6:  BSF    03.6
0BD7:  MOVWF  0D
0BD8:  MOVLW  00
0BD9:  MOVWF  0F
0BDA:  BCF    03.0
0BDB:  MOVLW  06
0BDC:  BCF    03.6
0BDD:  MOVWF  4F
0BDE:  BCF    0A.3
0BDF:  CALL   713
0BE0:  BSF    0A.3
0BE1:  MOVLW  10
0BE2:  MOVWF  04
0BE3:  MOVF   46,W
0BE4:  MOVWF  50
0BE5:  MOVF   45,W
0BE6:  MOVWF  4F
0BE7:  BCF    0A.3
0BE8:  CALL   76C
0BE9:  BSF    0A.3
0BEA:  MOVLW  18
0BEB:  BSF    03.6
0BEC:  MOVWF  0D
0BED:  MOVLW  00
0BEE:  MOVWF  0F
0BEF:  BSF    03.0
0BF0:  MOVLW  0A
0BF1:  BCF    03.6
0BF2:  MOVWF  4F
0BF3:  BCF    0A.3
0BF4:  CALL   713
0BF5:  BSF    0A.3
0BF6:  MOVLW  10
0BF7:  MOVWF  04
0BF8:  MOVF   22,W
0BF9:  MOVWF  50
0BFA:  MOVF   21,W
0BFB:  MOVWF  4F
0BFC:  BCF    0A.3
0BFD:  CALL   76C
0BFE:  BSF    0A.3
0BFF:  MOVLW  1F
0C00:  BSF    03.6
0C01:  MOVWF  0D
0C02:  MOVLW  00
0C03:  MOVWF  0F
0C04:  BCF    03.0
0C05:  MOVLW  09
0C06:  BCF    03.6
0C07:  MOVWF  4F
0C08:  BCF    0A.3
0C09:  CALL   713
0C0A:  BSF    0A.3
0C0B:  MOVLW  89
0C0C:  MOVWF  04
0C0D:  MOVF   26,W
0C0E:  MOVWF  52
0C0F:  MOVF   25,W
0C10:  MOVWF  51
0C11:  MOVF   24,W
0C12:  MOVWF  50
0C13:  MOVF   23,W
0C14:  MOVWF  4F
0C15:  MOVLW  02
0C16:  MOVWF  53
0C17:  CALL   04F
0C18:  MOVLW  25
0C19:  BSF    03.6
0C1A:  MOVWF  0D
0C1B:  MOVLW  00
0C1C:  MOVWF  0F
0C1D:  BSF    03.0
0C1E:  MOVLW  07
0C1F:  BCF    03.6
0C20:  MOVWF  4F
0C21:  BCF    0A.3
0C22:  CALL   713
0C23:  BSF    0A.3
0C24:  MOVLW  89
0C25:  MOVWF  04
0C26:  MOVF   2A,W
0C27:  MOVWF  52
0C28:  MOVF   29,W
0C29:  MOVWF  51
0C2A:  MOVF   28,W
0C2B:  MOVWF  50
0C2C:  MOVF   27,W
0C2D:  MOVWF  4F
0C2E:  MOVLW  02
0C2F:  MOVWF  53
0C30:  CALL   04F
0C31:  MOVLW  2B
0C32:  BSF    03.6
0C33:  MOVWF  0D
0C34:  MOVLW  00
0C35:  MOVWF  0F
0C36:  BCF    03.0
0C37:  MOVLW  0A
0C38:  BCF    03.6
0C39:  MOVWF  4F
0C3A:  BCF    0A.3
0C3B:  CALL   713
0C3C:  BSF    0A.3
0C3D:  MOVLW  89
0C3E:  MOVWF  04
0C3F:  MOVF   2E,W
0C40:  MOVWF  52
0C41:  MOVF   2D,W
0C42:  MOVWF  51
0C43:  MOVF   2C,W
0C44:  MOVWF  50
0C45:  MOVF   2B,W
0C46:  MOVWF  4F
0C47:  MOVLW  02
0C48:  MOVWF  53
0C49:  CALL   04F
0C4A:  MOVLW  31
0C4B:  BSF    03.6
0C4C:  MOVWF  0D
0C4D:  MOVLW  00
0C4E:  MOVWF  0F
0C4F:  BCF    03.0
0C50:  MOVLW  05
0C51:  BCF    03.6
0C52:  MOVWF  4F
0C53:  BCF    0A.3
0C54:  CALL   713
0C55:  BSF    0A.3
....................       delay_ms(100); 
0C56:  MOVLW  64
0C57:  MOVWF  50
0C58:  BCF    0A.3
0C59:  CALL   03A
0C5A:  BSF    0A.3
....................       clearDisplay(); 
0C5B:  BCF    0A.3
0C5C:  CALL   261
0C5D:  BSF    0A.3
....................       setDisplayPos(1); 
0C5E:  MOVLW  01
0C5F:  MOVWF  4F
0C60:  BCF    0A.3
0C61:  CALL   272
0C62:  BSF    0A.3
....................       char* message; 
....................       displayLongText((char*)"Deg:"); 
0C63:  MOVLW  44
0C64:  MOVWF  49
0C65:  MOVLW  65
0C66:  MOVWF  4A
0C67:  MOVLW  67
0C68:  MOVWF  4B
0C69:  MOVLW  3A
0C6A:  MOVWF  4C
0C6B:  CLRF   4D
0C6C:  CLRF   52
0C6D:  MOVLW  49
0C6E:  MOVWF  51
0C6F:  BCF    0A.3
0C70:  CALL   288
0C71:  BSF    0A.3
....................        
....................       if(degree >= 90) sprintf( message , "----" ); 
0C72:  BSF    03.5
0C73:  CLRF   37
0C74:  CLRF   36
0C75:  MOVLW  34
0C76:  MOVWF  35
0C77:  MOVLW  85
0C78:  MOVWF  34
0C79:  BCF    03.5
0C7A:  MOVF   26,W
0C7B:  BSF    03.5
0C7C:  MOVWF  3B
0C7D:  BCF    03.5
0C7E:  MOVF   25,W
0C7F:  BSF    03.5
0C80:  MOVWF  3A
0C81:  BCF    03.5
0C82:  MOVF   24,W
0C83:  BSF    03.5
0C84:  MOVWF  39
0C85:  BCF    03.5
0C86:  MOVF   23,W
0C87:  BSF    03.5
0C88:  MOVWF  38
0C89:  BCF    0A.3
0C8A:  BCF    03.5
0C8B:  CALL   2B1
0C8C:  BSF    0A.3
0C8D:  BTFSC  03.0
0C8E:  GOTO   491
0C8F:  BTFSS  03.2
0C90:  GOTO   49D
0C91:  MOVF   48,W
0C92:  MOVWF  34
0C93:  MOVF   47,W
0C94:  MOVWF  33
0C95:  MOVLW  34
0C96:  BSF    03.6
0C97:  MOVWF  0D
0C98:  MOVLW  00
0C99:  MOVWF  0F
0C9A:  BCF    03.6
0C9B:  CALL   122
0C9C:  GOTO   4AE
....................       else sprintf( message , "%.1lf" ,(float) degree); 
0C9D:  MOVF   48,W
0C9E:  MOVWF  34
0C9F:  MOVF   47,W
0CA0:  MOVWF  33
0CA1:  MOVLW  89
0CA2:  MOVWF  04
0CA3:  MOVF   26,W
0CA4:  MOVWF  56
0CA5:  MOVF   25,W
0CA6:  MOVWF  55
0CA7:  MOVF   24,W
0CA8:  MOVWF  54
0CA9:  MOVF   23,W
0CAA:  MOVWF  53
0CAB:  MOVLW  01
0CAC:  MOVWF  57
0CAD:  CALL   17C
....................        
....................        setDisplayPos(5); 
0CAE:  MOVLW  05
0CAF:  MOVWF  4F
0CB0:  BCF    0A.3
0CB1:  CALL   272
0CB2:  BSF    0A.3
....................       displayLongText(message); 
0CB3:  MOVF   48,W
0CB4:  MOVWF  52
0CB5:  MOVF   47,W
0CB6:  MOVWF  51
0CB7:  BCF    0A.3
0CB8:  CALL   288
0CB9:  BSF    0A.3
....................        
....................       setDisplayPos(9); 
0CBA:  MOVLW  09
0CBB:  MOVWF  4F
0CBC:  BCF    0A.3
0CBD:  CALL   272
0CBE:  BSF    0A.3
....................       displayLongText((char*)"Dis:"); 
0CBF:  MOVLW  44
0CC0:  MOVWF  49
0CC1:  MOVLW  69
0CC2:  MOVWF  4A
0CC3:  MOVLW  73
0CC4:  MOVWF  4B
0CC5:  MOVLW  3A
0CC6:  MOVWF  4C
0CC7:  CLRF   4D
0CC8:  CLRF   52
0CC9:  MOVLW  49
0CCA:  MOVWF  51
0CCB:  BCF    0A.3
0CCC:  CALL   288
0CCD:  BSF    0A.3
....................       sprintf( message , "%.2lf" ,(float)distance /100.0); 
0CCE:  MOVF   2A,W
0CCF:  MOVWF  5E
0CD0:  MOVF   29,W
0CD1:  MOVWF  5D
0CD2:  MOVF   28,W
0CD3:  MOVWF  5C
0CD4:  MOVF   27,W
0CD5:  MOVWF  5B
0CD6:  CLRF   62
0CD7:  CLRF   61
0CD8:  MOVLW  48
0CD9:  MOVWF  60
0CDA:  MOVLW  85
0CDB:  MOVWF  5F
0CDC:  BCF    0A.3
0CDD:  CALL   0E4
0CDE:  BSF    0A.3
0CDF:  MOVF   7A,W
0CE0:  MOVWF  52
0CE1:  MOVF   79,W
0CE2:  MOVWF  51
0CE3:  MOVF   78,W
0CE4:  MOVWF  50
0CE5:  MOVF   77,W
0CE6:  MOVWF  4F
0CE7:  MOVF   48,W
0CE8:  MOVWF  34
0CE9:  MOVF   47,W
0CEA:  MOVWF  33
0CEB:  MOVLW  89
0CEC:  MOVWF  04
0CED:  MOVF   7A,W
0CEE:  MOVWF  56
0CEF:  MOVF   79,W
0CF0:  MOVWF  55
0CF1:  MOVF   78,W
0CF2:  MOVWF  54
0CF3:  MOVF   77,W
0CF4:  MOVWF  53
0CF5:  MOVLW  02
0CF6:  MOVWF  57
0CF7:  CALL   17C
....................       displayLongText(message); 
0CF8:  MOVF   48,W
0CF9:  MOVWF  52
0CFA:  MOVF   47,W
0CFB:  MOVWF  51
0CFC:  BCF    0A.3
0CFD:  CALL   288
0CFE:  BSF    0A.3
....................  
....................  
....................       setDisplayPos(17); 
0CFF:  MOVLW  11
0D00:  MOVWF  4F
0D01:  BCF    0A.3
0D02:  CALL   272
0D03:  BSF    0A.3
....................       displayLongText((char*)"tall:"); 
0D04:  MOVLW  74
0D05:  MOVWF  49
0D06:  MOVLW  61
0D07:  MOVWF  4A
0D08:  MOVLW  6C
0D09:  MOVWF  4B
0D0A:  MOVWF  4C
0D0B:  MOVLW  3A
0D0C:  MOVWF  4D
0D0D:  CLRF   4E
0D0E:  CLRF   52
0D0F:  MOVLW  49
0D10:  MOVWF  51
0D11:  BCF    0A.3
0D12:  CALL   288
0D13:  BSF    0A.3
....................        
....................       if(degree >= 90) sprintf( message , "----" ); 
0D14:  BSF    03.5
0D15:  CLRF   37
0D16:  CLRF   36
0D17:  MOVLW  34
0D18:  MOVWF  35
0D19:  MOVLW  85
0D1A:  MOVWF  34
0D1B:  BCF    03.5
0D1C:  MOVF   26,W
0D1D:  BSF    03.5
0D1E:  MOVWF  3B
0D1F:  BCF    03.5
0D20:  MOVF   25,W
0D21:  BSF    03.5
0D22:  MOVWF  3A
0D23:  BCF    03.5
0D24:  MOVF   24,W
0D25:  BSF    03.5
0D26:  MOVWF  39
0D27:  BCF    03.5
0D28:  MOVF   23,W
0D29:  BSF    03.5
0D2A:  MOVWF  38
0D2B:  BCF    0A.3
0D2C:  BCF    03.5
0D2D:  CALL   2B1
0D2E:  BSF    0A.3
0D2F:  BTFSC  03.0
0D30:  GOTO   533
0D31:  BTFSS  03.2
0D32:  GOTO   53F
0D33:  MOVF   48,W
0D34:  MOVWF  34
0D35:  MOVF   47,W
0D36:  MOVWF  33
0D37:  MOVLW  37
0D38:  BSF    03.6
0D39:  MOVWF  0D
0D3A:  MOVLW  00
0D3B:  MOVWF  0F
0D3C:  BCF    03.6
0D3D:  CALL   122
0D3E:  GOTO   550
....................       else sprintf( message , "%.1f" ,tall ); 
0D3F:  MOVF   48,W
0D40:  MOVWF  34
0D41:  MOVF   47,W
0D42:  MOVWF  33
0D43:  MOVLW  89
0D44:  MOVWF  04
0D45:  MOVF   2E,W
0D46:  MOVWF  56
0D47:  MOVF   2D,W
0D48:  MOVWF  55
0D49:  MOVF   2C,W
0D4A:  MOVWF  54
0D4B:  MOVF   2B,W
0D4C:  MOVWF  53
0D4D:  MOVLW  01
0D4E:  MOVWF  57
0D4F:  CALL   17C
....................       displayLongText(message); 
0D50:  MOVF   48,W
0D51:  MOVWF  52
0D52:  MOVF   47,W
0D53:  MOVWF  51
0D54:  BCF    0A.3
0D55:  CALL   288
0D56:  BSF    0A.3
....................  
....................  
....................        
....................        
....................        
....................       delay_ms(300); 
0D57:  MOVLW  02
0D58:  MOVWF  4F
0D59:  MOVLW  96
0D5A:  MOVWF  50
0D5B:  BCF    0A.3
0D5C:  CALL   03A
0D5D:  BSF    0A.3
0D5E:  DECFSZ 4F,F
0D5F:  GOTO   559
0D60:  GOTO   2AC
....................        
....................       
....................         
....................     } 
....................  
.................... } 
....................  
0D61:  SLEEP
....................  
....................  

Configuration Fuses:
   Word  1: 2FC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
