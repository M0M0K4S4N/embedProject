CCS PCM C Compiler, Version 5.063, 32906               30-Mar-17 14:34

               Filename:   D:\#cpeembed\#project\ultrasonic-work.1.0.lst

               ROM used:   3357 words (41%)
                           Largest free fragment is 2048
               RAM used:   56 (15%) at main() level
                           136 (37%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  0A
0001:  MOVWF  0A
0002:  GOTO   253
0003:  NOP
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  43
0009:  RETLW  61
000A:  RETLW  6C
000B:  RETLW  69
000C:  RETLW  62
000D:  RETLW  72
000E:  RETLW  61
000F:  RETLW  74
0010:  RETLW  65
0011:  RETLW  64
0012:  RETLW  21
0013:  RETLW  00
0014:  DATA D3,32
0015:  DATA EE,39
0016:  DATA 6F,39
0017:  DATA 3D,10
0018:  DATA 25,26
0019:  DATA F5,04
001A:  DATA C4,32
001B:  DATA 67,39
001C:  DATA E5,32
001D:  DATA 3D,10
001E:  DATA 25,17
001F:  DATA 32,33
0020:  DATA 09,22
0021:  DATA E9,39
0022:  DATA F4,1E
0023:  DATA A0,12
0024:  DATA 2E,19
0025:  DATA 66,10
0026:  DATA E3,36
0027:  DATA 20,10
0028:  DATA F4,30
0029:  DATA 6C,36
002A:  DATA BD,12
002B:  DATA 66,10
002C:  DATA E3,36
002D:  DATA 0D,05
002E:  DATA 00,00
002F:  DATA AD,16
0030:  DATA AD,16
0031:  DATA 00,00
0032:  DATA AD,16
0033:  DATA AD,16
0034:  DATA 00,01
*
0049:  MOVLW  8E
004A:  MOVWF  77
004B:  BSF    03.5
004C:  MOVF   39,W
004D:  MOVWF  78
004E:  MOVF   38,W
004F:  MOVWF  79
0050:  CLRF   7A
0051:  MOVF   78,F
0052:  BTFSS  03.2
0053:  GOTO   05E
0054:  MOVF   79,W
0055:  MOVWF  78
0056:  CLRF   79
0057:  MOVLW  08
0058:  SUBWF  77,F
0059:  MOVF   78,F
005A:  BTFSS  03.2
005B:  GOTO   05E
005C:  CLRF   77
005D:  GOTO   066
005E:  BCF    03.0
005F:  BTFSC  78.7
0060:  GOTO   065
0061:  RLF    79,F
0062:  RLF    78,F
0063:  DECF   77,F
0064:  GOTO   05E
0065:  BCF    78.7
0066:  BCF    03.5
0067:  RETURN
0068:  BSF    03.5
0069:  MOVF   38,W
006A:  BTFSC  03.2
006B:  GOTO   0D9
006C:  MOVWF  40
006D:  MOVF   3C,W
006E:  BTFSC  03.2
006F:  GOTO   0D9
0070:  ADDWF  40,F
0071:  BTFSC  03.0
0072:  GOTO   07A
0073:  MOVLW  7F
0074:  SUBWF  40,F
0075:  BTFSS  03.0
0076:  GOTO   0D9
0077:  BTFSC  03.2
0078:  GOTO   0D9
0079:  GOTO   07E
007A:  MOVLW  81
007B:  ADDWF  40,F
007C:  BTFSC  03.0
007D:  GOTO   0D9
007E:  MOVF   40,W
007F:  MOVWF  77
0080:  CLRF   78
0081:  CLRF   79
0082:  CLRF   7A
0083:  MOVF   39,W
0084:  MOVWF  44
0085:  BSF    44.7
0086:  MOVF   3A,W
0087:  MOVWF  43
0088:  MOVF   3B,W
0089:  MOVWF  42
008A:  MOVLW  18
008B:  MOVWF  40
008C:  CLRF   41
008D:  BTFSS  42.0
008E:  GOTO   0A7
008F:  MOVF   3F,W
0090:  ADDWF  7A,F
0091:  BTFSS  03.0
0092:  GOTO   099
0093:  INCF   79,F
0094:  BTFSS  03.2
0095:  GOTO   099
0096:  INCF   78,F
0097:  BTFSC  03.2
0098:  BSF    41.7
0099:  MOVF   3E,W
009A:  ADDWF  79,F
009B:  BTFSS  03.0
009C:  GOTO   0A0
009D:  INCF   78,F
009E:  BTFSC  03.2
009F:  BSF    41.7
00A0:  MOVF   3D,W
00A1:  MOVWF  3A
00A2:  BSF    3A.7
00A3:  MOVF   3A,W
00A4:  ADDWF  78,F
00A5:  BTFSC  03.0
00A6:  BSF    41.7
00A7:  RLF    41,F
00A8:  RRF    78,F
00A9:  RRF    79,F
00AA:  RRF    7A,F
00AB:  RRF    44,F
00AC:  RRF    43,F
00AD:  RRF    42,F
00AE:  BCF    03.0
00AF:  DECFSZ 40,F
00B0:  GOTO   08C
00B1:  MOVLW  01
00B2:  ADDWF  77,F
00B3:  BTFSC  03.0
00B4:  GOTO   0D9
00B5:  BTFSC  78.7
00B6:  GOTO   0BE
00B7:  RLF    44,F
00B8:  RLF    7A,F
00B9:  RLF    79,F
00BA:  RLF    78,F
00BB:  DECF   77,F
00BC:  BTFSC  03.2
00BD:  GOTO   0D9
00BE:  BTFSS  44.7
00BF:  GOTO   0CF
00C0:  INCF   7A,F
00C1:  BTFSS  03.2
00C2:  GOTO   0CF
00C3:  INCF   79,F
00C4:  BTFSS  03.2
00C5:  GOTO   0CF
00C6:  INCF   78,F
00C7:  BTFSS  03.2
00C8:  GOTO   0CF
00C9:  RRF    78,F
00CA:  RRF    79,F
00CB:  RRF    7A,F
00CC:  INCF   77,F
00CD:  BTFSC  03.2
00CE:  GOTO   0D9
00CF:  MOVF   39,W
00D0:  MOVWF  41
00D1:  MOVF   3D,W
00D2:  XORWF  41,F
00D3:  BTFSS  41.7
00D4:  GOTO   0D7
00D5:  BSF    78.7
00D6:  GOTO   0DD
00D7:  BCF    78.7
00D8:  GOTO   0DD
00D9:  CLRF   77
00DA:  CLRF   78
00DB:  CLRF   79
00DC:  CLRF   7A
00DD:  BCF    03.5
00DE:  RETURN
00DF:  MOVF   59,W
00E0:  BTFSC  03.2
00E1:  GOTO   1A4
00E2:  MOVWF  65
00E3:  MOVF   5D,W
00E4:  BTFSC  03.2
00E5:  GOTO   1A4
00E6:  SUBWF  65,F
00E7:  BTFSS  03.0
00E8:  GOTO   0EE
00E9:  MOVLW  7F
00EA:  ADDWF  65,F
00EB:  BTFSC  03.0
00EC:  GOTO   1A4
00ED:  GOTO   0F4
00EE:  MOVLW  81
00EF:  SUBWF  65,F
00F0:  BTFSS  03.0
00F1:  GOTO   1A4
00F2:  BTFSC  03.2
00F3:  GOTO   1A4
00F4:  MOVF   65,W
00F5:  MOVWF  77
00F6:  CLRF   78
00F7:  CLRF   79
00F8:  CLRF   7A
00F9:  CLRF   64
00FA:  MOVF   5A,W
00FB:  MOVWF  63
00FC:  BSF    63.7
00FD:  MOVF   5B,W
00FE:  MOVWF  62
00FF:  MOVF   5C,W
0100:  MOVWF  61
0101:  MOVLW  19
0102:  MOVWF  65
0103:  MOVF   60,W
0104:  SUBWF  61,F
0105:  BTFSC  03.0
0106:  GOTO   117
0107:  MOVLW  01
0108:  SUBWF  62,F
0109:  BTFSC  03.0
010A:  GOTO   117
010B:  SUBWF  63,F
010C:  BTFSC  03.0
010D:  GOTO   117
010E:  SUBWF  64,F
010F:  BTFSC  03.0
0110:  GOTO   117
0111:  INCF   64,F
0112:  INCF   63,F
0113:  INCF   62,F
0114:  MOVF   60,W
0115:  ADDWF  61,F
0116:  GOTO   149
0117:  MOVF   5F,W
0118:  SUBWF  62,F
0119:  BTFSC  03.0
011A:  GOTO   132
011B:  MOVLW  01
011C:  SUBWF  63,F
011D:  BTFSC  03.0
011E:  GOTO   132
011F:  SUBWF  64,F
0120:  BTFSC  03.0
0121:  GOTO   132
0122:  INCF   64,F
0123:  INCF   63,F
0124:  MOVF   5F,W
0125:  ADDWF  62,F
0126:  MOVF   60,W
0127:  ADDWF  61,F
0128:  BTFSS  03.0
0129:  GOTO   149
012A:  INCF   62,F
012B:  BTFSS  03.2
012C:  GOTO   149
012D:  INCF   63,F
012E:  BTFSS  03.2
012F:  GOTO   149
0130:  INCF   64,F
0131:  GOTO   149
0132:  MOVF   5E,W
0133:  IORLW  80
0134:  SUBWF  63,F
0135:  BTFSC  03.0
0136:  GOTO   148
0137:  MOVLW  01
0138:  SUBWF  64,F
0139:  BTFSC  03.0
013A:  GOTO   148
013B:  INCF   64,F
013C:  MOVF   5E,W
013D:  IORLW  80
013E:  ADDWF  63,F
013F:  MOVF   5F,W
0140:  ADDWF  62,F
0141:  BTFSS  03.0
0142:  GOTO   126
0143:  INCF   63,F
0144:  BTFSS  03.2
0145:  GOTO   126
0146:  INCF   64,F
0147:  GOTO   126
0148:  BSF    7A.0
0149:  DECFSZ 65,F
014A:  GOTO   14C
014B:  GOTO   157
014C:  BCF    03.0
014D:  RLF    61,F
014E:  RLF    62,F
014F:  RLF    63,F
0150:  RLF    64,F
0151:  BCF    03.0
0152:  RLF    7A,F
0153:  RLF    79,F
0154:  RLF    78,F
0155:  RLF    66,F
0156:  GOTO   103
0157:  BTFSS  66.0
0158:  GOTO   15F
0159:  BCF    03.0
015A:  RRF    78,F
015B:  RRF    79,F
015C:  RRF    7A,F
015D:  RRF    66,F
015E:  GOTO   162
015F:  DECF   77,F
0160:  BTFSC  03.2
0161:  GOTO   1A4
0162:  BTFSC  66.7
0163:  GOTO   18B
0164:  BCF    03.0
0165:  RLF    61,F
0166:  RLF    62,F
0167:  RLF    63,F
0168:  RLF    64,F
0169:  MOVF   60,W
016A:  SUBWF  61,F
016B:  BTFSC  03.0
016C:  GOTO   177
016D:  MOVLW  01
016E:  SUBWF  62,F
016F:  BTFSC  03.0
0170:  GOTO   177
0171:  SUBWF  63,F
0172:  BTFSC  03.0
0173:  GOTO   177
0174:  SUBWF  64,F
0175:  BTFSS  03.0
0176:  GOTO   19A
0177:  MOVF   5F,W
0178:  SUBWF  62,F
0179:  BTFSC  03.0
017A:  GOTO   182
017B:  MOVLW  01
017C:  SUBWF  63,F
017D:  BTFSC  03.0
017E:  GOTO   182
017F:  SUBWF  64,F
0180:  BTFSS  03.0
0181:  GOTO   19A
0182:  MOVF   5E,W
0183:  IORLW  80
0184:  SUBWF  63,F
0185:  BTFSC  03.0
0186:  GOTO   18B
0187:  MOVLW  01
0188:  SUBWF  64,F
0189:  BTFSS  03.0
018A:  GOTO   19A
018B:  INCF   7A,F
018C:  BTFSS  03.2
018D:  GOTO   19A
018E:  INCF   79,F
018F:  BTFSS  03.2
0190:  GOTO   19A
0191:  INCF   78,F
0192:  BTFSS  03.2
0193:  GOTO   19A
0194:  INCF   77,F
0195:  BTFSC  03.2
0196:  GOTO   1A4
0197:  RRF    78,F
0198:  RRF    79,F
0199:  RRF    7A,F
019A:  MOVF   5A,W
019B:  MOVWF  65
019C:  MOVF   5E,W
019D:  XORWF  65,F
019E:  BTFSS  65.7
019F:  GOTO   1A2
01A0:  BSF    78.7
01A1:  GOTO   1A8
01A2:  BCF    78.7
01A3:  GOTO   1A8
01A4:  CLRF   77
01A5:  CLRF   78
01A6:  CLRF   79
01A7:  CLRF   7A
01A8:  RETURN
*
02CA:  BSF    03.5
02CB:  MOVF   35,W
02CC:  MOVWF  3C
02CD:  MOVF   39,W
02CE:  XORWF  3C,F
02CF:  BTFSS  3C.7
02D0:  GOTO   2D6
02D1:  BCF    03.2
02D2:  BCF    03.0
02D3:  BTFSC  35.7
02D4:  BSF    03.0
02D5:  GOTO   309
02D6:  MOVF   35,W
02D7:  MOVWF  3C
02D8:  MOVF   38,W
02D9:  MOVWF  3D
02DA:  MOVF   34,W
02DB:  SUBWF  3D,F
02DC:  BTFSC  03.2
02DD:  GOTO   2E4
02DE:  BTFSS  3C.7
02DF:  GOTO   309
02E0:  MOVF   03,W
02E1:  XORLW  01
02E2:  MOVWF  03
02E3:  GOTO   309
02E4:  MOVF   39,W
02E5:  MOVWF  3D
02E6:  MOVF   35,W
02E7:  SUBWF  3D,F
02E8:  BTFSC  03.2
02E9:  GOTO   2F0
02EA:  BTFSS  3C.7
02EB:  GOTO   309
02EC:  MOVF   03,W
02ED:  XORLW  01
02EE:  MOVWF  03
02EF:  GOTO   309
02F0:  MOVF   3A,W
02F1:  MOVWF  3D
02F2:  MOVF   36,W
02F3:  SUBWF  3D,F
02F4:  BTFSC  03.2
02F5:  GOTO   2FC
02F6:  BTFSS  3C.7
02F7:  GOTO   309
02F8:  MOVF   03,W
02F9:  XORLW  01
02FA:  MOVWF  03
02FB:  GOTO   309
02FC:  MOVF   3B,W
02FD:  MOVWF  3D
02FE:  MOVF   37,W
02FF:  SUBWF  3D,F
0300:  BTFSC  03.2
0301:  GOTO   308
0302:  BTFSS  3C.7
0303:  GOTO   309
0304:  MOVF   03,W
0305:  XORLW  01
0306:  MOVWF  03
0307:  GOTO   309
0308:  BCF    03.0
0309:  BCF    03.5
030A:  RETURN
030B:  MOVLW  80
030C:  BTFSS  03.1
030D:  GOTO   311
030E:  BSF    03.5
030F:  XORWF  3D,F
0310:  BCF    03.5
0311:  BSF    03.5
0312:  CLRF   42
0313:  CLRF   43
0314:  MOVF   39,W
0315:  MOVWF  41
0316:  MOVF   3D,W
0317:  XORWF  41,F
0318:  MOVF   38,W
0319:  BTFSC  03.2
031A:  GOTO   3FF
031B:  MOVWF  40
031C:  MOVWF  77
031D:  MOVF   3C,W
031E:  BTFSC  03.2
031F:  GOTO   408
0320:  SUBWF  40,F
0321:  BTFSC  03.2
0322:  GOTO   3A4
0323:  BTFSS  03.0
0324:  GOTO   362
0325:  MOVF   3D,W
0326:  MOVWF  46
0327:  BSF    46.7
0328:  MOVF   3E,W
0329:  MOVWF  45
032A:  MOVF   3F,W
032B:  MOVWF  44
032C:  CLRF   43
032D:  BCF    03.0
032E:  RRF    46,F
032F:  RRF    45,F
0330:  RRF    44,F
0331:  RRF    43,F
0332:  DECFSZ 40,F
0333:  GOTO   32C
0334:  BTFSS  41.7
0335:  GOTO   339
0336:  BSF    42.0
0337:  GOTO   41C
0338:  BCF    42.0
0339:  BCF    40.0
033A:  BSF    42.4
033B:  MOVLW  BB
033C:  MOVWF  04
033D:  BCF    03.7
033E:  GOTO   431
033F:  BCF    42.4
0340:  BTFSC  41.7
0341:  GOTO   34C
0342:  BTFSS  40.0
0343:  GOTO   357
0344:  RRF    46,F
0345:  RRF    45,F
0346:  RRF    44,F
0347:  RRF    43,F
0348:  INCF   77,F
0349:  BTFSC  03.2
034A:  GOTO   417
034B:  GOTO   357
034C:  BTFSC  46.7
034D:  GOTO   35A
034E:  BCF    03.0
034F:  RLF    43,F
0350:  RLF    44,F
0351:  RLF    45,F
0352:  RLF    46,F
0353:  DECF   77,F
0354:  BTFSC  03.2
0355:  GOTO   417
0356:  GOTO   34C
0357:  BSF    42.6
0358:  GOTO   3C4
0359:  BCF    42.6
035A:  MOVF   39,W
035B:  MOVWF  41
035C:  BTFSS  41.7
035D:  GOTO   360
035E:  BSF    46.7
035F:  GOTO   410
0360:  BCF    46.7
0361:  GOTO   410
0362:  MOVF   3C,W
0363:  MOVWF  40
0364:  MOVWF  77
0365:  MOVF   38,W
0366:  SUBWF  40,F
0367:  MOVF   39,W
0368:  MOVWF  46
0369:  BSF    46.7
036A:  MOVF   3A,W
036B:  MOVWF  45
036C:  MOVF   3B,W
036D:  MOVWF  44
036E:  CLRF   43
036F:  BCF    03.0
0370:  RRF    46,F
0371:  RRF    45,F
0372:  RRF    44,F
0373:  RRF    43,F
0374:  DECFSZ 40,F
0375:  GOTO   36E
0376:  BTFSS  41.7
0377:  GOTO   37B
0378:  BSF    42.1
0379:  GOTO   41C
037A:  BCF    42.1
037B:  BCF    40.0
037C:  BSF    42.5
037D:  MOVLW  BF
037E:  MOVWF  04
037F:  BCF    03.7
0380:  GOTO   431
0381:  BCF    42.5
0382:  BTFSC  41.7
0383:  GOTO   38E
0384:  BTFSS  40.0
0385:  GOTO   399
0386:  RRF    46,F
0387:  RRF    45,F
0388:  RRF    44,F
0389:  RRF    43,F
038A:  INCF   77,F
038B:  BTFSC  03.2
038C:  GOTO   417
038D:  GOTO   399
038E:  BTFSC  46.7
038F:  GOTO   39C
0390:  BCF    03.0
0391:  RLF    43,F
0392:  RLF    44,F
0393:  RLF    45,F
0394:  RLF    46,F
0395:  DECF   77,F
0396:  BTFSC  03.2
0397:  GOTO   417
0398:  GOTO   38E
0399:  BSF    42.7
039A:  GOTO   3C4
039B:  BCF    42.7
039C:  MOVF   3D,W
039D:  MOVWF  41
039E:  BTFSS  41.7
039F:  GOTO   3A2
03A0:  BSF    46.7
03A1:  GOTO   410
03A2:  BCF    46.7
03A3:  GOTO   410
03A4:  MOVF   3D,W
03A5:  MOVWF  46
03A6:  BSF    46.7
03A7:  MOVF   3E,W
03A8:  MOVWF  45
03A9:  MOVF   3F,W
03AA:  MOVWF  44
03AB:  BTFSS  41.7
03AC:  GOTO   3B1
03AD:  BCF    46.7
03AE:  BSF    42.2
03AF:  GOTO   41C
03B0:  BCF    42.2
03B1:  CLRF   43
03B2:  BCF    40.0
03B3:  MOVLW  BB
03B4:  MOVWF  04
03B5:  BCF    03.7
03B6:  GOTO   431
03B7:  BTFSC  41.7
03B8:  GOTO   3DA
03B9:  MOVF   39,W
03BA:  MOVWF  41
03BB:  BTFSS  40.0
03BC:  GOTO   3C4
03BD:  RRF    46,F
03BE:  RRF    45,F
03BF:  RRF    44,F
03C0:  RRF    43,F
03C1:  INCF   77,F
03C2:  BTFSC  03.2
03C3:  GOTO   417
03C4:  BTFSS  43.7
03C5:  GOTO   3D5
03C6:  INCF   44,F
03C7:  BTFSS  03.2
03C8:  GOTO   3D5
03C9:  INCF   45,F
03CA:  BTFSS  03.2
03CB:  GOTO   3D5
03CC:  INCF   46,F
03CD:  BTFSS  03.2
03CE:  GOTO   3D5
03CF:  RRF    46,F
03D0:  RRF    45,F
03D1:  RRF    44,F
03D2:  INCF   77,F
03D3:  BTFSC  03.2
03D4:  GOTO   417
03D5:  BTFSC  42.6
03D6:  GOTO   359
03D7:  BTFSC  42.7
03D8:  GOTO   39B
03D9:  GOTO   3F9
03DA:  MOVLW  80
03DB:  XORWF  46,F
03DC:  BTFSS  46.7
03DD:  GOTO   3E2
03DE:  GOTO   41C
03DF:  MOVF   3D,W
03E0:  MOVWF  41
03E1:  GOTO   3EF
03E2:  MOVF   39,W
03E3:  MOVWF  41
03E4:  MOVF   46,F
03E5:  BTFSS  03.2
03E6:  GOTO   3EF
03E7:  MOVF   45,F
03E8:  BTFSS  03.2
03E9:  GOTO   3EF
03EA:  MOVF   44,F
03EB:  BTFSS  03.2
03EC:  GOTO   3EF
03ED:  CLRF   77
03EE:  GOTO   410
03EF:  BTFSC  46.7
03F0:  GOTO   3F9
03F1:  BCF    03.0
03F2:  RLF    43,F
03F3:  RLF    44,F
03F4:  RLF    45,F
03F5:  RLF    46,F
03F6:  DECFSZ 77,F
03F7:  GOTO   3EF
03F8:  GOTO   417
03F9:  BTFSS  41.7
03FA:  GOTO   3FD
03FB:  BSF    46.7
03FC:  GOTO   410
03FD:  BCF    46.7
03FE:  GOTO   410
03FF:  MOVF   3C,W
0400:  MOVWF  77
0401:  MOVF   3D,W
0402:  MOVWF  46
0403:  MOVF   3E,W
0404:  MOVWF  45
0405:  MOVF   3F,W
0406:  MOVWF  44
0407:  GOTO   410
0408:  MOVF   38,W
0409:  MOVWF  77
040A:  MOVF   39,W
040B:  MOVWF  46
040C:  MOVF   3A,W
040D:  MOVWF  45
040E:  MOVF   3B,W
040F:  MOVWF  44
0410:  MOVF   46,W
0411:  MOVWF  78
0412:  MOVF   45,W
0413:  MOVWF  79
0414:  MOVF   44,W
0415:  MOVWF  7A
0416:  GOTO   44F
0417:  CLRF   77
0418:  CLRF   78
0419:  CLRF   79
041A:  CLRF   7A
041B:  GOTO   44F
041C:  CLRF   43
041D:  COMF   44,F
041E:  COMF   45,F
041F:  COMF   46,F
0420:  COMF   43,F
0421:  INCF   43,F
0422:  BTFSS  03.2
0423:  GOTO   42A
0424:  INCF   44,F
0425:  BTFSS  03.2
0426:  GOTO   42A
0427:  INCF   45,F
0428:  BTFSC  03.2
0429:  INCF   46,F
042A:  BTFSC  42.0
042B:  GOTO   338
042C:  BTFSC  42.1
042D:  GOTO   37A
042E:  BTFSC  42.2
042F:  GOTO   3B0
0430:  GOTO   3DF
0431:  MOVF   00,W
0432:  ADDWF  44,F
0433:  BTFSS  03.0
0434:  GOTO   43B
0435:  INCF   45,F
0436:  BTFSS  03.2
0437:  GOTO   43B
0438:  INCF   46,F
0439:  BTFSC  03.2
043A:  BSF    40.0
043B:  DECF   04,F
043C:  MOVF   00,W
043D:  ADDWF  45,F
043E:  BTFSS  03.0
043F:  GOTO   443
0440:  INCF   46,F
0441:  BTFSC  03.2
0442:  BSF    40.0
0443:  DECF   04,F
0444:  MOVF   00,W
0445:  BTFSS  00.7
0446:  XORLW  80
0447:  ADDWF  46,F
0448:  BTFSC  03.0
0449:  BSF    40.0
044A:  BTFSC  42.4
044B:  GOTO   33F
044C:  BTFSC  42.5
044D:  GOTO   381
044E:  GOTO   3B7
044F:  BCF    03.5
0450:  RETURN
*
04BA:  MOVLW  8E
04BB:  MOVWF  77
04BC:  MOVF   34,W
04BD:  SUBWF  77,F
04BE:  MOVF   35,W
04BF:  MOVWF  79
04C0:  MOVF   36,W
04C1:  MOVWF  78
04C2:  BSF    79.7
04C3:  MOVF   77,F
04C4:  BTFSC  03.2
04C5:  GOTO   4D1
04C6:  BCF    03.0
04C7:  MOVF   79,F
04C8:  BTFSS  03.2
04C9:  GOTO   4CD
04CA:  MOVF   78,F
04CB:  BTFSC  03.2
04CC:  GOTO   4D1
04CD:  RRF    79,F
04CE:  RRF    78,F
04CF:  DECFSZ 77,F
04D0:  GOTO   4C6
04D1:  BTFSS  35.7
04D2:  GOTO   4D8
04D3:  COMF   78,F
04D4:  COMF   79,F
04D5:  INCF   78,F
04D6:  BTFSC  03.2
04D7:  INCF   79,F
*
06F7:  MOVF   0B,W
06F8:  MOVWF  4E
06F9:  BCF    0B.7
06FA:  BSF    03.5
06FB:  BSF    03.6
06FC:  BSF    0C.7
06FD:  BSF    0C.0
06FE:  NOP
06FF:  NOP
0700:  BCF    03.5
0701:  BCF    03.6
0702:  BTFSC  4E.7
0703:  BSF    0B.7
0704:  BTFSC  03.0
0705:  GOTO   72F
0706:  BSF    03.6
0707:  MOVF   0C,W
0708:  ANDLW  7F
0709:  BCF    03.6
070A:  MOVWF  4E
070B:  BSF    03.6
070C:  MOVF   0D,W
070D:  BCF    03.6
070E:  MOVWF  4F
070F:  BSF    03.6
0710:  MOVF   0F,W
0711:  BCF    03.6
0712:  MOVWF  50
0713:  MOVF   4E,W
0714:  BTFSS  0C.4
0715:  GOTO   714
0716:  MOVWF  19
0717:  MOVF   4F,W
0718:  BSF    03.6
0719:  MOVWF  0D
071A:  BCF    03.6
071B:  MOVF   50,W
071C:  BSF    03.6
071D:  MOVWF  0F
071E:  BCF    03.6
071F:  MOVF   0B,W
0720:  MOVWF  51
0721:  BCF    0B.7
0722:  BSF    03.5
0723:  BSF    03.6
0724:  BSF    0C.7
0725:  BSF    0C.0
0726:  NOP
0727:  NOP
0728:  BCF    03.5
0729:  BCF    03.6
072A:  BTFSC  51.7
072B:  BSF    0B.7
072C:  DECFSZ 4D,F
072D:  GOTO   72F
072E:  GOTO   74F
072F:  BSF    03.6
0730:  RLF    0C,W
0731:  RLF    0E,W
0732:  ANDLW  7F
0733:  BCF    03.6
0734:  MOVWF  4E
0735:  BSF    03.6
0736:  MOVF   0D,W
0737:  BCF    03.6
0738:  MOVWF  4F
0739:  BSF    03.6
073A:  MOVF   0F,W
073B:  BCF    03.6
073C:  MOVWF  50
073D:  MOVF   4E,W
073E:  BTFSS  0C.4
073F:  GOTO   73E
0740:  MOVWF  19
0741:  MOVF   4F,W
0742:  BSF    03.6
0743:  MOVWF  0D
0744:  BCF    03.6
0745:  MOVF   50,W
0746:  BSF    03.6
0747:  MOVWF  0F
0748:  INCF   0D,F
0749:  BTFSC  03.2
074A:  INCF   0F,F
074B:  BCF    03.0
074C:  BCF    03.6
074D:  DECFSZ 4D,F
074E:  GOTO   6F7
074F:  RETURN
0750:  CLRF   55
0751:  MOVF   04,W
0752:  MOVWF  54
0753:  BCF    55.0
0754:  BTFSC  03.7
0755:  BSF    55.0
0756:  SWAPF  4E,W
0757:  IORLW  F0
0758:  MOVWF  50
0759:  ADDWF  50,F
075A:  ADDLW  E2
075B:  MOVWF  51
075C:  ADDLW  32
075D:  MOVWF  53
075E:  MOVF   4E,W
075F:  ANDLW  0F
0760:  ADDWF  51,F
0761:  ADDWF  51,F
0762:  ADDWF  53,F
0763:  ADDLW  E9
0764:  MOVWF  52
0765:  ADDWF  52,F
0766:  ADDWF  52,F
0767:  SWAPF  4D,W
0768:  ANDLW  0F
0769:  ADDWF  52,F
076A:  ADDWF  53,F
076B:  RLF    52,F
076C:  RLF    53,F
076D:  COMF   53,F
076E:  RLF    53,F
076F:  MOVF   4D,W
0770:  ANDLW  0F
0771:  ADDWF  53,F
0772:  RLF    50,F
0773:  MOVLW  07
0774:  MOVWF  4F
0775:  MOVLW  0A
0776:  ADDWF  53,F
0777:  DECF   52,F
0778:  BTFSS  03.0
0779:  GOTO   776
077A:  ADDWF  52,F
077B:  DECF   51,F
077C:  BTFSS  03.0
077D:  GOTO   77A
077E:  ADDWF  51,F
077F:  DECF   50,F
0780:  BTFSS  03.0
0781:  GOTO   77E
0782:  ADDWF  50,F
0783:  DECF   4F,F
0784:  BTFSS  03.0
0785:  GOTO   782
0786:  MOVLW  4F
0787:  MOVWF  04
0788:  BCF    03.7
0789:  MOVLW  07
078A:  ANDWF  54,W
078B:  BCF    54.6
078C:  ADDWF  04,F
078D:  MOVLW  53
078E:  SUBWF  04,W
078F:  BTFSC  03.2
0790:  BSF    54.6
0791:  MOVF   00,W
0792:  MOVWF  77
0793:  BTFSS  03.2
0794:  GOTO   79D
0795:  BTFSC  54.6
0796:  GOTO   79D
0797:  BTFSC  54.4
0798:  GOTO   7A5
0799:  BTFSC  54.3
079A:  GOTO   79D
079B:  MOVLW  20
079C:  GOTO   7A0
079D:  BSF    54.3
079E:  BCF    54.4
079F:  MOVLW  30
07A0:  ADDWF  77,F
07A1:  MOVF   77,W
07A2:  BTFSS  0C.4
07A3:  GOTO   7A2
07A4:  MOVWF  19
07A5:  INCF   04,F
07A6:  BTFSS  54.6
07A7:  GOTO   78D
07A8:  BSF    0A.3
07A9:  BCF    0A.4
07AA:  GOTO   3E2 (RETURN)
07AB:  MOVF   5E,W
07AC:  SUBLW  B6
07AD:  MOVWF  5E
07AE:  CLRF   7A
07AF:  MOVF   5F,W
07B0:  MOVWF  62
07B1:  BSF    5F.7
07B2:  BCF    03.0
07B3:  RRF    5F,F
07B4:  RRF    60,F
07B5:  RRF    61,F
07B6:  RRF    7A,F
07B7:  RRF    79,F
07B8:  RRF    78,F
07B9:  RRF    77,F
07BA:  DECFSZ 5E,F
07BB:  GOTO   7B2
07BC:  BTFSS  62.7
07BD:  GOTO   7C9
07BE:  COMF   77,F
07BF:  COMF   78,F
07C0:  COMF   79,F
07C1:  COMF   7A,F
07C2:  INCF   77,F
07C3:  BTFSC  03.2
07C4:  INCF   78,F
07C5:  BTFSC  03.2
07C6:  INCF   79,F
07C7:  BTFSC  03.2
07C8:  INCF   7A,F
07C9:  RETURN
07CA:  MOVF   33,W
07CB:  MOVWF  04
07CC:  BCF    03.7
07CD:  BTFSC  34.0
07CE:  BSF    03.7
07CF:  MOVF   5E,W
07D0:  MOVWF  00
07D1:  INCF   04,F
07D2:  CLRF   00
07D3:  INCF   33,F
07D4:  BTFSC  03.2
07D5:  INCF   34,F
07D6:  RETURN
*
0800:  BTFSC  03.1
0801:  GOTO   005
0802:  MOVLW  66
0803:  MOVWF  04
0804:  BCF    03.7
0805:  CLRF   77
0806:  CLRF   78
0807:  CLRF   79
0808:  CLRF   7A
0809:  CLRF   66
080A:  CLRF   67
080B:  CLRF   68
080C:  CLRF   69
080D:  MOVF   65,W
080E:  IORWF  64,W
080F:  IORWF  63,W
0810:  IORWF  62,W
0811:  BTFSC  03.2
0812:  GOTO   043
0813:  MOVLW  20
0814:  MOVWF  6A
0815:  BCF    03.0
0816:  RLF    5E,F
0817:  RLF    5F,F
0818:  RLF    60,F
0819:  RLF    61,F
081A:  RLF    66,F
081B:  RLF    67,F
081C:  RLF    68,F
081D:  RLF    69,F
081E:  MOVF   65,W
081F:  SUBWF  69,W
0820:  BTFSS  03.2
0821:  GOTO   02C
0822:  MOVF   64,W
0823:  SUBWF  68,W
0824:  BTFSS  03.2
0825:  GOTO   02C
0826:  MOVF   63,W
0827:  SUBWF  67,W
0828:  BTFSS  03.2
0829:  GOTO   02C
082A:  MOVF   62,W
082B:  SUBWF  66,W
082C:  BTFSS  03.0
082D:  GOTO   03D
082E:  MOVF   62,W
082F:  SUBWF  66,F
0830:  MOVF   63,W
0831:  BTFSS  03.0
0832:  INCFSZ 63,W
0833:  SUBWF  67,F
0834:  MOVF   64,W
0835:  BTFSS  03.0
0836:  INCFSZ 64,W
0837:  SUBWF  68,F
0838:  MOVF   65,W
0839:  BTFSS  03.0
083A:  INCFSZ 65,W
083B:  SUBWF  69,F
083C:  BSF    03.0
083D:  RLF    77,F
083E:  RLF    78,F
083F:  RLF    79,F
0840:  RLF    7A,F
0841:  DECFSZ 6A,F
0842:  GOTO   015
0843:  MOVF   66,W
0844:  MOVWF  00
0845:  INCF   04,F
0846:  MOVF   67,W
0847:  MOVWF  00
0848:  INCF   04,F
0849:  MOVF   68,W
084A:  MOVWF  00
084B:  INCF   04,F
084C:  MOVF   69,W
084D:  MOVWF  00
084E:  RETURN
084F:  MOVF   04,W
0850:  MOVWF  52
0851:  MOVF   51,W
0852:  MOVWF  54
0853:  BTFSC  03.2
0854:  GOTO   078
0855:  MOVF   50,W
0856:  BSF    03.5
0857:  MOVWF  3B
0858:  BCF    03.5
0859:  MOVF   4F,W
085A:  BSF    03.5
085B:  MOVWF  3A
085C:  BCF    03.5
085D:  MOVF   4E,W
085E:  BSF    03.5
085F:  MOVWF  39
0860:  BCF    03.5
0861:  MOVF   4D,W
0862:  BSF    03.5
0863:  MOVWF  38
0864:  CLRF   3F
0865:  CLRF   3E
0866:  MOVLW  20
0867:  MOVWF  3D
0868:  MOVLW  82
0869:  MOVWF  3C
086A:  BCF    0A.3
086B:  BCF    03.5
086C:  CALL   068
086D:  BSF    0A.3
086E:  MOVF   7A,W
086F:  MOVWF  50
0870:  MOVF   79,W
0871:  MOVWF  4F
0872:  MOVF   78,W
0873:  MOVWF  4E
0874:  MOVF   77,W
0875:  MOVWF  4D
0876:  DECFSZ 54,F
0877:  GOTO   055
0878:  MOVF   50,W
0879:  MOVWF  61
087A:  MOVF   4F,W
087B:  MOVWF  60
087C:  MOVF   4E,W
087D:  MOVWF  5F
087E:  MOVF   4D,W
087F:  MOVWF  5E
0880:  BCF    0A.3
0881:  CALL   7AB
0882:  BSF    0A.3
0883:  MOVF   7A,W
0884:  MOVWF  50
0885:  MOVF   79,W
0886:  MOVWF  4F
0887:  MOVF   78,W
0888:  MOVWF  4E
0889:  MOVF   77,W
088A:  MOVWF  4D
088B:  BTFSS  50.7
088C:  GOTO   09A
088D:  DECF   52,F
088E:  BSF    52.5
088F:  COMF   4D,F
0890:  COMF   4E,F
0891:  COMF   4F,F
0892:  COMF   50,F
0893:  INCF   4D,F
0894:  BTFSC  03.2
0895:  INCF   4E,F
0896:  BTFSC  03.2
0897:  INCF   4F,F
0898:  BTFSC  03.2
0899:  INCF   50,F
089A:  MOVLW  3B
089B:  MOVWF  59
089C:  MOVLW  9A
089D:  MOVWF  58
089E:  MOVLW  CA
089F:  MOVWF  57
08A0:  CLRF   56
08A1:  MOVLW  0A
08A2:  MOVWF  54
08A3:  MOVF   51,W
08A4:  BTFSC  03.2
08A5:  INCF   52,F
08A6:  BSF    03.1
08A7:  MOVLW  4D
08A8:  MOVWF  04
08A9:  BCF    03.7
08AA:  MOVF   50,W
08AB:  MOVWF  61
08AC:  MOVF   4F,W
08AD:  MOVWF  60
08AE:  MOVF   4E,W
08AF:  MOVWF  5F
08B0:  MOVF   4D,W
08B1:  MOVWF  5E
08B2:  MOVF   59,W
08B3:  MOVWF  65
08B4:  MOVF   58,W
08B5:  MOVWF  64
08B6:  MOVF   57,W
08B7:  MOVWF  63
08B8:  MOVF   56,W
08B9:  MOVWF  62
08BA:  CALL   000
08BB:  MOVF   78,W
08BC:  MOVF   77,F
08BD:  BTFSS  03.2
08BE:  GOTO   0D2
08BF:  INCF   51,W
08C0:  SUBWF  54,W
08C1:  BTFSC  03.2
08C2:  GOTO   0D2
08C3:  MOVF   52,W
08C4:  BTFSC  03.2
08C5:  GOTO   0D4
08C6:  ANDLW  0F
08C7:  SUBWF  54,W
08C8:  BTFSC  03.2
08C9:  GOTO   0CC
08CA:  BTFSC  03.0
08CB:  GOTO   108
08CC:  BTFSC  52.7
08CD:  GOTO   108
08CE:  BTFSC  52.6
08CF:  GOTO   0D4
08D0:  MOVLW  20
08D1:  GOTO   103
08D2:  MOVLW  20
08D3:  ANDWF  52,F
08D4:  BTFSS  52.5
08D5:  GOTO   0E3
08D6:  BCF    52.5
08D7:  MOVF   51,W
08D8:  BTFSS  03.2
08D9:  DECF   52,F
08DA:  MOVF   77,W
08DB:  MOVWF  52
08DC:  MOVLW  2D
08DD:  BTFSS  0C.4
08DE:  GOTO   0DD
08DF:  MOVWF  19
08E0:  MOVF   52,W
08E1:  MOVWF  77
08E2:  CLRF   52
08E3:  MOVF   51,W
08E4:  SUBWF  54,W
08E5:  BTFSS  03.2
08E6:  GOTO   0F2
08E7:  MOVF   77,W
08E8:  MOVWF  52
08E9:  MOVLW  2E
08EA:  BTFSS  0C.4
08EB:  GOTO   0EA
08EC:  MOVWF  19
08ED:  MOVF   52,W
08EE:  MOVWF  77
08EF:  MOVLW  20
08F0:  ANDWF  52,F
08F1:  MOVLW  00
08F2:  MOVLW  30
08F3:  BTFSS  52.5
08F4:  GOTO   103
08F5:  BCF    52.5
08F6:  MOVF   51,W
08F7:  BTFSS  03.2
08F8:  DECF   52,F
08F9:  MOVF   77,W
08FA:  MOVWF  52
08FB:  MOVLW  2D
08FC:  BTFSS  0C.4
08FD:  GOTO   0FC
08FE:  MOVWF  19
08FF:  MOVF   52,W
0900:  MOVWF  77
0901:  CLRF   52
0902:  MOVLW  30
0903:  ADDWF  77,F
0904:  MOVF   77,W
0905:  BTFSS  0C.4
0906:  GOTO   105
0907:  MOVWF  19
0908:  BCF    03.1
0909:  MOVF   59,W
090A:  MOVWF  61
090B:  MOVF   58,W
090C:  MOVWF  60
090D:  MOVF   57,W
090E:  MOVWF  5F
090F:  MOVF   56,W
0910:  MOVWF  5E
0911:  CLRF   65
0912:  CLRF   64
0913:  CLRF   63
0914:  MOVLW  0A
0915:  MOVWF  62
0916:  CALL   000
0917:  MOVF   7A,W
0918:  MOVWF  59
0919:  MOVF   79,W
091A:  MOVWF  58
091B:  MOVF   78,W
091C:  MOVWF  57
091D:  MOVF   77,W
091E:  MOVWF  56
091F:  DECFSZ 54,F
0920:  GOTO   0A6
0921:  RETURN
0922:  MOVF   0B,W
0923:  MOVWF  4D
0924:  BCF    0B.7
0925:  BSF    03.5
0926:  BSF    03.6
0927:  BSF    0C.7
0928:  BSF    0C.0
0929:  NOP
092A:  NOP
092B:  BCF    03.5
092C:  BCF    03.6
092D:  BTFSC  4D.7
092E:  BSF    0B.7
092F:  BSF    03.6
0930:  MOVF   0C,W
0931:  ANDLW  7F
0932:  BTFSC  03.2
0933:  GOTO   17A
0934:  BCF    03.6
0935:  MOVWF  4D
0936:  BSF    03.6
0937:  MOVF   0D,W
0938:  BCF    03.6
0939:  MOVWF  4E
093A:  BSF    03.6
093B:  MOVF   0F,W
093C:  BCF    03.6
093D:  MOVWF  4F
093E:  MOVF   4D,W
093F:  MOVWF  5E
0940:  BCF    0A.3
0941:  CALL   7CA
0942:  BSF    0A.3
0943:  MOVF   4E,W
0944:  BSF    03.6
0945:  MOVWF  0D
0946:  BCF    03.6
0947:  MOVF   4F,W
0948:  BSF    03.6
0949:  MOVWF  0F
094A:  BCF    03.6
094B:  MOVF   0B,W
094C:  MOVWF  50
094D:  BCF    0B.7
094E:  BSF    03.5
094F:  BSF    03.6
0950:  BSF    0C.7
0951:  BSF    0C.0
0952:  NOP
0953:  NOP
0954:  BCF    03.5
0955:  BCF    03.6
0956:  BTFSC  50.7
0957:  BSF    0B.7
0958:  BSF    03.6
0959:  RLF    0C,W
095A:  RLF    0E,W
095B:  ANDLW  7F
095C:  BTFSC  03.2
095D:  GOTO   17A
095E:  BCF    03.6
095F:  MOVWF  4D
0960:  BSF    03.6
0961:  MOVF   0D,W
0962:  BCF    03.6
0963:  MOVWF  4E
0964:  BSF    03.6
0965:  MOVF   0F,W
0966:  BCF    03.6
0967:  MOVWF  4F
0968:  MOVF   4D,W
0969:  MOVWF  5E
096A:  BCF    0A.3
096B:  CALL   7CA
096C:  BSF    0A.3
096D:  MOVF   4E,W
096E:  BSF    03.6
096F:  MOVWF  0D
0970:  BCF    03.6
0971:  MOVF   4F,W
0972:  BSF    03.6
0973:  MOVWF  0F
0974:  INCF   0D,F
0975:  BTFSC  03.2
0976:  INCF   0F,F
0977:  BCF    03.6
0978:  GOTO   122
0979:  BSF    03.6
097A:  BCF    03.6
097B:  RETURN
097C:  MOVF   04,W
097D:  MOVWF  56
097E:  MOVF   55,W
097F:  MOVWF  58
0980:  BTFSC  03.2
0981:  GOTO   1A5
0982:  MOVF   54,W
0983:  BSF    03.5
0984:  MOVWF  3B
0985:  BCF    03.5
0986:  MOVF   53,W
0987:  BSF    03.5
0988:  MOVWF  3A
0989:  BCF    03.5
098A:  MOVF   52,W
098B:  BSF    03.5
098C:  MOVWF  39
098D:  BCF    03.5
098E:  MOVF   51,W
098F:  BSF    03.5
0990:  MOVWF  38
0991:  CLRF   3F
0992:  CLRF   3E
0993:  MOVLW  20
0994:  MOVWF  3D
0995:  MOVLW  82
0996:  MOVWF  3C
0997:  BCF    0A.3
0998:  BCF    03.5
0999:  CALL   068
099A:  BSF    0A.3
099B:  MOVF   7A,W
099C:  MOVWF  54
099D:  MOVF   79,W
099E:  MOVWF  53
099F:  MOVF   78,W
09A0:  MOVWF  52
09A1:  MOVF   77,W
09A2:  MOVWF  51
09A3:  DECFSZ 58,F
09A4:  GOTO   182
09A5:  MOVF   54,W
09A6:  MOVWF  61
09A7:  MOVF   53,W
09A8:  MOVWF  60
09A9:  MOVF   52,W
09AA:  MOVWF  5F
09AB:  MOVF   51,W
09AC:  MOVWF  5E
09AD:  BCF    0A.3
09AE:  CALL   7AB
09AF:  BSF    0A.3
09B0:  MOVF   7A,W
09B1:  MOVWF  54
09B2:  MOVF   79,W
09B3:  MOVWF  53
09B4:  MOVF   78,W
09B5:  MOVWF  52
09B6:  MOVF   77,W
09B7:  MOVWF  51
09B8:  BTFSS  54.7
09B9:  GOTO   1C7
09BA:  DECF   56,F
09BB:  BSF    56.5
09BC:  COMF   51,F
09BD:  COMF   52,F
09BE:  COMF   53,F
09BF:  COMF   54,F
09C0:  INCF   51,F
09C1:  BTFSC  03.2
09C2:  INCF   52,F
09C3:  BTFSC  03.2
09C4:  INCF   53,F
09C5:  BTFSC  03.2
09C6:  INCF   54,F
09C7:  MOVLW  3B
09C8:  MOVWF  5D
09C9:  MOVLW  9A
09CA:  MOVWF  5C
09CB:  MOVLW  CA
09CC:  MOVWF  5B
09CD:  CLRF   5A
09CE:  MOVLW  0A
09CF:  MOVWF  58
09D0:  MOVF   55,W
09D1:  BTFSC  03.2
09D2:  INCF   56,F
09D3:  BSF    03.1
09D4:  MOVLW  51
09D5:  MOVWF  04
09D6:  BCF    03.7
09D7:  MOVF   54,W
09D8:  MOVWF  61
09D9:  MOVF   53,W
09DA:  MOVWF  60
09DB:  MOVF   52,W
09DC:  MOVWF  5F
09DD:  MOVF   51,W
09DE:  MOVWF  5E
09DF:  MOVF   5D,W
09E0:  MOVWF  65
09E1:  MOVF   5C,W
09E2:  MOVWF  64
09E3:  MOVF   5B,W
09E4:  MOVWF  63
09E5:  MOVF   5A,W
09E6:  MOVWF  62
09E7:  CALL   000
09E8:  MOVF   78,W
09E9:  MOVF   77,F
09EA:  BTFSS  03.2
09EB:  GOTO   1FF
09EC:  INCF   55,W
09ED:  SUBWF  58,W
09EE:  BTFSC  03.2
09EF:  GOTO   1FF
09F0:  MOVF   56,W
09F1:  BTFSC  03.2
09F2:  GOTO   201
09F3:  ANDLW  0F
09F4:  SUBWF  58,W
09F5:  BTFSC  03.2
09F6:  GOTO   1F9
09F7:  BTFSC  03.0
09F8:  GOTO   239
09F9:  BTFSC  56.7
09FA:  GOTO   239
09FB:  BTFSC  56.6
09FC:  GOTO   201
09FD:  MOVLW  20
09FE:  GOTO   233
09FF:  MOVLW  20
0A00:  ANDWF  56,F
0A01:  BTFSS  56.5
0A02:  GOTO   211
0A03:  BCF    56.5
0A04:  MOVF   55,W
0A05:  BTFSS  03.2
0A06:  DECF   56,F
0A07:  MOVF   77,W
0A08:  MOVWF  56
0A09:  MOVLW  2D
0A0A:  MOVWF  5E
0A0B:  BCF    0A.3
0A0C:  CALL   7CA
0A0D:  BSF    0A.3
0A0E:  MOVF   56,W
0A0F:  MOVWF  77
0A10:  CLRF   56
0A11:  MOVF   55,W
0A12:  SUBWF  58,W
0A13:  BTFSS  03.2
0A14:  GOTO   221
0A15:  MOVF   77,W
0A16:  MOVWF  56
0A17:  MOVLW  2E
0A18:  MOVWF  5E
0A19:  BCF    0A.3
0A1A:  CALL   7CA
0A1B:  BSF    0A.3
0A1C:  MOVF   56,W
0A1D:  MOVWF  77
0A1E:  MOVLW  20
0A1F:  ANDWF  56,F
0A20:  MOVLW  00
0A21:  MOVLW  30
0A22:  BTFSS  56.5
0A23:  GOTO   233
0A24:  BCF    56.5
0A25:  MOVF   55,W
0A26:  BTFSS  03.2
0A27:  DECF   56,F
0A28:  MOVF   77,W
0A29:  MOVWF  56
0A2A:  MOVLW  2D
0A2B:  MOVWF  5E
0A2C:  BCF    0A.3
0A2D:  CALL   7CA
0A2E:  BSF    0A.3
0A2F:  MOVF   56,W
0A30:  MOVWF  77
0A31:  CLRF   56
0A32:  MOVLW  30
0A33:  ADDWF  77,F
0A34:  MOVF   77,W
0A35:  MOVWF  5E
0A36:  BCF    0A.3
0A37:  CALL   7CA
0A38:  BSF    0A.3
0A39:  BCF    03.1
0A3A:  MOVF   5D,W
0A3B:  MOVWF  61
0A3C:  MOVF   5C,W
0A3D:  MOVWF  60
0A3E:  MOVF   5B,W
0A3F:  MOVWF  5F
0A40:  MOVF   5A,W
0A41:  MOVWF  5E
0A42:  CLRF   65
0A43:  CLRF   64
0A44:  CLRF   63
0A45:  MOVLW  0A
0A46:  MOVWF  62
0A47:  CALL   000
0A48:  MOVF   7A,W
0A49:  MOVWF  5D
0A4A:  MOVF   79,W
0A4B:  MOVWF  5C
0A4C:  MOVF   78,W
0A4D:  MOVWF  5B
0A4E:  MOVF   77,W
0A4F:  MOVWF  5A
0A50:  DECFSZ 58,F
0A51:  GOTO   1D3
0A52:  RETURN
....................  
.................... #list 
....................  
....................  
.................... #device ADC=10 *=16 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
*
0451:  CLRF   70
0452:  CLRF   6F
0453:  CLRF   6E
0454:  MOVLW  7F
0455:  MOVWF  6D
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
0456:  MOVLW  7E
0457:  BSF    03.5
0458:  MOVWF  20
0459:  MOVLW  80
045A:  MOVWF  21
045B:  CLRF   22
045C:  CLRF   23
045D:  MOVLW  7A
045E:  MOVWF  24
045F:  MOVLW  2A
0460:  MOVWF  25
0461:  MOVLW  AA
0462:  MOVWF  26
0463:  MOVLW  A3
0464:  MOVWF  27
0465:  MOVLW  75
0466:  MOVWF  28
0467:  MOVLW  B6
0468:  MOVWF  29
0469:  MOVLW  09
046A:  MOVWF  2A
046B:  MOVLW  B4
046C:  MOVWF  2B
046D:  MOVLW  6F
046E:  MOVWF  2C
046F:  MOVLW  4F
0470:  MOVWF  2D
0471:  MOVLW  B6
0472:  MOVWF  2E
0473:  MOVLW  AA
0474:  MOVWF  2F
0475:  MOVLW  69
0476:  MOVWF  30
0477:  MOVLW  8B
0478:  MOVWF  31
0479:  MOVLW  F6
047A:  MOVWF  32
047B:  MOVLW  E8
047C:  MOVWF  33
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
047D:  BCF    03.5
047E:  MOVF   64,W
047F:  BSF    03.5
0480:  MOVWF  37
0481:  BCF    03.5
0482:  MOVF   63,W
0483:  BSF    03.5
0484:  MOVWF  36
0485:  BCF    03.5
0486:  MOVF   62,W
0487:  BSF    03.5
0488:  MOVWF  35
0489:  BCF    03.5
048A:  MOVF   61,W
048B:  BSF    03.5
048C:  MOVWF  34
048D:  CLRF   3B
048E:  CLRF   3A
048F:  CLRF   39
0490:  CLRF   38
0491:  BCF    03.5
0492:  CALL   2CA
0493:  BTFSS  03.0
0494:  GOTO   498
0495:  MOVF   62,W
0496:  XORLW  80
0497:  MOVWF  62
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
0498:  MOVF   64,W
0499:  BSF    03.5
049A:  MOVWF  3B
049B:  BCF    03.5
049C:  MOVF   63,W
049D:  BSF    03.5
049E:  MOVWF  3A
049F:  BCF    03.5
04A0:  MOVF   62,W
04A1:  BSF    03.5
04A2:  MOVWF  39
04A3:  BCF    03.5
04A4:  MOVF   61,W
04A5:  BSF    03.5
04A6:  MOVWF  38
04A7:  MOVLW  83
04A8:  MOVWF  3F
04A9:  MOVLW  F9
04AA:  MOVWF  3E
04AB:  MOVLW  22
04AC:  MOVWF  3D
04AD:  MOVLW  7E
04AE:  MOVWF  3C
04AF:  BCF    03.5
04B0:  CALL   068
04B1:  MOVF   7A,W
04B2:  BSF    03.5
04B3:  MOVWF  37
04B4:  MOVF   79,W
04B5:  MOVWF  36
04B6:  MOVF   78,W
04B7:  MOVWF  35
04B8:  MOVF   77,W
04B9:  MOVWF  34
*
04D8:  MOVF   78,W
04D9:  MOVWF  71
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
04DA:  BCF    03.5
04DB:  MOVF   64,W
04DC:  BSF    03.5
04DD:  MOVWF  3B
04DE:  BCF    03.5
04DF:  MOVF   63,W
04E0:  BSF    03.5
04E1:  MOVWF  3A
04E2:  BCF    03.5
04E3:  MOVF   62,W
04E4:  BSF    03.5
04E5:  MOVWF  39
04E6:  BCF    03.5
04E7:  MOVF   61,W
04E8:  BSF    03.5
04E9:  MOVWF  38
04EA:  MOVLW  83
04EB:  MOVWF  3F
04EC:  MOVLW  F9
04ED:  MOVWF  3E
04EE:  MOVLW  22
04EF:  MOVWF  3D
04F0:  MOVLW  7E
04F1:  MOVWF  3C
04F2:  BCF    03.5
04F3:  CALL   068
04F4:  MOVF   7A,W
04F5:  MOVWF  7E
04F6:  MOVF   79,W
04F7:  MOVWF  7D
04F8:  MOVF   78,W
04F9:  MOVWF  7C
04FA:  MOVF   77,W
04FB:  MOVWF  7B
04FC:  BSF    03.5
04FD:  CLRF   39
04FE:  MOVF   71,W
04FF:  MOVWF  38
0500:  BCF    03.5
0501:  CALL   049
0502:  BSF    03.1
0503:  MOVF   7E,W
0504:  BSF    03.5
0505:  MOVWF  3B
0506:  MOVF   7D,W
0507:  MOVWF  3A
0508:  MOVF   7C,W
0509:  MOVWF  39
050A:  MOVF   7B,W
050B:  MOVWF  38
050C:  MOVF   7A,W
050D:  MOVWF  3F
050E:  MOVF   79,W
050F:  MOVWF  3E
0510:  MOVF   78,W
0511:  MOVWF  3D
0512:  MOVF   77,W
0513:  MOVWF  3C
0514:  BCF    03.5
0515:  CALL   30B
0516:  MOVF   7A,W
0517:  MOVWF  76
0518:  MOVF   79,W
0519:  MOVWF  75
051A:  MOVF   78,W
051B:  MOVWF  74
051C:  MOVF   77,W
051D:  MOVWF  73
....................    quad = quad % 4;                    // quadrant (0 to 3) 
051E:  MOVLW  03
051F:  ANDWF  71,F
....................  
....................    if (quad == 0 || quad == 2) 
0520:  MOVF   71,F
0521:  BTFSC  03.2
0522:  GOTO   527
0523:  MOVF   71,W
0524:  SUBLW  02
0525:  BTFSS  03.2
0526:  GOTO   543
....................       t = frac * PI_DIV_BY_TWO; 
0527:  MOVF   76,W
0528:  BSF    03.5
0529:  MOVWF  3B
052A:  MOVF   75,W
052B:  MOVWF  3A
052C:  MOVF   74,W
052D:  MOVWF  39
052E:  MOVF   73,W
052F:  MOVWF  38
0530:  MOVLW  DB
0531:  MOVWF  3F
0532:  MOVLW  0F
0533:  MOVWF  3E
0534:  MOVLW  49
0535:  MOVWF  3D
0536:  MOVLW  7F
0537:  MOVWF  3C
0538:  BCF    03.5
0539:  CALL   068
053A:  MOVF   7A,W
053B:  MOVWF  6C
053C:  MOVF   79,W
053D:  MOVWF  6B
053E:  MOVF   78,W
053F:  MOVWF  6A
0540:  MOVF   77,W
0541:  MOVWF  69
0542:  GOTO   5AE
....................    else if (quad == 1) 
0543:  DECFSZ 71,W
0544:  GOTO   57A
....................       t = (1-frac) * PI_DIV_BY_TWO; 
0545:  BSF    03.1
0546:  BSF    03.5
0547:  CLRF   3B
0548:  CLRF   3A
0549:  CLRF   39
054A:  MOVLW  7F
054B:  MOVWF  38
054C:  MOVF   76,W
054D:  MOVWF  3F
054E:  MOVF   75,W
054F:  MOVWF  3E
0550:  MOVF   74,W
0551:  MOVWF  3D
0552:  MOVF   73,W
0553:  MOVWF  3C
0554:  BCF    03.5
0555:  CALL   30B
0556:  MOVF   7A,W
0557:  MOVWF  7E
0558:  MOVF   79,W
0559:  MOVWF  7D
055A:  MOVF   78,W
055B:  MOVWF  7C
055C:  MOVF   77,W
055D:  MOVWF  7B
055E:  MOVF   7E,W
055F:  BSF    03.5
0560:  MOVWF  3B
0561:  MOVF   7D,W
0562:  MOVWF  3A
0563:  MOVF   7C,W
0564:  MOVWF  39
0565:  MOVF   7B,W
0566:  MOVWF  38
0567:  MOVLW  DB
0568:  MOVWF  3F
0569:  MOVLW  0F
056A:  MOVWF  3E
056B:  MOVLW  49
056C:  MOVWF  3D
056D:  MOVLW  7F
056E:  MOVWF  3C
056F:  BCF    03.5
0570:  CALL   068
0571:  MOVF   7A,W
0572:  MOVWF  6C
0573:  MOVF   79,W
0574:  MOVWF  6B
0575:  MOVF   78,W
0576:  MOVWF  6A
0577:  MOVF   77,W
0578:  MOVWF  69
0579:  GOTO   5AE
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
057A:  BSF    03.1
057B:  MOVF   76,W
057C:  BSF    03.5
057D:  MOVWF  3B
057E:  MOVF   75,W
057F:  MOVWF  3A
0580:  MOVF   74,W
0581:  MOVWF  39
0582:  MOVF   73,W
0583:  MOVWF  38
0584:  CLRF   3F
0585:  CLRF   3E
0586:  CLRF   3D
0587:  MOVLW  7F
0588:  MOVWF  3C
0589:  BCF    03.5
058A:  CALL   30B
058B:  MOVF   7A,W
058C:  MOVWF  7E
058D:  MOVF   79,W
058E:  MOVWF  7D
058F:  MOVF   78,W
0590:  MOVWF  7C
0591:  MOVF   77,W
0592:  MOVWF  7B
0593:  MOVF   7A,W
0594:  BSF    03.5
0595:  MOVWF  3B
0596:  MOVF   79,W
0597:  MOVWF  3A
0598:  MOVF   78,W
0599:  MOVWF  39
059A:  MOVF   77,W
059B:  MOVWF  38
059C:  MOVLW  DB
059D:  MOVWF  3F
059E:  MOVLW  0F
059F:  MOVWF  3E
05A0:  MOVLW  49
05A1:  MOVWF  3D
05A2:  MOVLW  7F
05A3:  MOVWF  3C
05A4:  BCF    03.5
05A5:  CALL   068
05A6:  MOVF   7A,W
05A7:  MOVWF  6C
05A8:  MOVF   79,W
05A9:  MOVWF  6B
05AA:  MOVF   78,W
05AB:  MOVWF  6A
05AC:  MOVF   77,W
05AD:  MOVWF  69
....................  
....................    y = 1.0; 
05AE:  CLRF   68
05AF:  CLRF   67
05B0:  CLRF   66
05B1:  MOVLW  7F
05B2:  MOVWF  65
....................    t = t * t; 
05B3:  MOVF   6C,W
05B4:  BSF    03.5
05B5:  MOVWF  3B
05B6:  BCF    03.5
05B7:  MOVF   6B,W
05B8:  BSF    03.5
05B9:  MOVWF  3A
05BA:  BCF    03.5
05BB:  MOVF   6A,W
05BC:  BSF    03.5
05BD:  MOVWF  39
05BE:  BCF    03.5
05BF:  MOVF   69,W
05C0:  BSF    03.5
05C1:  MOVWF  38
05C2:  BCF    03.5
05C3:  MOVF   6C,W
05C4:  BSF    03.5
05C5:  MOVWF  3F
05C6:  BCF    03.5
05C7:  MOVF   6B,W
05C8:  BSF    03.5
05C9:  MOVWF  3E
05CA:  BCF    03.5
05CB:  MOVF   6A,W
05CC:  BSF    03.5
05CD:  MOVWF  3D
05CE:  BCF    03.5
05CF:  MOVF   69,W
05D0:  BSF    03.5
05D1:  MOVWF  3C
05D2:  BCF    03.5
05D3:  CALL   068
05D4:  MOVF   7A,W
05D5:  MOVWF  6C
05D6:  MOVF   79,W
05D7:  MOVWF  6B
05D8:  MOVF   78,W
05D9:  MOVWF  6A
05DA:  MOVF   77,W
05DB:  MOVWF  69
....................    for (i = 0; i <= 4; i++) 
05DC:  CLRF   72
05DD:  MOVF   72,W
05DE:  SUBLW  04
05DF:  BTFSS  03.0
05E0:  GOTO   665
....................    { 
....................       t2 = t2 * t; 
05E1:  MOVF   70,W
05E2:  BSF    03.5
05E3:  MOVWF  3B
05E4:  BCF    03.5
05E5:  MOVF   6F,W
05E6:  BSF    03.5
05E7:  MOVWF  3A
05E8:  BCF    03.5
05E9:  MOVF   6E,W
05EA:  BSF    03.5
05EB:  MOVWF  39
05EC:  BCF    03.5
05ED:  MOVF   6D,W
05EE:  BSF    03.5
05EF:  MOVWF  38
05F0:  BCF    03.5
05F1:  MOVF   6C,W
05F2:  BSF    03.5
05F3:  MOVWF  3F
05F4:  BCF    03.5
05F5:  MOVF   6B,W
05F6:  BSF    03.5
05F7:  MOVWF  3E
05F8:  BCF    03.5
05F9:  MOVF   6A,W
05FA:  BSF    03.5
05FB:  MOVWF  3D
05FC:  BCF    03.5
05FD:  MOVF   69,W
05FE:  BSF    03.5
05FF:  MOVWF  3C
0600:  BCF    03.5
0601:  CALL   068
0602:  MOVF   7A,W
0603:  MOVWF  70
0604:  MOVF   79,W
0605:  MOVWF  6F
0606:  MOVF   78,W
0607:  MOVWF  6E
0608:  MOVF   77,W
0609:  MOVWF  6D
....................       y = y + p[i] * t2; 
060A:  RLF    72,W
060B:  MOVWF  77
060C:  RLF    77,F
060D:  MOVLW  FC
060E:  ANDWF  77,F
060F:  MOVF   77,W
0610:  ADDLW  A0
0611:  MOVWF  04
0612:  BCF    03.7
0613:  MOVF   00,W
0614:  MOVWF  7B
0615:  INCF   04,F
0616:  MOVF   00,W
0617:  MOVWF  7C
0618:  INCF   04,F
0619:  MOVF   00,W
061A:  MOVWF  7D
061B:  INCF   04,F
061C:  MOVF   00,W
061D:  MOVWF  7E
061E:  BSF    03.5
061F:  MOVWF  3B
0620:  MOVF   7D,W
0621:  MOVWF  3A
0622:  MOVF   7C,W
0623:  MOVWF  39
0624:  MOVF   7B,W
0625:  MOVWF  38
0626:  MOVF   70,W
0627:  MOVWF  3F
0628:  BCF    03.5
0629:  MOVF   6F,W
062A:  BSF    03.5
062B:  MOVWF  3E
062C:  BCF    03.5
062D:  MOVF   6E,W
062E:  BSF    03.5
062F:  MOVWF  3D
0630:  BCF    03.5
0631:  MOVF   6D,W
0632:  BSF    03.5
0633:  MOVWF  3C
0634:  BCF    03.5
0635:  CALL   068
0636:  CLRF   7C
0637:  MOVF   04,W
0638:  MOVWF  7B
0639:  BCF    7C.0
063A:  BTFSC  03.7
063B:  BSF    7C.0
063C:  BCF    03.1
063D:  MOVF   68,W
063E:  BSF    03.5
063F:  MOVWF  3B
0640:  BCF    03.5
0641:  MOVF   67,W
0642:  BSF    03.5
0643:  MOVWF  3A
0644:  BCF    03.5
0645:  MOVF   66,W
0646:  BSF    03.5
0647:  MOVWF  39
0648:  BCF    03.5
0649:  MOVF   65,W
064A:  BSF    03.5
064B:  MOVWF  38
064C:  MOVF   7A,W
064D:  MOVWF  3F
064E:  MOVF   79,W
064F:  MOVWF  3E
0650:  MOVF   78,W
0651:  MOVWF  3D
0652:  MOVF   77,W
0653:  MOVWF  3C
0654:  BCF    03.5
0655:  CALL   30B
0656:  MOVF   7B,W
0657:  MOVWF  04
0658:  BCF    03.7
0659:  BTFSC  7C.0
065A:  BSF    03.7
065B:  MOVF   7A,W
065C:  MOVWF  68
065D:  MOVF   79,W
065E:  MOVWF  67
065F:  MOVF   78,W
0660:  MOVWF  66
0661:  MOVF   77,W
0662:  MOVWF  65
0663:  INCF   72,F
0664:  GOTO   5DD
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
0665:  MOVF   71,W
0666:  SUBLW  02
0667:  BTFSC  03.2
0668:  GOTO   66B
0669:  DECFSZ 71,W
066A:  GOTO   66E
....................       y = -y;  // correct sign 
066B:  MOVF   66,W
066C:  XORLW  80
066D:  MOVWF  66
....................  
....................    return (y); 
066E:  MOVF   65,W
066F:  MOVWF  77
0670:  MOVF   66,W
0671:  MOVWF  78
0672:  MOVF   67,W
0673:  MOVWF  79
0674:  MOVF   68,W
0675:  MOVWF  7A
0676:  RETURN
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
*
06B0:  BSF    03.1
06B1:  MOVF   5C,W
06B2:  BSF    03.5
06B3:  MOVWF  3B
06B4:  BCF    03.5
06B5:  MOVF   5B,W
06B6:  BSF    03.5
06B7:  MOVWF  3A
06B8:  BCF    03.5
06B9:  MOVF   5A,W
06BA:  BSF    03.5
06BB:  MOVWF  39
06BC:  BCF    03.5
06BD:  MOVF   59,W
06BE:  BSF    03.5
06BF:  MOVWF  38
06C0:  MOVLW  DB
06C1:  MOVWF  3F
06C2:  MOVLW  0F
06C3:  MOVWF  3E
06C4:  MOVLW  49
06C5:  MOVWF  3D
06C6:  MOVLW  7F
06C7:  MOVWF  3C
06C8:  BCF    03.5
06C9:  CALL   30B
06CA:  MOVF   7A,W
06CB:  MOVWF  60
06CC:  MOVF   79,W
06CD:  MOVWF  5F
06CE:  MOVF   78,W
06CF:  MOVWF  5E
06D0:  MOVF   77,W
06D1:  MOVWF  5D
06D2:  MOVF   7A,W
06D3:  MOVWF  64
06D4:  MOVF   79,W
06D5:  MOVWF  63
06D6:  MOVF   78,W
06D7:  MOVWF  62
06D8:  MOVF   77,W
06D9:  MOVWF  61
06DA:  CALL   451
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
*
0677:  MOVF   50,W
0678:  MOVWF  64
0679:  MOVF   4F,W
067A:  MOVWF  63
067B:  MOVF   4E,W
067C:  MOVWF  62
067D:  MOVF   4D,W
067E:  MOVWF  61
067F:  CALL   451
0680:  MOVF   7A,W
0681:  MOVWF  54
0682:  MOVF   79,W
0683:  MOVWF  53
0684:  MOVF   78,W
0685:  MOVWF  52
0686:  MOVF   77,W
0687:  MOVWF  51
....................    if (c == 0.0) 
0688:  MOVF   54,W
0689:  BSF    03.5
068A:  MOVWF  37
068B:  BCF    03.5
068C:  MOVF   53,W
068D:  BSF    03.5
068E:  MOVWF  36
068F:  BCF    03.5
0690:  MOVF   52,W
0691:  BSF    03.5
0692:  MOVWF  35
0693:  BCF    03.5
0694:  MOVF   51,W
0695:  BSF    03.5
0696:  MOVWF  34
0697:  CLRF   3B
0698:  CLRF   3A
0699:  CLRF   39
069A:  CLRF   38
069B:  BCF    03.5
069C:  CALL   2CA
069D:  BTFSS  03.2
069E:  GOTO   6A8
....................       return (1.0e+36); 
069F:  MOVLW  F6
06A0:  MOVWF  77
06A1:  MOVLW  40
06A2:  MOVWF  78
06A3:  MOVLW  97
06A4:  MOVWF  79
06A5:  MOVLW  CE
06A6:  MOVWF  7A
06A7:  GOTO   6F4
....................  
....................    s = sin(x); 
06A8:  MOVF   50,W
06A9:  MOVWF  5C
06AA:  MOVF   4F,W
06AB:  MOVWF  5B
06AC:  MOVF   4E,W
06AD:  MOVWF  5A
06AE:  MOVF   4D,W
06AF:  MOVWF  59
*
06DB:  MOVF   7A,W
06DC:  MOVWF  58
06DD:  MOVF   79,W
06DE:  MOVWF  57
06DF:  MOVF   78,W
06E0:  MOVWF  56
06E1:  MOVF   77,W
06E2:  MOVWF  55
....................    return(s/c); 
06E3:  MOVF   58,W
06E4:  MOVWF  5C
06E5:  MOVF   57,W
06E6:  MOVWF  5B
06E7:  MOVF   56,W
06E8:  MOVWF  5A
06E9:  MOVF   55,W
06EA:  MOVWF  59
06EB:  MOVF   54,W
06EC:  MOVWF  60
06ED:  MOVF   53,W
06EE:  MOVWF  5F
06EF:  MOVF   52,W
06F0:  MOVWF  5E
06F1:  MOVF   51,W
06F2:  MOVWF  5D
06F3:  CALL   0DF
06F4:  BSF    0A.3
06F5:  BCF    0A.4
06F6:  GOTO   363 (RETURN)
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... #FUSES NOWDT //No Watch Dog Timer 
.................... #FUSES PUT //Power Up Timer 
.................... #FUSES NOMCLR //Master Clear pin not enabled 
.................... #FUSES NOPROTECT //Code not protected from reading 
.................... #FUSES NOCPD //No EE protection 
.................... #FUSES BROWNOUT //Brownout reset 
.................... #FUSES IESO //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG //No Debug mode for ICD 
.................... #FUSES NOWRT //Program memory not write protected 
.................... #FUSES BORV40 //Brodddddwnout reset at 4.0V 
.................... #FUSES RESERVED //Used to set the reserved FUSE bits 
.................... #FUSES INTRC_IO  
....................  
.................... #use delay(clock=8M) 
*
0035:  MOVLW  4E
0036:  MOVWF  04
0037:  BCF    03.7
0038:  MOVF   00,W
0039:  BTFSC  03.2
003A:  GOTO   048
003B:  MOVLW  02
003C:  MOVWF  78
003D:  CLRF   77
003E:  DECFSZ 77,F
003F:  GOTO   03E
0040:  DECFSZ 78,F
0041:  GOTO   03D
0042:  MOVLW  97
0043:  MOVWF  77
0044:  DECFSZ 77,F
0045:  GOTO   044
0046:  DECFSZ 00,F
0047:  GOTO   03B
0048:  RETURN
....................  
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #use i2c(MASTER, I2C1, FORCE_HW) 
*
026A:  BCF    14.7
026B:  BCF    0C.3
026C:  MOVF   53,W
026D:  MOVWF  13
026E:  MOVLW  02
026F:  BTFSC  14.7
0270:  GOTO   278
0271:  BTFSS  0C.3
0272:  GOTO   271
0273:  MOVLW  00
0274:  BSF    03.5
0275:  BTFSC  11.6
0276:  MOVLW  01
0277:  BCF    03.5
0278:  MOVWF  78
0279:  RETURN
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
.................... #define SLAVE_ADDRESS  0xB0 
.................... #define DISPLAY_ADDRESS 0xB4 
.................... #define REGISTER_SIZE  8    
.................... #define DISPLAY_CMD_SEND_VALUE 2 
.................... #define DISPLAY_CMD_SEND_LONG_TEXT 5 
.................... #define DISPLAY_CMD_CLS 6 
.................... #define DISPLAY_CMD_SETPOS 8 
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... int16 rotaryR; 
.................... float degree,distance,tall,rad; 
....................  
.................... void displayLongText(char* text) { 
....................  
....................    int i ; 
....................    i2c_start(); 
*
02A1:  BSF    03.5
02A2:  BSF    11.0
02A3:  BTFSC  11.0
02A4:  GOTO   2A3
....................    i2c_write(DISPLAY_ADDRESS); 
02A5:  MOVLW  B4
02A6:  BCF    03.5
02A7:  MOVWF  53
02A8:  CALL   26A
....................    i2c_write(DISPLAY_CMD_SEND_LONG_TEXT); 
02A9:  MOVLW  05
02AA:  MOVWF  53
02AB:  CALL   26A
....................  
....................    for(i=0;text[i]!='\0';i++) 
02AC:  CLRF   51
02AD:  MOVF   51,W
02AE:  ADDWF  4F,W
02AF:  MOVWF  04
02B0:  BCF    03.7
02B1:  BTFSC  50.0
02B2:  BSF    03.7
02B3:  MOVF   00,F
02B4:  BTFSC  03.2
02B5:  GOTO   2C2
....................    { 
....................       i2c_write(text[i]); 
02B6:  MOVF   51,W
02B7:  ADDWF  4F,W
02B8:  MOVWF  04
02B9:  BCF    03.7
02BA:  BTFSC  50.0
02BB:  BSF    03.7
02BC:  MOVF   00,W
02BD:  MOVWF  52
02BE:  MOVWF  53
02BF:  CALL   26A
02C0:  INCF   51,F
02C1:  GOTO   2AD
....................  
....................    } 
....................    i2c_write('\0'); 
02C2:  CLRF   53
02C3:  CALL   26A
....................    i2c_stop(); 
02C4:  BSF    03.5
02C5:  BSF    11.2
02C6:  BTFSC  11.2
02C7:  GOTO   2C6
02C8:  BCF    03.5
02C9:  RETURN
....................  
.................... } 
....................  
.................... void clearDisplay(){ 
....................  
....................    i2c_start(); 
*
027A:  BSF    03.5
027B:  BSF    11.0
027C:  BTFSC  11.0
027D:  GOTO   27C
....................    i2c_write(DISPLAY_ADDRESS); 
027E:  MOVLW  B4
027F:  BCF    03.5
0280:  MOVWF  53
0281:  CALL   26A
....................    i2c_write(DISPLAY_CMD_CLS); 
0282:  MOVLW  06
0283:  MOVWF  53
0284:  CALL   26A
....................    i2c_stop(); 
0285:  BSF    03.5
0286:  BSF    11.2
0287:  BTFSC  11.2
0288:  GOTO   287
0289:  BCF    03.5
028A:  RETURN
.................... } 
....................  
.................... void setDisplayPos(int pos){ 
....................    i2c_start(); 
028B:  BSF    03.5
028C:  BSF    11.0
028D:  BTFSC  11.0
028E:  GOTO   28D
....................    i2c_write(DISPLAY_ADDRESS); 
028F:  MOVLW  B4
0290:  BCF    03.5
0291:  MOVWF  53
0292:  CALL   26A
....................    i2c_write(DISPLAY_CMD_SETPOS); 
0293:  MOVLW  08
0294:  MOVWF  53
0295:  CALL   26A
....................    i2c_write(pos); 
0296:  MOVF   4D,W
0297:  MOVWF  53
0298:  CALL   26A
....................    i2c_write('\0'); 
0299:  CLRF   53
029A:  CALL   26A
....................    i2c_stop(); 
029B:  BSF    03.5
029C:  BSF    11.2
029D:  BTFSC  11.2
029E:  GOTO   29D
029F:  BCF    03.5
02A0:  RETURN
.................... } 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
....................  
.................... float distanceFromUltrasonic(){ 
....................  
....................    float distance; 
....................    output_high(PIN_C0); 
*
01A9:  BCF    20.0
01AA:  MOVF   20,W
01AB:  BSF    03.5
01AC:  MOVWF  07
01AD:  BCF    03.5
01AE:  BSF    07.0
....................    delay_us(20); 
01AF:  MOVLW  0D
01B0:  MOVWF  77
01B1:  DECFSZ 77,F
01B2:  GOTO   1B1
....................    output_low(PIN_C0); 
01B3:  BCF    20.0
01B4:  MOVF   20,W
01B5:  BSF    03.5
01B6:  MOVWF  07
01B7:  BCF    03.5
01B8:  BCF    07.0
....................     
....................    while(!input(PIN_C1)) {} 
01B9:  BSF    20.1
01BA:  MOVF   20,W
01BB:  BSF    03.5
01BC:  MOVWF  07
01BD:  BCF    03.5
01BE:  BTFSS  07.1
01BF:  GOTO   1B9
....................    set_timer1(0); 
01C0:  CLRF   0E
01C1:  CLRF   0F
01C2:  CLRF   0E
....................    while(input(PIN_C1)) { 
01C3:  BSF    20.1
01C4:  MOVF   20,W
01C5:  BSF    03.5
01C6:  MOVWF  07
01C7:  BCF    03.5
01C8:  BTFSS  07.1
01C9:  GOTO   1E9
....................    if(get_timer1() >= 65534) return -1; 
01CA:  MOVF   0F,W
01CB:  MOVWF  7A
01CC:  MOVF   0E,W
01CD:  MOVWF  77
01CE:  MOVF   0F,W
01CF:  SUBWF  7A,W
01D0:  BTFSS  03.2
01D1:  GOTO   1CA
01D2:  MOVF   77,W
01D3:  MOVWF  51
01D4:  MOVF   7A,W
01D5:  MOVWF  52
01D6:  MOVF   52,W
01D7:  SUBLW  FE
01D8:  BTFSC  03.0
01D9:  GOTO   1E8
01DA:  XORLW  FF
01DB:  BTFSS  03.2
01DC:  GOTO   1E1
01DD:  MOVF   51,W
01DE:  SUBLW  FD
01DF:  BTFSC  03.0
01E0:  GOTO   1E8
01E1:  MOVLW  7F
01E2:  MOVWF  77
01E3:  MOVLW  80
01E4:  MOVWF  78
01E5:  CLRF   79
01E6:  CLRF   7A
01E7:  GOTO   267
01E8:  GOTO   1C3
....................    } 
....................    distance = get_timer1()*4*0.0005; //convert time to ms 
01E9:  MOVF   0F,W
01EA:  MOVWF  7A
01EB:  MOVF   0E,W
01EC:  MOVWF  77
01ED:  MOVF   0F,W
01EE:  SUBWF  7A,W
01EF:  BTFSS  03.2
01F0:  GOTO   1E9
01F1:  MOVF   77,W
01F2:  MOVWF  51
01F3:  MOVF   7A,W
01F4:  MOVWF  52
01F5:  RLF    51,F
01F6:  RLF    52,F
01F7:  RLF    51,F
01F8:  RLF    52,F
01F9:  MOVLW  FC
01FA:  ANDWF  51,F
01FB:  MOVF   52,W
01FC:  BSF    03.5
01FD:  MOVWF  39
01FE:  BCF    03.5
01FF:  MOVF   51,W
0200:  BSF    03.5
0201:  MOVWF  38
0202:  BCF    03.5
0203:  CALL   049
0204:  MOVF   7A,W
0205:  BSF    03.5
0206:  MOVWF  3B
0207:  MOVF   79,W
0208:  MOVWF  3A
0209:  MOVF   78,W
020A:  MOVWF  39
020B:  MOVF   77,W
020C:  MOVWF  38
020D:  MOVLW  6F
020E:  MOVWF  3F
020F:  MOVLW  12
0210:  MOVWF  3E
0211:  MOVLW  03
0212:  MOVWF  3D
0213:  MOVLW  74
0214:  MOVWF  3C
0215:  BCF    03.5
0216:  CALL   068
0217:  MOVF   7A,W
0218:  MOVWF  50
0219:  MOVF   79,W
021A:  MOVWF  4F
021B:  MOVF   78,W
021C:  MOVWF  4E
021D:  MOVF   77,W
021E:  MOVWF  4D
....................    distance = distance *0.3497/* metre/ms*/  *100; // distance in cm 
021F:  MOVF   50,W
0220:  BSF    03.5
0221:  MOVWF  3B
0222:  BCF    03.5
0223:  MOVF   4F,W
0224:  BSF    03.5
0225:  MOVWF  3A
0226:  BCF    03.5
0227:  MOVF   4E,W
0228:  BSF    03.5
0229:  MOVWF  39
022A:  BCF    03.5
022B:  MOVF   4D,W
022C:  BSF    03.5
022D:  MOVWF  38
022E:  MOVLW  E1
022F:  MOVWF  3F
0230:  MOVLW  0B
0231:  MOVWF  3E
0232:  MOVLW  33
0233:  MOVWF  3D
0234:  MOVLW  7D
0235:  MOVWF  3C
0236:  BCF    03.5
0237:  CALL   068
0238:  MOVF   7A,W
0239:  MOVWF  54
023A:  MOVF   79,W
023B:  MOVWF  53
023C:  MOVF   78,W
023D:  MOVWF  52
023E:  MOVF   77,W
023F:  MOVWF  51
0240:  MOVF   7A,W
0241:  BSF    03.5
0242:  MOVWF  3B
0243:  BCF    03.5
0244:  MOVF   79,W
0245:  BSF    03.5
0246:  MOVWF  3A
0247:  BCF    03.5
0248:  MOVF   78,W
0249:  BSF    03.5
024A:  MOVWF  39
024B:  BCF    03.5
024C:  MOVF   77,W
024D:  BSF    03.5
024E:  MOVWF  38
024F:  CLRF   3F
0250:  CLRF   3E
0251:  MOVLW  48
0252:  MOVWF  3D
0253:  MOVLW  85
0254:  MOVWF  3C
0255:  BCF    03.5
0256:  CALL   068
0257:  MOVF   7A,W
0258:  MOVWF  50
0259:  MOVF   79,W
025A:  MOVWF  4F
025B:  MOVF   78,W
025C:  MOVWF  4E
025D:  MOVF   77,W
025E:  MOVWF  4D
....................  
....................        
....................    return distance ; 
025F:  MOVF   4D,W
0260:  MOVWF  77
0261:  MOVF   4E,W
0262:  MOVWF  78
0263:  MOVF   4F,W
0264:  MOVWF  79
0265:  MOVF   50,W
0266:  MOVWF  7A
0267:  BSF    0A.3
0268:  BCF    0A.4
0269:  GOTO   2FE (RETURN)
....................      
.................... } 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //READ DISTANCE ULTRASONIC 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
....................  
....................  
....................  
.................... void main() { 
*
0A53:  MOVF   03,W
0A54:  ANDLW  1F
0A55:  MOVWF  03
0A56:  MOVLW  71
0A57:  BSF    03.5
0A58:  MOVWF  0F
0A59:  CLRF   10
0A5A:  MOVF   0F,W
0A5B:  BSF    03.6
0A5C:  BCF    07.3
0A5D:  MOVLW  0C
0A5E:  BCF    03.6
0A5F:  MOVWF  19
0A60:  MOVLW  A2
0A61:  MOVWF  18
0A62:  MOVLW  90
0A63:  BCF    03.5
0A64:  MOVWF  18
0A65:  MOVLW  FF
0A66:  MOVWF  20
0A67:  BSF    20.3
0A68:  MOVF   20,W
0A69:  BSF    03.5
0A6A:  MOVWF  07
0A6B:  BCF    03.5
0A6C:  BSF    20.4
0A6D:  MOVF   20,W
0A6E:  BSF    03.5
0A6F:  MOVWF  07
0A70:  MOVLW  13
0A71:  MOVWF  13
0A72:  MOVLW  28
0A73:  BCF    03.5
0A74:  MOVWF  14
0A75:  BSF    03.5
0A76:  BSF    14.7
0A77:  BCF    14.6
0A78:  BCF    03.5
0A79:  CLRF   34
0A7A:  CLRF   33
0A7B:  BSF    03.5
0A7C:  BSF    03.6
0A7D:  MOVF   09,W
0A7E:  ANDLW  C0
0A7F:  MOVWF  09
0A80:  BCF    03.6
0A81:  BCF    1F.4
0A82:  BCF    1F.5
0A83:  MOVLW  00
0A84:  BSF    03.6
0A85:  MOVWF  08
0A86:  BCF    03.5
0A87:  CLRF   07
0A88:  CLRF   08
0A89:  CLRF   09
0A8A:  BCF    03.7
....................     setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);  
0A8B:  MOVLW  35
0A8C:  BCF    03.6
0A8D:  MOVWF  10
....................  
....................     
....................     setup_adc_ports(sAN0);  
0A8E:  BSF    03.5
0A8F:  BSF    03.6
0A90:  MOVF   09,W
0A91:  ANDLW  C0
0A92:  MOVWF  09
0A93:  BCF    03.6
0A94:  BCF    1F.4
0A95:  BCF    1F.5
0A96:  MOVLW  01
0A97:  BSF    03.6
0A98:  MOVWF  08
....................     setup_adc( ADC_CLOCK_INTERNAL );  
0A99:  BCF    03.5
0A9A:  BCF    03.6
0A9B:  BSF    1F.6
0A9C:  BSF    1F.7
0A9D:  BSF    03.5
0A9E:  BSF    1F.7
0A9F:  BCF    03.5
0AA0:  BSF    1F.0
....................  
....................     set_adc_channel( 0 );  
0AA1:  MOVLW  00
0AA2:  MOVWF  78
0AA3:  MOVF   1F,W
0AA4:  ANDLW  C3
0AA5:  IORWF  78,W
0AA6:  MOVWF  1F
....................     delay_ms(50);  
0AA7:  MOVLW  32
0AA8:  MOVWF  4E
0AA9:  BCF    0A.3
0AAA:  CALL   035
0AAB:  BSF    0A.3
....................       
....................     float toFloor ; 
....................     while (1) { 
....................        
....................        
....................         
....................       rotaryR = read_adc(); 
0AAC:  BSF    1F.1
0AAD:  BTFSC  1F.1
0AAE:  GOTO   2AD
0AAF:  BSF    03.5
0AB0:  MOVF   1E,W
0AB1:  BCF    03.5
0AB2:  MOVWF  21
0AB3:  MOVF   1E,W
0AB4:  MOVWF  22
....................       degree = 155.0*(1021 - rotaryR) / 387.0; 
0AB5:  MOVF   21,W
0AB6:  SUBLW  FD
0AB7:  MOVWF  77
0AB8:  MOVLW  03
0AB9:  MOVWF  7A
0ABA:  MOVF   22,W
0ABB:  BTFSS  03.0
0ABC:  INCFSZ 22,W
0ABD:  SUBWF  7A,F
0ABE:  MOVF   77,W
0ABF:  BSF    03.5
0AC0:  MOVWF  38
0AC1:  MOVF   7A,W
0AC2:  MOVWF  39
0AC3:  BCF    0A.3
0AC4:  BCF    03.5
0AC5:  CALL   049
0AC6:  BSF    0A.3
0AC7:  BSF    03.5
0AC8:  CLRF   3B
0AC9:  CLRF   3A
0ACA:  MOVLW  1B
0ACB:  MOVWF  39
0ACC:  MOVLW  86
0ACD:  MOVWF  38
0ACE:  MOVF   7A,W
0ACF:  MOVWF  3F
0AD0:  MOVF   79,W
0AD1:  MOVWF  3E
0AD2:  MOVF   78,W
0AD3:  MOVWF  3D
0AD4:  MOVF   77,W
0AD5:  MOVWF  3C
0AD6:  BCF    0A.3
0AD7:  BCF    03.5
0AD8:  CALL   068
0AD9:  BSF    0A.3
0ADA:  MOVF   7A,W
0ADB:  MOVWF  50
0ADC:  MOVF   79,W
0ADD:  MOVWF  4F
0ADE:  MOVF   78,W
0ADF:  MOVWF  4E
0AE0:  MOVF   77,W
0AE1:  MOVWF  4D
0AE2:  MOVF   7A,W
0AE3:  MOVWF  5C
0AE4:  MOVF   79,W
0AE5:  MOVWF  5B
0AE6:  MOVF   78,W
0AE7:  MOVWF  5A
0AE8:  MOVF   77,W
0AE9:  MOVWF  59
0AEA:  CLRF   60
0AEB:  MOVLW  80
0AEC:  MOVWF  5F
0AED:  MOVLW  41
0AEE:  MOVWF  5E
0AEF:  MOVLW  87
0AF0:  MOVWF  5D
0AF1:  BCF    0A.3
0AF2:  CALL   0DF
0AF3:  BSF    0A.3
0AF4:  MOVF   7A,W
0AF5:  MOVWF  26
0AF6:  MOVF   79,W
0AF7:  MOVWF  25
0AF8:  MOVF   78,W
0AF9:  MOVWF  24
0AFA:  MOVF   77,W
0AFB:  MOVWF  23
....................       distance = distanceFromUltrasonic(); 
0AFC:  BCF    0A.3
0AFD:  GOTO   1A9
0AFE:  BSF    0A.3
0AFF:  MOVF   7A,W
0B00:  MOVWF  2A
0B01:  MOVF   79,W
0B02:  MOVWF  29
0B03:  MOVF   78,W
0B04:  MOVWF  28
0B05:  MOVF   77,W
0B06:  MOVWF  27
....................   
....................  
....................       if(!input(PIN_B7)){ 
0B07:  BSF    03.5
0B08:  BSF    06.7
0B09:  BCF    03.5
0B0A:  BTFSC  06.7
0B0B:  GOTO   336
....................          toFloor = distance; 
0B0C:  MOVF   2A,W
0B0D:  MOVWF  38
0B0E:  MOVF   29,W
0B0F:  MOVWF  37
0B10:  MOVF   28,W
0B11:  MOVWF  36
0B12:  MOVF   27,W
0B13:  MOVWF  35
....................           
....................          clearDisplay(); 
0B14:  BCF    0A.3
0B15:  CALL   27A
0B16:  BSF    0A.3
....................          setDisplayPos(1); 
0B17:  MOVLW  01
0B18:  MOVWF  4D
0B19:  BCF    0A.3
0B1A:  CALL   28B
0B1B:  BSF    0A.3
....................          displayLongText((char*)"Calibrated!"); 
0B1C:  CLRF   78
0B1D:  MOVLW  0C
0B1E:  MOVWF  77
0B1F:  MOVLW  39
0B20:  MOVWF  04
0B21:  BCF    03.7
0B22:  MOVF   78,W
0B23:  BCF    0A.3
0B24:  CALL   004
0B25:  BSF    0A.3
0B26:  MOVWF  00
0B27:  INCF   78,F
0B28:  INCF   04,F
0B29:  DECFSZ 77,F
0B2A:  GOTO   322
0B2B:  CLRF   50
0B2C:  MOVLW  39
0B2D:  MOVWF  4F
0B2E:  BCF    0A.3
0B2F:  CALL   2A1
0B30:  BSF    0A.3
....................          delay_ms(100); 
0B31:  MOVLW  64
0B32:  MOVWF  4E
0B33:  BCF    0A.3
0B34:  CALL   035
0B35:  BSF    0A.3
....................       } 
....................  
....................       rad = degree * 0.0174533; 
0B36:  MOVF   26,W
0B37:  BSF    03.5
0B38:  MOVWF  3B
0B39:  BCF    03.5
0B3A:  MOVF   25,W
0B3B:  BSF    03.5
0B3C:  MOVWF  3A
0B3D:  BCF    03.5
0B3E:  MOVF   24,W
0B3F:  BSF    03.5
0B40:  MOVWF  39
0B41:  BCF    03.5
0B42:  MOVF   23,W
0B43:  BSF    03.5
0B44:  MOVWF  38
0B45:  MOVLW  39
0B46:  MOVWF  3F
0B47:  MOVLW  FA
0B48:  MOVWF  3E
0B49:  MOVLW  0E
0B4A:  MOVWF  3D
0B4B:  MOVLW  79
0B4C:  MOVWF  3C
0B4D:  BCF    0A.3
0B4E:  BCF    03.5
0B4F:  CALL   068
0B50:  BSF    0A.3
0B51:  MOVF   7A,W
0B52:  MOVWF  32
0B53:  MOVF   79,W
0B54:  MOVWF  31
0B55:  MOVF   78,W
0B56:  MOVWF  30
0B57:  MOVF   77,W
0B58:  MOVWF  2F
....................       tall = (tan(rad) * distance ) + toFloor; 
0B59:  MOVF   32,W
0B5A:  MOVWF  50
0B5B:  MOVF   31,W
0B5C:  MOVWF  4F
0B5D:  MOVF   30,W
0B5E:  MOVWF  4E
0B5F:  MOVF   2F,W
0B60:  MOVWF  4D
0B61:  BCF    0A.3
0B62:  GOTO   677
0B63:  BSF    0A.3
0B64:  MOVF   7A,W
0B65:  MOVWF  50
0B66:  MOVF   79,W
0B67:  MOVWF  4F
0B68:  MOVF   78,W
0B69:  MOVWF  4E
0B6A:  MOVF   77,W
0B6B:  MOVWF  4D
0B6C:  MOVF   7A,W
0B6D:  BSF    03.5
0B6E:  MOVWF  3B
0B6F:  BCF    03.5
0B70:  MOVF   79,W
0B71:  BSF    03.5
0B72:  MOVWF  3A
0B73:  BCF    03.5
0B74:  MOVF   78,W
0B75:  BSF    03.5
0B76:  MOVWF  39
0B77:  BCF    03.5
0B78:  MOVF   77,W
0B79:  BSF    03.5
0B7A:  MOVWF  38
0B7B:  BCF    03.5
0B7C:  MOVF   2A,W
0B7D:  BSF    03.5
0B7E:  MOVWF  3F
0B7F:  BCF    03.5
0B80:  MOVF   29,W
0B81:  BSF    03.5
0B82:  MOVWF  3E
0B83:  BCF    03.5
0B84:  MOVF   28,W
0B85:  BSF    03.5
0B86:  MOVWF  3D
0B87:  BCF    03.5
0B88:  MOVF   27,W
0B89:  BSF    03.5
0B8A:  MOVWF  3C
0B8B:  BCF    0A.3
0B8C:  BCF    03.5
0B8D:  CALL   068
0B8E:  BSF    0A.3
0B8F:  MOVF   7A,W
0B90:  MOVWF  50
0B91:  MOVF   79,W
0B92:  MOVWF  4F
0B93:  MOVF   78,W
0B94:  MOVWF  4E
0B95:  MOVF   77,W
0B96:  MOVWF  4D
0B97:  CLRF   52
0B98:  MOVF   04,W
0B99:  MOVWF  51
0B9A:  BCF    52.0
0B9B:  BTFSC  03.7
0B9C:  BSF    52.0
0B9D:  BCF    03.1
0B9E:  MOVF   7A,W
0B9F:  BSF    03.5
0BA0:  MOVWF  3B
0BA1:  BCF    03.5
0BA2:  MOVF   79,W
0BA3:  BSF    03.5
0BA4:  MOVWF  3A
0BA5:  BCF    03.5
0BA6:  MOVF   78,W
0BA7:  BSF    03.5
0BA8:  MOVWF  39
0BA9:  BCF    03.5
0BAA:  MOVF   77,W
0BAB:  BSF    03.5
0BAC:  MOVWF  38
0BAD:  BCF    03.5
0BAE:  MOVF   38,W
0BAF:  BSF    03.5
0BB0:  MOVWF  3F
0BB1:  BCF    03.5
0BB2:  MOVF   37,W
0BB3:  BSF    03.5
0BB4:  MOVWF  3E
0BB5:  BCF    03.5
0BB6:  MOVF   36,W
0BB7:  BSF    03.5
0BB8:  MOVWF  3D
0BB9:  BCF    03.5
0BBA:  MOVF   35,W
0BBB:  BSF    03.5
0BBC:  MOVWF  3C
0BBD:  BCF    0A.3
0BBE:  BCF    03.5
0BBF:  CALL   30B
0BC0:  BSF    0A.3
0BC1:  MOVF   51,W
0BC2:  MOVWF  04
0BC3:  BCF    03.7
0BC4:  BTFSC  52.0
0BC5:  BSF    03.7
0BC6:  MOVF   7A,W
0BC7:  MOVWF  2E
0BC8:  MOVF   79,W
0BC9:  MOVWF  2D
0BCA:  MOVF   78,W
0BCB:  MOVWF  2C
0BCC:  MOVF   77,W
0BCD:  MOVWF  2B
....................   
....................        
....................       printf("Sensor= %Lu\tDegree= %.2f\tDist= %.2f cm  tall=%f cm\r\n", rotaryR,degree,distance,tall); 
0BCE:  MOVLW  14
0BCF:  BSF    03.6
0BD0:  MOVWF  0D
0BD1:  MOVLW  00
0BD2:  MOVWF  0F
0BD3:  BCF    03.0
0BD4:  MOVLW  08
0BD5:  BCF    03.6
0BD6:  MOVWF  4D
0BD7:  BCF    0A.3
0BD8:  CALL   6F7
0BD9:  BSF    0A.3
0BDA:  MOVLW  10
0BDB:  MOVWF  04
0BDC:  MOVF   22,W
0BDD:  MOVWF  4E
0BDE:  MOVF   21,W
0BDF:  MOVWF  4D
0BE0:  BCF    0A.3
0BE1:  GOTO   750
0BE2:  BSF    0A.3
0BE3:  MOVLW  19
0BE4:  BSF    03.6
0BE5:  MOVWF  0D
0BE6:  MOVLW  00
0BE7:  MOVWF  0F
0BE8:  BSF    03.0
0BE9:  MOVLW  09
0BEA:  BCF    03.6
0BEB:  MOVWF  4D
0BEC:  BCF    0A.3
0BED:  CALL   6F7
0BEE:  BSF    0A.3
0BEF:  MOVLW  89
0BF0:  MOVWF  04
0BF1:  MOVF   26,W
0BF2:  MOVWF  50
0BF3:  MOVF   25,W
0BF4:  MOVWF  4F
0BF5:  MOVF   24,W
0BF6:  MOVWF  4E
0BF7:  MOVF   23,W
0BF8:  MOVWF  4D
0BF9:  MOVLW  02
0BFA:  MOVWF  51
0BFB:  CALL   04F
0BFC:  MOVLW  20
0BFD:  BSF    03.6
0BFE:  MOVWF  0D
0BFF:  MOVLW  00
0C00:  MOVWF  0F
0C01:  BCF    03.0
0C02:  MOVLW  07
0C03:  BCF    03.6
0C04:  MOVWF  4D
0C05:  BCF    0A.3
0C06:  CALL   6F7
0C07:  BSF    0A.3
0C08:  MOVLW  89
0C09:  MOVWF  04
0C0A:  MOVF   2A,W
0C0B:  MOVWF  50
0C0C:  MOVF   29,W
0C0D:  MOVWF  4F
0C0E:  MOVF   28,W
0C0F:  MOVWF  4E
0C10:  MOVF   27,W
0C11:  MOVWF  4D
0C12:  MOVLW  02
0C13:  MOVWF  51
0C14:  CALL   04F
0C15:  MOVLW  25
0C16:  BSF    03.6
0C17:  MOVWF  0D
0C18:  MOVLW  00
0C19:  MOVWF  0F
0C1A:  BSF    03.0
0C1B:  MOVLW  0A
0C1C:  BCF    03.6
0C1D:  MOVWF  4D
0C1E:  BCF    0A.3
0C1F:  CALL   6F7
0C20:  BSF    0A.3
0C21:  MOVLW  89
0C22:  MOVWF  04
0C23:  MOVF   2E,W
0C24:  MOVWF  50
0C25:  MOVF   2D,W
0C26:  MOVWF  4F
0C27:  MOVF   2C,W
0C28:  MOVWF  4E
0C29:  MOVF   2B,W
0C2A:  MOVWF  4D
0C2B:  MOVLW  02
0C2C:  MOVWF  51
0C2D:  CALL   04F
0C2E:  MOVLW  2B
0C2F:  BSF    03.6
0C30:  MOVWF  0D
0C31:  MOVLW  00
0C32:  MOVWF  0F
0C33:  BSF    03.0
0C34:  MOVLW  05
0C35:  BCF    03.6
0C36:  MOVWF  4D
0C37:  BCF    0A.3
0C38:  CALL   6F7
0C39:  BSF    0A.3
....................       delay_ms(100); 
0C3A:  MOVLW  64
0C3B:  MOVWF  4E
0C3C:  BCF    0A.3
0C3D:  CALL   035
0C3E:  BSF    0A.3
....................       clearDisplay(); 
0C3F:  BCF    0A.3
0C40:  CALL   27A
0C41:  BSF    0A.3
....................       setDisplayPos(1); 
0C42:  MOVLW  01
0C43:  MOVWF  4D
0C44:  BCF    0A.3
0C45:  CALL   28B
0C46:  BSF    0A.3
....................       char* message; 
....................       displayLongText((char*)"Deg:"); 
0C47:  MOVLW  44
0C48:  MOVWF  47
0C49:  MOVLW  65
0C4A:  MOVWF  48
0C4B:  MOVLW  67
0C4C:  MOVWF  49
0C4D:  MOVLW  3A
0C4E:  MOVWF  4A
0C4F:  CLRF   4B
0C50:  CLRF   50
0C51:  MOVLW  47
0C52:  MOVWF  4F
0C53:  BCF    0A.3
0C54:  CALL   2A1
0C55:  BSF    0A.3
....................        
....................       if(degree >= 90) sprintf( message , "----" ); 
0C56:  BSF    03.5
0C57:  CLRF   37
0C58:  CLRF   36
0C59:  MOVLW  34
0C5A:  MOVWF  35
0C5B:  MOVLW  85
0C5C:  MOVWF  34
0C5D:  BCF    03.5
0C5E:  MOVF   26,W
0C5F:  BSF    03.5
0C60:  MOVWF  3B
0C61:  BCF    03.5
0C62:  MOVF   25,W
0C63:  BSF    03.5
0C64:  MOVWF  3A
0C65:  BCF    03.5
0C66:  MOVF   24,W
0C67:  BSF    03.5
0C68:  MOVWF  39
0C69:  BCF    03.5
0C6A:  MOVF   23,W
0C6B:  BSF    03.5
0C6C:  MOVWF  38
0C6D:  BCF    0A.3
0C6E:  BCF    03.5
0C6F:  CALL   2CA
0C70:  BSF    0A.3
0C71:  BTFSC  03.0
0C72:  GOTO   475
0C73:  BTFSS  03.2
0C74:  GOTO   481
0C75:  MOVF   46,W
0C76:  MOVWF  34
0C77:  MOVF   45,W
0C78:  MOVWF  33
0C79:  MOVLW  2F
0C7A:  BSF    03.6
0C7B:  MOVWF  0D
0C7C:  MOVLW  00
0C7D:  MOVWF  0F
0C7E:  BCF    03.6
0C7F:  CALL   122
0C80:  GOTO   492
....................       else sprintf( message , "%.1lf" ,(float) degree); 
0C81:  MOVF   46,W
0C82:  MOVWF  34
0C83:  MOVF   45,W
0C84:  MOVWF  33
0C85:  MOVLW  89
0C86:  MOVWF  04
0C87:  MOVF   26,W
0C88:  MOVWF  54
0C89:  MOVF   25,W
0C8A:  MOVWF  53
0C8B:  MOVF   24,W
0C8C:  MOVWF  52
0C8D:  MOVF   23,W
0C8E:  MOVWF  51
0C8F:  MOVLW  01
0C90:  MOVWF  55
0C91:  CALL   17C
....................        
....................        setDisplayPos(5); 
0C92:  MOVLW  05
0C93:  MOVWF  4D
0C94:  BCF    0A.3
0C95:  CALL   28B
0C96:  BSF    0A.3
....................       displayLongText(message); 
0C97:  MOVF   46,W
0C98:  MOVWF  50
0C99:  MOVF   45,W
0C9A:  MOVWF  4F
0C9B:  BCF    0A.3
0C9C:  CALL   2A1
0C9D:  BSF    0A.3
....................        
....................       setDisplayPos(9); 
0C9E:  MOVLW  09
0C9F:  MOVWF  4D
0CA0:  BCF    0A.3
0CA1:  CALL   28B
0CA2:  BSF    0A.3
....................       displayLongText((char*)"Dis:"); 
0CA3:  MOVLW  44
0CA4:  MOVWF  47
0CA5:  MOVLW  69
0CA6:  MOVWF  48
0CA7:  MOVLW  73
0CA8:  MOVWF  49
0CA9:  MOVLW  3A
0CAA:  MOVWF  4A
0CAB:  CLRF   4B
0CAC:  CLRF   50
0CAD:  MOVLW  47
0CAE:  MOVWF  4F
0CAF:  BCF    0A.3
0CB0:  CALL   2A1
0CB1:  BSF    0A.3
....................       sprintf( message , "%.2lf" ,(float)distance /100.0); 
0CB2:  MOVF   2A,W
0CB3:  MOVWF  5C
0CB4:  MOVF   29,W
0CB5:  MOVWF  5B
0CB6:  MOVF   28,W
0CB7:  MOVWF  5A
0CB8:  MOVF   27,W
0CB9:  MOVWF  59
0CBA:  CLRF   60
0CBB:  CLRF   5F
0CBC:  MOVLW  48
0CBD:  MOVWF  5E
0CBE:  MOVLW  85
0CBF:  MOVWF  5D
0CC0:  BCF    0A.3
0CC1:  CALL   0DF
0CC2:  BSF    0A.3
0CC3:  MOVF   7A,W
0CC4:  MOVWF  50
0CC5:  MOVF   79,W
0CC6:  MOVWF  4F
0CC7:  MOVF   78,W
0CC8:  MOVWF  4E
0CC9:  MOVF   77,W
0CCA:  MOVWF  4D
0CCB:  MOVF   46,W
0CCC:  MOVWF  34
0CCD:  MOVF   45,W
0CCE:  MOVWF  33
0CCF:  MOVLW  89
0CD0:  MOVWF  04
0CD1:  MOVF   7A,W
0CD2:  MOVWF  54
0CD3:  MOVF   79,W
0CD4:  MOVWF  53
0CD5:  MOVF   78,W
0CD6:  MOVWF  52
0CD7:  MOVF   77,W
0CD8:  MOVWF  51
0CD9:  MOVLW  02
0CDA:  MOVWF  55
0CDB:  CALL   17C
....................       displayLongText(message); 
0CDC:  MOVF   46,W
0CDD:  MOVWF  50
0CDE:  MOVF   45,W
0CDF:  MOVWF  4F
0CE0:  BCF    0A.3
0CE1:  CALL   2A1
0CE2:  BSF    0A.3
....................  
....................  
....................       setDisplayPos(17); 
0CE3:  MOVLW  11
0CE4:  MOVWF  4D
0CE5:  BCF    0A.3
0CE6:  CALL   28B
0CE7:  BSF    0A.3
....................       displayLongText((char*)"tall:"); 
0CE8:  MOVLW  74
0CE9:  MOVWF  47
0CEA:  MOVLW  61
0CEB:  MOVWF  48
0CEC:  MOVLW  6C
0CED:  MOVWF  49
0CEE:  MOVWF  4A
0CEF:  MOVLW  3A
0CF0:  MOVWF  4B
0CF1:  CLRF   4C
0CF2:  CLRF   50
0CF3:  MOVLW  47
0CF4:  MOVWF  4F
0CF5:  BCF    0A.3
0CF6:  CALL   2A1
0CF7:  BSF    0A.3
....................        
....................       if(degree >= 90) sprintf( message , "----" ); 
0CF8:  BSF    03.5
0CF9:  CLRF   37
0CFA:  CLRF   36
0CFB:  MOVLW  34
0CFC:  MOVWF  35
0CFD:  MOVLW  85
0CFE:  MOVWF  34
0CFF:  BCF    03.5
0D00:  MOVF   26,W
0D01:  BSF    03.5
0D02:  MOVWF  3B
0D03:  BCF    03.5
0D04:  MOVF   25,W
0D05:  BSF    03.5
0D06:  MOVWF  3A
0D07:  BCF    03.5
0D08:  MOVF   24,W
0D09:  BSF    03.5
0D0A:  MOVWF  39
0D0B:  BCF    03.5
0D0C:  MOVF   23,W
0D0D:  BSF    03.5
0D0E:  MOVWF  38
0D0F:  BCF    0A.3
0D10:  BCF    03.5
0D11:  CALL   2CA
0D12:  BSF    0A.3
0D13:  BTFSC  03.0
0D14:  GOTO   517
0D15:  BTFSS  03.2
0D16:  GOTO   523
0D17:  MOVF   46,W
0D18:  MOVWF  34
0D19:  MOVF   45,W
0D1A:  MOVWF  33
0D1B:  MOVLW  32
0D1C:  BSF    03.6
0D1D:  MOVWF  0D
0D1E:  MOVLW  00
0D1F:  MOVWF  0F
0D20:  BCF    03.6
0D21:  CALL   122
0D22:  GOTO   534
....................       else sprintf( message , "%.1f" ,tall ); 
0D23:  MOVF   46,W
0D24:  MOVWF  34
0D25:  MOVF   45,W
0D26:  MOVWF  33
0D27:  MOVLW  89
0D28:  MOVWF  04
0D29:  MOVF   2E,W
0D2A:  MOVWF  54
0D2B:  MOVF   2D,W
0D2C:  MOVWF  53
0D2D:  MOVF   2C,W
0D2E:  MOVWF  52
0D2F:  MOVF   2B,W
0D30:  MOVWF  51
0D31:  MOVLW  01
0D32:  MOVWF  55
0D33:  CALL   17C
....................       displayLongText(message); 
0D34:  MOVF   46,W
0D35:  MOVWF  50
0D36:  MOVF   45,W
0D37:  MOVWF  4F
0D38:  BCF    0A.3
0D39:  CALL   2A1
0D3A:  BSF    0A.3
....................  
....................  
....................        
....................        
....................        
....................       delay_ms(300); 
0D3B:  MOVLW  02
0D3C:  MOVWF  4D
0D3D:  MOVLW  96
0D3E:  MOVWF  4E
0D3F:  BCF    0A.3
0D40:  CALL   035
0D41:  BSF    0A.3
0D42:  DECFSZ 4D,F
0D43:  GOTO   53D
0D44:  GOTO   2AC
....................        
....................       
....................         
....................     } 
....................  
.................... } 
....................  
0D45:  SLEEP
....................  
....................  

Configuration Fuses:
   Word  1: 2FC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
